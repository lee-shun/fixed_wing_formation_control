%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 2016-TMC-Optimal Device-Aware Caching  5.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: yytsk
%%CreationDate: 2017/2/26 ÐÇÆÚÈÕ, 20:07:01
%%BoundingBox: 0 0 217 142
%%HiResBoundingBox: 0 0 216.6551 141.0550
%%CropBox: 0 0 216.6551 141.0550
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 964 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2017-02-26T20:05:19+08:00"
   xmp:CreateDate="2017-02-26T20:05:19+08:00"
   xmp:MetadataDate="2017-02-26T20:05:19+08:00"
   xmp:CreatorTool="Appligent AppendPDF Pro 5.5"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:63ceddb2-13aa-45d3-a628-e24b375f8f7b"
   xmpMM:InstanceID="uuid:e3aa97c5-a3dd-442c-b82f-c54c8cef96dd"
   pdf:Producer="pdfTeX-1.40.14">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">TMC2610978.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -141.055 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 141.055 li
216.655 141.055 li
216.655 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: KAAAAA+AdobeThai-Regular Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /KAAAAA+AdobeThai-Regular def
/FontInfo 7 dict dup begin
/Notice (Adobe Thai is a trademark of Adobe Systems Incorporated.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /one put
dup 33 /five put
dup 34 /three put
dup 35 /six put
dup 36 /hyphen put
dup 37 /two put
dup 38 /space put
dup 39 /parenleft put
dup 40 /c put
dup 41 /parenright put
dup 42 /zero put
dup 43 /I put
dup 44 /E put
dup 45 /period put
dup 46 /P put
dup 47 /e put
dup 48 /r put
dup 49 /s put
dup 50 /o put
dup 51 /n put
dup 52 /a put
dup 53 /l put
dup 54 /u put
dup 55 /i put
dup 56 /p put
dup 57 /m put
dup 58 /t put
dup 59 /d put
dup 60 /comma put
dup 61 /b put
dup 62 /slash put
dup 63 /q put
dup 64 /S put
dup 65 /h put
dup 66 /colon put
dup 67 /w put
dup 68 /g put
dup 69 /underscore put
dup 70 /x put
dup 71 /f put
dup 72 /T put
dup 73 /j put
dup 74 /y put
dup 75 /C put
dup 76 /D put
dup 77 /O put
dup 78 /nine put
dup 79 /M put
dup 80 /seven put
dup 81 /eight put
def
/FontBBox {-320 -238 867 936} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 0 359 374 412 425 465 470 512 527 577 590 703 710] def
/OtherBlues [-214 -198 -175 -172] def
/BlueScale 0.0437917 def
/BlueShift 5 def
/StdHW [30] def
/StdVW [51] def
/StemSnapH [27 30] def
/StemSnapV [34 51] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
51 dict dup begin
/one <1C60D8A8C9B739709F43C1A2A1A32BF2218C1077D7C5E31DBB2B2AC9CF
54F8AC96BC9582F10794A61ABDA57A9597A2DBB1F27C9B0E797AEECED096226D
B63DAB178CF8E58E9684> |-
/five <1C60D8A8C9B7397096295A8C55E695E84000A4BA8F71A109236895D92
599D8C0EE280865B556B5EE12C2B0A8D166F510DB4423F463B5D8AA46B2FE26B
AA77ECEED5122163A937D8DE28A1F89121A476B006DEB411DFB0250D3B390668
8B99F680DFE51208F26620A3FE1B316501CC892B78B4395E9FDCEC0061BC22F> |-
/three <1C60D8A8C9B7397096288CCA0290E80E62A43FC545B250A7CBE9E1C6
DC2513DBFBFEEEFAF9F8926D5B6EBBFA562083510DBF227C3BD611C6F92E4105
A0ABA69F7618171AD04E5E5C89BED5A5194CC515A899819331F82C075C47DDE8
01A62B66EB522050AA2271CA08575520DA18B9C214B335B6DB1578F7E8AE4950
1FE7B2E9F7312E7B272F675A8BA9D466B2806C6B812EFB672FDAFA86082C59BC
DBC158B9D97554D565ABA5072355FA> |-
/six <1C60D8A8C9B73970963F187F7C8473BD47FA2EBEC664B79DC551E3C029
FEA0D0C681D7D42006A5248C75B8CB40B826F8A6AB257E8E5CE496DD44B8F1A1
4C3A1F6B4282BBFC0BD747D6FEB74E23C9863DC84152323E0764BADA965D5A0A
E72ECB8ABC558F38ADF97A9F4E96174163B64F6284490AD424F08F754B> |-
/hyphen <1C60D8A8C9B845C874ACA048C551A8D4DFA2FAA392AAF68B17FD4D3
7AE59402A> |-
/two <1C60D8A8C9B739709F638FAEB46FC0DC7DD1FF9FC9E658EE1B85DCD0F6
A3D5088C24E97139C125E1B8126CAA35C85ADE99CECE559FACFD645752FE6795
5BD7EACDC69C884E03F0D64BFEDF7D32F105F032F663B9134531B13A76858C8F
6F8101C793A93DB462> |-
/space <1C60D8A8C9B8A89442> |-
/parenleft <1C60D8A8C9B84E0A44B5B938B11D5467AF45D690EB618DD9A4B7
9DE901D9E6A4BAA8AA0C684B7C6B4BF8E764D2317BA7AFA68FF3A70157B2C823
DDADD72D17> |-
/c <1C60D8A8C9B80E61C8ECA2B02A29F0475257AF60F7E3DAB598E441558B73
39CF6D4A39CFCFAB635D9DF2B401D7EC668A97748EA12EAC89482240C108D418
27F666857DBC49D953269AC82E8B65708461EBD85EDCEFDC9A799721D4D1A974
455A8C6D24E8FC> |-
/parenright <1C60D8A8C9B84E0A44B5B93882CD2AB61A94E1BC250FB1E6157
63187567F2A76C33FD0C2ED47EAED9F409B22B7388620D298096A9BD3BC7E65B
33EB9FA9D528518ED27> |-
/zero <1C60D8A8C9B73970963E4BF6ABDBB2E4639AA9AF3A3835D494060B4E1
411627DDCF8CEA13DB2BEC61CA8B95CC3798A1C2A9054F7228E3E831B482F97C
7E78C7AA442DFF24E9D8766284ADDC950E81F9739> |-
/I <1C60D8A8C9B8574464FAF68A804563B5100101AA425148AF8A5DBEA157FB
ACD08A9BAB986F1A7FFAAE556644DEFA3DC0B87417FFA1E03729A4A87A7757B5
32D4FC6C566A> |-
/E <1C60D8A8C9B749699D77C08DEC71C41C072C8611231C54ED1B28EE58FC99
B13F46EB5A2B773B48015DB6857E9BB82EB085E780720914B195A19381522E0A
000A04FC89BB68F2BE33F0F8CD1D387A11670C0821B651E4370BFF6B331CE6CE
8BC8D2210FE9A36D04B1BE4A4CC6FD2574E98EA31FC56D5595138F92276B08F8
5FDC57B43955176F0A396774D7D1D8D9234EC8A572DD6739E4838310BEB07763
8E065792CF0DA5168675B824AF9B1D8B0B31E62AD312177CA80F781A968BA7FF
3B670A298E30CD56EC5CC9> |-
/period <1C60D8A8C9B8B3756E2F9684F9CC86A1EDAAE42E7BD975770F11EBD
5519BB7D829AAC7A8261B66> |-
/P <1C60D8A8C9B74F361EB36A622A59019DAF1273E92B9658C9AC016461601C
6C1758210A7CBFA7BFE32E5F99FF9005B3D2A2173E8986B1DEEE050512FB21C2
D329E5C149C249527BDBE7F880742442C2B4D2D4BF5E6933432F2670D602A223
0B6DAE070361840FCCBFB868EB084FDBD91E99004B295C27CC8FD1C404B74182
706F287E575C1538> |-
/e <1C60D8A8C9B80F3784FEAD27434C2C6CE276B8F5777EC0E8AAEFB600980C
1E6F9D6279F2578D0FC8BD3F458CA985F376F80AE5BE1E931D35E26D329851E1
CD268DA3401C4CE37BA0EBE6C4E32CE9F61574FFE0F0B55BEFF7BBCB8AA10AC0
F3D88D4BC5AC2B5EA2F4DC21ABF9A1D6BDAD90B13E2B3F5B3BE6F6A7> |-
/r <1C60D8A8C9B83FE3212AA14D2FA24B9DD16145E16396081AA4B6BF89B9E2
354CB0C1D1B8D514FB84C54C69E5BC02CD09E62CF327D82136B8FD3F4A76E40D
4EC30666617B95A48FB8709DBBA223AA470871DEE8BC597B62B8BA9FA379EACF
629C99D41BB092F339D0A2898A49D138A71C1715D7B10FEFB933BB7E37A6022D
BBF8477693791C24> |-
/s <1C60D8A8C9B83E2DCF705C98A31D32915EA79087D0C59A83FEBCD33BF036
4A9FE9F5B26965E24037537F528AE57BAB4AB2C02A4EC93E1D56ED3AC3A91A86
EBEF08EA949F90B873B88D89D80FEFBA7A895BC37AC8F3A42136FE761B07CCAC
D8DAEFD218CBB15D43E3410E4FEB49765B084D1B6629F4C6D5E6431C> |-
/o <1C60D8A8C9B718ECA8B0184545D7790F6DF40025E3BBB4601BDE045FE500
3E180CA1286F9EB759F1FE03C11118438BE813460BAECFDAEE28B5A05D195CEA
6A0ED5CA74CBB72DE4DA8C1467736A> |-
/n <1C60D8A8C9B77BBBD6B8D14F68F1B51405FC9C42B3ED1FCC81351662AC2E
F5C272B1ADE6FDA089B4ABA38265136D1907F8D245C1BB16D1E169BEEDB36252
A21FFA19C277E3EA9A1DE9A015E81F94FFB47253BD74E2C1563DAAB220FB3B91
16F546084767EE08F387280956EAF8AA459BF4987D2AB3703618D360DED4BB3D
C0CCA1C7CFA43274AF7CBD7BF2AC7E5B56887734870BB211EADBF9CF9AF275A1
BE> |-
/a <1C60D8A8C9B80456E354C9DDF75C58C09B00691B768C2392E6F789272462
6AF9277A9F0C062E3C0E475F5F0327B1D134AA417F833F39A7EEAB70C17696DD
3C1BBE5C031E99B6DC21135EDAF632CFE75A42B49DE0A228B035471B285CC270
6B8D90547CD4947185936AB3529F05D3F5C788EBC83D9AED383E8BAED1B895FB
BB26DE12938E29F05CABAA2DEC7C56E6989A285BD1EE889CA07FFC536C1E2EE8
D1F3816889E85E9E1F7FA7131FBF4390232CBE> |-
/l <1C60D8A8C9B89F5A926A8CBB9732007E24580F9C982CD6DF25274BE3F110
0E21568F03767F4CD5CC9AC400A1055AC3A5D75BD52CDCEA947A9E7949767576
55715CC97DCA7F474186156C9535909DAE> |-
/u <1C60D8A8C9B7693F040EBBFC4065C03052ECEAE6723971FC6CB5EFAE1CFE
C789C8FE408BCEF7BFB4C387C501CF9ECE6A3D8365C75ABF4752AE173CD0EE22
030C4B09F873FFD67C5A3E507A4FE0D81BC40451B8D845804F97D35AC3BDDB99
C577A729EAA2C39C20A361CF0CC2D82DD2913E29178E96F41523C9EEEA06594E
52AC57A7E7F830062F5F9B6273A0AA0509010794CED77BD34C747B1122BDF3CE
21EBAB53952D2AADCC15F43C83BC554EFD8D07B315D2D640E2124882683B37B3
C7A3F72757C44BBD393A005CC56997D77E7A5D6B480C28A775D2E7EF24C70B4C
8AE9E52950D67EA3348F25542F7F0BC431DF5ECD5AC754DE23F70A6920025292
BFCB388D492F4CD06C526739900AC1D03CF6D8766C> |-
/i <1C60D8A8C9B893A778CC3023AD141B366E7ADC3FC500163836993BF56ED6
44F282043F4C9FAEF13930754D3425C858FFD3C64AF7F7BB1EECE2795F97873B
0C05B1C0C2EBFB699D0507CFC6A5C2BA38978556C4321B5C36CDF7F5B6F20793
F744F602396BB50FCF838765B8BD53FC> |-
/p <1C60D8A8C9B76E37EDAA065BDAF667EA4B4E7F6B9C1842963BF9B3EB24C3
7B1D38273ACC5B2426100E4800CBF55F37B6B5DA768C1A3F9257123D963A8DF6
22FD505F8880AD730FE42A79037BD3B4EDFA355D19F98477EDDF6A5103203FA8
E62F4129424943C4846D33A0A8660C6930869EB99AB3B95934FE60C264836F9D
0FE61E14CABB2005> |-
/m <1C60D8A8C9B65201E060A40A7EF3E0D675B118E3E48A1FC354C56E211B2C
FF3BE08397FB3CDB0276C391F62290E48F9AB11FCEB66FC20A2B32E23F3912E1
AB09616CA6205D2F8B6BBDC99DCB4EC7FBA258D173930B4DCBC799448E39BA40
B13FD0AD05758F3A00680459C8738A9A6E9F5E786EBCA9A5E9F9A336FE17377F
8FE07321F912BBD91455BD536C07230802E118373F72B3CA399639663BC47244
9DCC30FF8E5B9C2E0A6EDDF6EED5136A69C2950CD1A3541C32AB3B661401E5D9
34CC78592F1D02F41D772BC37B723F77E85616504731D45883362E3713DE1518
0FFAF27AE36B2260E2CB47E9848B8225> |-
/t <1C60D8A8C9B875743A36DD91F03E8574EBEB7E108CDAAC82583CDF7135A1
B004918CF1DFAC12DA579A320CFB134242DC12C1A516A012EBCA64980D0A41D4
AD2F8953BEC70AD7CF0A9DDC219AAB15A1867F75E256056ABF891E70359FBE> |-
/d <1C60D8A8C9B76BC2FC8A5D9FD236278B9CDF9F99D69E6F79BE60AB336941
76C4D7EBE0EEE8FC1DF8886134A437CC68EBCF588E987146FD1AB54AEE0E75B4
3EF02C19B0BF9496DE5C6F03FAA8D5545355F65BE24EC9047B903271FA5BA2F0
0F16B52BD18EC2E9AD22305175A024E584EE9B5E7993AEE951FCF46E35124F45
1745AAD85D026181E986F08DF8C2ACCB1F1E5DBADC44D2128945360806C8279D
E098BB043D4FF6403B9EF569D16C77BB9266EB9D773512AD61EF9C494C3E4CCA
1EDF580CD45D2F6A449E5F50194B1EDB7B9DA2813F64AB7BFA7AC4> |-
/comma <1C60D8A8C9B8B375C271233E4E5BED6591F426A5515E52E007C68A0B
D2087A8BB2A6923FF99EBAEC360C8F8595437E9F7C72E6EA5683C6623EFEEC5A
E2> |-
/b <1C60D8A8C9B71C16851105E351E7577BAA7765B5BF0C71AF6A833E9ADA5D
F561AB8AAE293137BB5BFF59A44B0F31F74326009AFD7B24A03F2F0972174554
048B431AC90336B8A388DD93102394BFBD820991970A53CD6D5DF831A27889BE
374C33C72E73B449A285D86A90D8F7FD52F4A9A36B11A5616D0A17F43A2078DA
E9A86182EFD07AD24164B6838E58> |-
/slash <1C60D8A8C9B85B8FB523E0961C0B40924DC7BB38584D17D5064CC1C5
B693F04F> |-
/q <1C60D8A8C9B719BD250C9359295EA51371F99B18EDEC682F7454D281435D
54DCD5FA5CDBF76EEE17D9E0C939DA80C83B7AF56F7E5F9B59408D25497BB0F0
6CAAF6DF0D8C9447A54FD373C01B6DAB34F750E26E433E19F7F3AA888D0A1088
7FBBFE51D70ADA3DF7281FC108FD9591A73555570581FCBB110BD5B4022B9741
D17FFF7DC3CCF0BD3924C293517010B880DB92455FA3C49BE414341A1A1CDFF5
9A3EF7EA25017401C99BC681BBE8E6ACDF> |-
/S <1C60D8A8C9B738A2B41177723BD045DB32287201C406B431EEC2A41A59D3
6AF5C1F10BBC476B7F4C7BD0E77B41D428BB4F02FB2F4BC9CCC77AED1686C931
72DF51B3F6E572233AC6BCB486DFF3B079B0566509547FDFDA8D31471A66E36D
75525BC9657A41E1E3820D364BDA20EA75489CBAD2D483B6601CC6874FB070CF
3B12A1C67A9E21CEAE2A70524F21DCDD3A87A609D616276B07039137CAA2BEC3
05EEF4CA> |-
/h <1C60D8A8C9B766CA40960FCD83089F1BD79D15B64AA3A611E0AF9C69AC86
16E341593FBA82A385D17647434FC61F9C5947463CB0404694BCCAD6F8CA323A
53448AB33F8C8DC8B569895449A05E4424CB4EDFD5E87BE6C71DE752C8E9D191
33F26924C28A7927DFFE2F83C7732390657725D3B72772385B0331C17C69A2> |-
/colon <1C60D8A8C9B8B3756E2F96C8644B9CC6540178E063F4624A270297AD
D12C3101146A53258A353B59A50D45C0B49C183A7B907BCA80D01E7A6196B631
FA29CDD88BA0CE4BC7> |-
/w <1C60D8A8C9B7E7C1CFD86DDA8814D441EF5CBD9A45ED39B701482AFD2C78
7A4987222DD03B6B1946B864D3B8D039534F623C3715439BCBAE5D2A159C1947
F70C0B4EBD8FA370E748E4545C3EAE5A305399428342FC53B863639B2BED151A
A39C3AC63871D845439DDC30F222E6CD40DEA46B3BCEEB6E55110D49FB867062
10C2E34E8F233ECAFA3B5CD3> |-
/g <1C60D8A8C9B73DBAD2F9790770DFDC92AB3D10A8F4E541D5F6D93B4368C3
C14E68ACD27F9F0478EEB092FA9A8E44ECCEE7E2A562C495C06CA296092A3D8B
FCC3F3F2AB66F899FCA2CE83B5B206F50CCCCDF868CE4D745C654A9F4B84C1CA
9C7DCFE8C3D5A975897D41C4F955A25707E725E374D59CE17E40B30BD0C43469
055960A14CBF00EC9E3D0BAC5E385B32C390EA34B6E1F06AC1093D6378C0399C
658C92B56DE1C0ECD2E027AB514605AD5FD98EA63EE1FD1D3544F2AA183B486A
ACBD52143B32AE19530E92264AFFB7741918143E3FF7442E742C2767B730AF7B
87152876BC30A6785F915C6F33FF0D64DDB53B0DFDB8E906AAAD5591503BA656
046F463B69F2BB5F2A8037E26D86F9C3C333E9B679F237A64A2EA0D5D9CA5630
066EA7058BD0A6B3F299645F5ADBD2B2D835739477499E509F0AAE7DCAF876D0
95840B328855CB22C5997AFF560BDC7485A029B3F379C5B13074F05F6F5F372D
8A929AD60F566F8F4511B75A54E360A25CA7C1F00421EE26BF60EDE242ADCCBF
BDCDFECA92D073DDC844E9BADFCDAF9BA39A113C92DAA366C72C5EBE7F34D96E
426D0B7DE7BB0E83121A173CDA325E787281666CF25F47DD6B43A423F99410A0
C2573AB28E4B2CB7> |-
/underscore <1C60D8A8C9B7015B7AA0A7F025D53256C9112E65A3C1917DBF2
EB188> |-
/x <1C60D8A8C9B738A2408D7AC98C67B592D36595F11AE09E3C4A7E61F201AA
041EAC4FE1D50AED1A793A29680939B439E46DC69117D0E3B3EB6C2B203094F3
C4A54C266794FC1591BD3AEA6F66B88A4AE7A01B7594ABE53EE64B7CAFCCF820
8F6343F1F4F8E23613B3479B7475FD56406926603BFF5F2C1FB03766D86E0057
07B2DE7B085550942E4ECC1421949124138ED52443DC8273587230BC64560951
9DE9B1212D0739B8ACDB093C41B382B1E8CB78BA7A40C9CD1631624554C4> |-
/f <1C60D8A8C9B87A8F0E13FD0F83D17B2E6630A51F3E1F3236E71E165B3890
7561223B9709CD5740366597ADBD8B0FA833B3326E5F1358EA8DF86F24020C55
EFB08A1B6FBE7AA8E1A2DDE9254526C392D39644B3D5E53C29ED5160844583D3
A245F32A729E11A4DB0D317AA41A9B9CE338C22E4B38FC5CAD9C8528078CF769
AF453836B0AB22F538A78F1B690D32650C63BA30B413> |-
/T <1C60D8A8C9B7A225645367A0274226F5891EAE55A7689528D3F511429FCB
A568A4599007A51631BE959E7457ED909F09ED8E09A576E97DF3127C6F65A1FA
18075F08BDDEEF32193B8041A4B7193FB4E6DC99654742EAD73B52861017508A
5E57F589DF02205C3D2A283512CE8255AFA460E18B45AB0A03A084DAFAF42C> |-
/j <1C60D8A8C9B89DB71983BF5F3287748BB4B93B81450F8E7B84A6EEADD9EB
386F83CF5E9A4BA488E3341D4A6F7D7A4DC9E9216958FD48796E9840EE6D3145
825285272DEE03FA5E2675BC59C2C5B0EFE381E388B23ACC21A9751BF6C310F4
80A4578E9686EA068ACBCC25ECEBC95D2EDFB0134B525C41F635F390743D7A20
7A41F0106A71866602DCE1EF624B0B1ACC7C22D8> |-
/y <1C60D8A8C9B722FF7F8E1DC178B870E80E358D1CDD3A651A8E2B6BCB5B5C
240A43380B34490FEE08435CE2B3AB71831E08040284562D209C4B6F23D7BC98
D02174CE60A7709DFF4BBBCA8F8C4A9C53644430B02D6C5E7130C8C7F5B7D1C1
827D2F854F9677973B765CE21CDDE397B3D2C72B6D5D8BB105DB44334207B526
84E0C366C24E55EC42670998295A2D89505782> |-
/C <1C60D8A8C9B798157F15EFB8524D092FF4BD076E136ABDF08A7551E0C968
2AD0666EAC62D96B754460FEA2B3497E45D8EA9FD3D6BC6FDA22EF8DD951BFE9
636A3B5C142F28C7C5EACD1D286AF1274377F1CDC533E4E64456658507A4CD67
67D1912F13F281CD5860BD9CEC5CD52ECC36EDD47F4E1DE1A9805ED7123C77B8> |-
/D <1C60D8A8C9B7C12A21E10EE95C4341DCE4F43E5BD194BEB0A6B6DA6917EA
C8080A5ADC9A9D3B7AFB7182CB043C1CFE8573D659D407E45098A3AEF8297925
96D37EA0B48E7C77CA45FF1CC9F32896696A38F8EFE4084AD046E3BDEC4ED40A
1A7AA6F68FEB6041333648C22328735F2F5380DC361AD2D0E67B1F93AFFCCBC4
B3EF9C3A520A3C2179E78F87815FEDEE290D5F2366102BA00D1F0EEAFC4761> |-
/O <1C60D8A8C9B7D545FFF49C407DBE95FCB3F4CA538766FD78F1790C1231AC
325B7E36D4F825F3CC677BD1F718AFB58FD3535FE0333A32CC86D4051C42EB00
79503B80E8F94942BB4E791921FDBEEC657BF8C062C89DD0315F3F5A7D3A53DA
33> |-
/nine <1C60D8A8C9B7397080AA1A80ABA692653986B26205E512CA3F603D006
D4220A2493EBD21891F52F1DD73B8D2F14EFE3A87E141BD5FE1DA5FABDAA5960
F9B75338B3390FCD0F741DE5BF21BA83BF783A75A159FD24F1EC2FAE4DF976FC
5AFFB47DE8CF47A36DB783FB7D33F229623F6C3DB75D49F3A> |-
/M <1C60D8A8C9B6133265921E019C6A2F033D12D29BC14A58CE50A21FA20181
C3BF41D120BBC8E0D823DF717ACA40274560A1D405D6F99FAA7D1A67B8D58E31
5C013B9A8F3B906138E75A2AA2398DD593D066200957D611D6ADB0CA8969EFCC
E9860C3A85D206A9C72093D1B3B2D98D3DE0812259A502D25451754C11A80FE6
235FB676A561C442EE5DB7B0072F6B9C2A4C4DD28448A5B234E17DD9> |-
/seven <1C60D8A8C9B739708BCDF66DA99B58C61F8D4FD2BD18C5D3FAA62199
31C2F3FEAFE4212CDEDF824AC281B603565E3DF9795712CC067D8D4A1F43AC7C
AD7ED1458F28DB601ADAFBB71BB5F93FCFBC4C4599CB70B57EDBDA> |-
/eight <1C60D8A8C9B739709639436EFF694E9714284E55BB95F96F5C806FA1
5CF32D9702512CE749C3CCD77EA199701552079CC3AA15D30E532C7332FD9357
A6CCAC9008EC659E739F0F416FCCB615BD40F2DD005ABCE3DCC6EF74296E2E81
6ACDAD93F7C85A1FE1A4B657D766CCF0F9B27C68671058A5F0CAAB68990FC8C5
1101BAAE8C43A55E81DC10DAB1BDBB7B8EDB5B40D63F23343B523626003DA78F
302C7ECFFC76993970D97F48975A269B4F93AECB279C237B4C2F645ABF679480
8133EFCD65795E384B6F717810BAF37F11EE16064F85DECC> |-
/.notdef <1C60D8A8C9B714A50B0315ACB44B2E53993B4F9EE0C3D9E432D91B
260A20508866E8DFFFC4541433824A04DCC90922E99687682E793BCA95672BCD
38EC63859FCCA90F4B43057F90662117005F21811C65FEA8894C55FEF7DFF06F
28B9CEA98F8B2EF66B> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJQV+AdobeThai-Regular /KAAAAA+AdobeThai-Regular findfont ct_VMDictPut
/EVXJQV+AdobeThai-Regular*1 
[32{/.notdef}rp /one /five /three /six /hyphen /two /space 
/parenleft /c /parenright /zero /I /E /period /P 
/e /r /s /o /n /a /l /u 
/i /p /m /t /d /comma /b /slash 
/q /S /h /colon /w /g /underscore /x 
/f /T /j /y /C /D /O /nine 
/M /seven /eight 174{/.notdef}rp]
EVXJQV+AdobeThai-Regular nf
EVXJQV+AdobeThai-Regular*1 [8 0 0 -8 0 0 ]msf
-281.915 721.691 mo
( !"#$ %""&'\(\)&%* #&+,,,-&./012345&61/&71&8/097::/;<&=6:&0/86=57\(4:723>0/;71:07=6:723&0/?670/1&+,,,&8/09711723-&@//&A::8B>>CCC-7)
[3.08801 3.08801 3.08801 3.08801 2.35999 3.08801 3.08801 3.08801 3.088 1.552 2.27197 2.78406 
2.27197 1.552 3.08801 3.08801 3.08801 3.08801 1.552 2.21594 3.72803 3.72803 3.72803 1.47998 
1.552 3.68005 2.79199 2.40796 2.40002 3.35205 3.58398 2.86401 1.64001 1.552 3.47205 2.40002 
2.79199 1.552 1.73596 2.40002 1.552 3.43201 2.79199 2.40796 5.36804 1.73596 1.97595 1.97595 
2.79199 3.45605 1.47998 1.552 3.31995 3.47205 1.97595 1.552 2.40796 2.79199 3.43201 3.47205 
3.31995 1.64001 1.73596 2.78406 2.86401 1.97595 1.73596 3.35205 3.58398 2.18396 2.40796 2.79199 
3.45605 1.73596 2.40002 1.97595 2.40796 1.73596 3.31995 3.47205 1.97595 1.73596 3.35205 3.58398 
1.552 2.40796 2.79199 3.34399 3.47205 1.73598 2.40796 2.79199 2.40002 1.552 2.21594 3.72803 
3.72803 3.72803 1.552 3.43201 2.79199 2.40796 5.36804 1.73596 2.40002 2.40002 1.73596 3.35205 
3.58398 1.47998 1.552 3.09595 2.79199 2.79199 1.552 3.49597 1.97595 1.97595 3.43201 1.47998 
2.18396 2.18396 4.51196 4.51196 4.51196 1.47998 0 ]xsh
54.3724 721.691 mo
(///-20D>86=57\(4:7231E1:43;40;1>86=57\(4:7231>07DA:1>73;/F-A:95&G20&920/)sh
-35.907 731.291 mo
(73G2094:723-)sh
-256.927 -28.045 mo
(HA71&40:7\(5/&A41&=//3&4\(\(/8:/;&G20&86=57\(4:723&73&4&G6:60/&7116/&2G&:A71&I260345<&=6:&A41&32:&=//3&G655J&/;7:/;-&K23:/3:&94J&\(A)
[4.04004 3.49597 1.73596 2.40002 1.552 2.86401 2.40796 1.97595 1.73596 2.78406 1.64001 2.79199 
1.552 3.49597 2.86401 2.40002 1.552 3.31995 2.79199 2.79199 3.58398 1.552 2.86401 2.78406 
2.78406 2.79199 3.43201 1.97595 2.79199 3.45605 1.552 1.92004 3.35205 2.40796 1.552 3.43201 
3.47205 3.31995 1.64001 1.73596 2.78406 2.86401 1.97595 1.73596 3.35205 3.58398 1.552 1.73596 
3.58398 1.552 2.86401 1.552 1.92004 3.47205 1.97595 3.47205 2.40796 2.79199 1.552 1.73596 
2.40002 2.40002 3.47205 2.79199 1.552 3.35205 1.92004 1.552 1.97595 3.49597 1.73596 2.40002 
1.552 1.65601 3.35205 3.47205 2.40796 3.58398 2.86401 1.64001 1.47998 1.552 3.31995 3.47205 
1.97595 1.552 3.49597 2.86401 2.40002 1.552 3.58398 3.35205 1.97595 1.552 3.31995 2.79199 
2.79199 3.58398 1.552 1.92004 3.47205 1.64001 1.64001 3.01599 1.552 2.79199 3.45605 1.73596 
1.97595 2.79199 3.45605 1.47998 1.552 4.37598 3.35205 3.58398 1.97595 2.79199 3.58398 1.97595 
1.552 5.36804 2.86401 3.01599 1.552 2.78406 0 ]xsh
66.6252 -28.045 mo
(43D/&80720&:2&G7345&86=57\(4:723-&K7:4:723&73G2094:723B&LM+)sh
-112.247 -18.4451 mo
( *-  *N>HOK-%* #-%# *NPQ<&+,,,&H04314\(:7231&23&O2=75/&K2986:73D)sh
%ADOBeginSubsetFont: LAAAAA+NimbusRomNo9L-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LAAAAA+NimbusRomNo9L-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 53 /five put
def
/FontBBox {-168 -281 1000 924} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 450 470 662 682] def
/BlueScale 0.039625 def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38 43 53 60 73] def
/StemSnapV [78 85 91 103 109 115] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/five <1C60D8A8C9B7A73D33A88FEA12959A734E0957E304D49DC85E4BE1FA3
9EAB2AF48D0318F3CC26662E787C00C247C6E0112180BCE6759D50FF9BBD9846
DFA361CDEB2512314B6E62318760F370D90F648D279E929D53983BF8D2AC98EF
81CED8855AB0EC5338E13ECD1542C111649132984A10E95D5EFD7471329778D6
74DBEAC9048068A00D504E5675BFC58E3AC> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJQW+NimbusRomNo9L-Regu /LAAAAA+NimbusRomNo9L-Regu findfont ct_VMDictPut
/EVXJQW+NimbusRomNo9L-Regu*1 
[53{/.notdef}rp /five 202{/.notdef}rp]
EVXJQW+NimbusRomNo9L-Regu nf
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
224.786 -19.3091 mo
(5)sh
gsave
-244.978 139.679 mo
-40.978 139.679 li
-40.978 2.27893 li
-244.978 2.27893 li
cp
clp
-244.978 139.679 mo
-34.078 139.679 li
-34.078 -2.52106 li
-244.978 -2.52106 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
-244.978 139.679 mo
-34.078 139.679 li
-34.078 -2.52106 li
-244.978 -2.52106 li
cp
f
-227.878 120.479 mo
-64.678 120.479 li
-64.678 13.979 li
-227.878 13.979 li
cp
f
.6 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
-227.878 120.479 mo
-227.878 13.979 li
1 /0 /CSD get_res sepcs
.12695 sep
@
-200.678 120.479 mo
-200.678 13.979 li
@
-173.478 120.479 mo
-173.478 13.979 li
@
-146.278 120.479 mo
-146.278 13.979 li
@
-119.078 120.479 mo
-119.078 13.979 li
@
-91.8781 120.479 mo
-91.8781 13.979 li
@
-64.678 120.479 mo
-64.678 13.979 li
@
-64.678 120.479 mo
-227.878 120.479 li
1 /0 /CSD get_res sepcs
.14844 sep
@
-64.678 84.979 mo
-227.878 84.979 li
@
-64.678 49.4789 mo
-227.878 49.4789 li
@
-64.678 13.979 mo
-227.878 13.979 li
@
1 /0 /CSD get_res sepcs
.85107 sep
%ADOBeginSubsetFont: GAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /GAAAAA+Helvetica def
/FontInfo 6 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 115 /s put
dup 122 /z put
def
/UniqueID 5020902 def
/FontBBox {0 -218 762 741} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 0 524 539 729 741 686 709] def
/StdHW [78] def
/StdVW [85] def
/StemSnapH [78 83] def
/StemSnapV [85 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079FE1CE316282F0E84E7EAE56817E527B1A2FBA7D6E6E3E
84761CC128BB54A99A2A93B5D172E1531D29A45A5EC52E28A860DB78AEF5044D
D841ADA187A0971E5C6028FECC99F95A89CDEF60FF9739318C6CDCFD940AFB97
77EC1EB041B6AC82C7B827BCFC6CB4C10A94B6280806B13F83> |-
/a <1C60D8A8C9B7EF32A835872312BA38ECCECE8951474DD5CAA68265B2F007
7774DC7F3451D7D63DB42834E8CA98DCE699A0CC5B36BF814E3B80B06F4DA27B
9116C1B8E7AA28478611C53AA03391989948EEDD0F15B8190B4D553731226D40
9ACF431AD3866ECE6475825C17AA6F1C12F87CCB78AE7ABA03EEB80FA59FF37A
D180E40F2937DB96DD21AA2B595B8A40D0252E3B40464E8A653126A1F793C9CE
AFDD358A2DD60445> |-
/c <1C60D8A8C9B7A73D3A65C15B5AE8DF81DD1343D8AA6F164496C050DAE1B7
AE1C7D1CCEAF2E1094AEE61906D994460D35D718694E3B5F4B6AA437EC1B72F1
0FE2CDD44AC7D043035ADEA0FA367F7D09EC8F26E62094A9C6DCA9C61C> |-
/e <1C60D8A8C9B7EF32A839C1FD591230A166F277FECE72B730F1E2F317E004
93971DEE8E5EAE9387F2DAF20CAA9EDB2AA477FF9EAA4CC21C1650D37B61458B
35699A0C598AB28D1BF3FC566A8A3188BB3E7F14D6C575EE74C51E2E8E4E6F5D
3491A9F18F05171ED970B25AFE0F35A1> |-
/h <1C60D8A8C9B7EF32570F064E709B8926574C03377BA220AE0888CBE55DD7
8AB956CD4302BB789AA6D333FFAC07825CB3A243F22D03D26FA5A13E87B236A1
2658D027FD878D62E9E0B2786BB555DABBC7F8CB> |-
/i <1C60D8A8C9B88C080EFCC82F89BA7CEC445252AFD9C466095706C3632A72
A909DDBFB135AC84356031E8C02E54FBB26A6808DC1FFB183B155F5ECA24B946> |-
/s <1C60D8A8C9B7A73D3A65C15B5AE8DF91C48D2A2C43668D79F8F3A5F93548
3A3C34060A94950E9D350B9F868CE3ED993FB40EC7E2AFF791133043B6F7AAED
813166E977345DD4BD6846AFC2220F71A5F08394F74E4F5F1CD427FFB1CAFB15
B1F5A397A7109181C4A69B391CAEE240EE10B1146EFE73E7914695CD307234F6> |-
/z <1C60D8A8C9B7A73DC507CAD0E5DFE643D31A4E6B11FABD4208D503774320
4B31FEF10DBD97DC6225A0AD01031FB41D73CCE7> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJQX+Helvetica /GAAAAA+Helvetica findfont ct_VMDictPut
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 29{/.notdef}rp /a /.notdef /c 
/.notdef /e 2{/.notdef}rp /h /i 9{/.notdef}rp /s 6{/.notdef}rp 
/z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
-168.539 138.809 mo
(Cache size)sh
-227.878 120.479 mo
-64.678 120.479 li
@
-227.878 13.979 mo
-64.678 13.979 li
@
-227.878 120.479 mo
-227.878 118.847 li
@
-227.878 13.979 mo
-227.878 15.6109 li
@
-200.678 120.479 mo
-200.678 118.847 li
@
-200.678 13.979 mo
-200.678 15.6109 li
@
-173.478 120.479 mo
-173.478 118.847 li
@
-173.478 13.979 mo
-173.478 15.6109 li
@
-146.278 120.479 mo
-146.278 118.847 li
@
-146.278 13.979 mo
-146.278 15.6109 li
@
-119.078 120.479 mo
-119.078 118.847 li
@
-119.078 13.979 mo
-119.078 15.6109 li
@
-91.8781 120.479 mo
-91.8781 118.847 li
@
-91.8781 13.979 mo
-91.8781 15.6109 li
@
-64.678 120.479 mo
-64.678 118.847 li
@
-64.678 13.979 mo
-64.678 15.6109 li
@
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7EF32A8358722AA80E7B0A403E0AAC8AF9773710239EE9
9CFB03C40A2F97D10285CF7561FE54E06EBD6D0440B8D110A5A738867D010936
BBC35E300E5FB3C772FA150D2BF1D040E476DEC48E0B601B04FE56E185DA1E8C
577426BB5FA04F8E4DB> |-
/one <1C60D8A8C9B7EF325769C0FBEA5835F33F02B7CECACC0A743B3A5F88AC
64BF1714E84DCB71209FFA2E2B5136> |-
/two <1C60D8A8C9B7EF325772DAA73F3C25ADEBE04C8170362283A6CB490C13
1F5203D4D9AE5635256B5304F57E15EAB9584977EA6B904C788253513C16D8C6
3EEA9555B3CDDA75DCCED6AA8BE483002CF48705E755ADDF63C886329965CF0C
CC0E68BC87B8223E810A4592D42E707404F5A4F9593B53> |-
/three <1C60D8A8C9B7EF32A838F0ACFF5B844952183B5229D50C4F29A2A4C4
2A85C453A4C716C52BBDD204179B08875273251EB47710D08D89961D07728375
781AC7A945EB0AD3FBDC001DB7DC483D88696371882ACE1BACDE42DAB6AE5180
A82F025BF17651EB3CBD3C775E3DE59ECE21E09B2792AEA8C6DBD1911A73CC91
9001B89EEF79A9043A3F3180FC11316C48A66998BADEAFA1B1> |-
/four <1C60D8A8C9B7EF322B2BCA34D3B0F77B38A747F0598F5064FBBC978DC
843BE06460D64559937B4B1F61D0FD596B2429AF3CDF9F6E0B891578E60507FC
4595F1362373786F263E8C0BF5B15174A5502AA62675F08B7312522F8B5F7BB5
C0EEB5C1E8B3623554B> |-
/five <1C60D8A8C9B7EF32A838F0ADD872C6F18F8BC0A4E34F48B3514399714
1C18CFB9408A8718EED7EBBE8F3F21F3798538909C7C94F5BECA096FD038C7E1
F0DB769BFC3A0F646A376CB65BD18167F67FF2007B81FBC1CAB702F01F57C4E3
1F3559988F254DAAC1F1AB8281F76> |-
/six <1C60D8A8C9B7EF32A838F0A21CA921E6C536A1402506CC0BE2CAB6D245
F4C7C5BB439C84B8E94B061F4FA4CDA17B02174025BC101707780520704B1EF6
5E5A11AEDA4993C116BF72A9285A614EBADF4FF9DDD64EC9776E83B64AE834A8
82013D67DA48296C082A9DD99F35A55F5FD51EDB671D5F84554CD79751AC7DB2
FB00441602F4C075C48D4B9E36> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 12{/.notdef}rp /C 29{/.notdef}rp /a /.notdef /c 
/.notdef /e 2{/.notdef}rp /h /i 9{/.notdef}rp /s 6{/.notdef}rp 
/z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
-230.381 129.809 mo
(0100200300400500600)
[22.1946 5.004 5.004 17.1919 5.004 5.004 17.1921 5.004 5.004 17.1921 5.004 5.004 
17.1919 5.004 5.004 17.1921 5.004 5.004 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F1E0B540198B8DDE6757C2310D3AD5E1FDF2BC0C60FD3
111145A0C6CE3E2B7407A7378D5CEC81742B166F74521F0055BFBBBC2731E70B
FB8F1E64CE6DC937ED1C7E392B> |-
/g <1C60D8A8C9B7EF3224FCC08D5E470DE48814AE884614A4BDFA1745011603
6D9CA21C209A37C1B3F6D43C632D20C018068582891D6E2C60D822D32806995E
ACE10ED1B9737D8FA59F67A63606151D87D7BC4D5A990F56914948F1DAC3C793
48E57A73B80FE9C7728D541439D51E7EF40A39A24862DD40B14A2109D5B10F35
5F172F9C5577525DD7F0EA47A6070A5720C867998E6D6C2188BBC9F10E89544F
772BE6E910E8D68AB8C8362DEF309579DB844B03C19ACF1063C38F2351B01836
CAF1B66921481E22087F> |-
/m <1C60D8A8C9B6B41CC78139463B68644DCDC079B77E252B1BDBC174BFADBB
0D9A7BDB307A532BE37687E1CA9BCA32275A14FC349F464A0A7087C4729843CF
AE7A4B06C7BF18B20329649F3842C3E6CF34DF4774446F4782D13BE644BAD557
DE15CAD7FA0F4FDD151916036D12981FA872142804DF17E14F13A898AF40B7EF
7DD9DBF3B6D064> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 68 /D put
dup 103 /g put
dup 109 /m put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 12{/.notdef}rp /C /D 28{/.notdef}rp /a /.notdef 
/c /.notdef /e /.notdef /g /h /i 3{/.notdef}rp 
/m 5{/.notdef}rp /s 6{/.notdef}rp /z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [0 -9 -9 0 0 0 ]msf
-237.953 84.2381 mo
(Damage)
[-6.498 -5.004 -7.49693 -5.00399 -5.004 0 ]ysh
%ADOBeginSubsetFont: HAAAAA+mwb_cmsy10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HAAAAA+mwb_cmsy10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 2011 MathWorks, Inc) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 35 /multiply put
def
/FontBBox {0 0 630 491} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/multiply <1C60D8A8C9B6FC2DFBC0267A928374077F187731D1DA152081E1E
3894C69808B63A6FBCA882FF4C0D0E1AAE24F20A1CB752D58F3BB149AF02E97B
215D1608B9FED1CB15155D8517188A817061739C3D4F2B6384B15F463F6BDCF0
6DF49DCC38BA6F8AC27D2A36EF1F128ED585ADFDB4946601EB1B359D057F0CE0
F50BB5AF1782B18608093D2E06A1E0B> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJQY+mwb_cmsy10 /HAAAAA+mwb_cmsy10 findfont ct_VMDictPut
/EVXJQY+mwb_cmsy10*1 
[35{/.notdef}rp /multiply 220{/.notdef}rp]
EVXJQY+mwb_cmsy10 nf
EVXJQY+mwb_cmsy10*1 [9 0 0 -9 0 0 ]msf
-227.878 12.1789 mo
(#)sh
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
-220.678 12.1789 mo
(10)
[5.004 0 ]xsh
EVXJQX+Helvetica*1 [7.2 0 0 -7.2 0 0 ]msf
-210.478 7.67896 mo
(5)sh
-227.878 120.479 mo
-227.878 13.979 li
@
-64.678 120.479 mo
-64.678 13.979 li
@
-227.878 120.479 mo
-226.246 120.479 li
@
-64.678 120.479 mo
-66.31 120.479 li
@
-227.878 84.979 mo
-226.246 84.979 li
@
-64.678 84.979 mo
-66.31 84.979 li
@
-227.878 49.4789 mo
-226.246 49.4789 li
@
-64.678 49.4789 mo
-66.31 49.4789 li
@
-227.878 13.979 mo
-226.246 13.979 li
@
-64.678 13.979 mo
-66.31 13.979 li
@
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
-235.284 123.059 mo
(0)sh
-235.284 87.5591 mo
(2)sh
-235.284 52.0592 mo
(4)sh
-235.284 16.559 mo
(6)sh
-214.278 109.971 mo
-200.678 100.072 li
-187.078 90.7675 li
-173.478 82.1527 li
-159.878 74.2754 li
-146.278 67.1423 li
-132.678 61.0678 li
-119.078 55.8739 li
-105.478 51.8198 li
-91.8781 49.1945 li
-78.2779 47.7868 li
-64.678 47.8571 li
/1 
[/DeviceCMYK] /CSA add_res
0 .9617 .904814 0 cmyk
@
-216.778 109.829 mo
-211.678 109.829 li
@
-214.228 112.379 mo
-214.228 107.279 li
@
-215.878 111.479 mo
-212.578 108.179 li
@
-215.878 108.179 mo
-212.578 111.479 li
@
-203.278 99.929 mo
-198.178 99.929 li
@
-200.728 102.479 mo
-200.728 97.379 li
@
-202.378 101.579 mo
-199.078 98.279 li
@
-202.378 98.279 mo
-199.078 101.579 li
@
-189.478 90.629 mo
-184.378 90.629 li
@
-186.928 93.179 mo
-186.928 88.0789 li
@
-188.578 92.279 mo
-185.278 88.979 li
@
-188.578 88.979 mo
-185.278 92.279 li
@
-175.978 82.229 mo
-170.878 82.229 li
@
-173.428 84.779 mo
-173.428 79.679 li
@
-175.078 83.879 mo
-171.778 80.5789 li
@
-175.078 80.5789 mo
-171.778 83.879 li
@
-162.478 74.129 mo
-157.378 74.129 li
@
-159.928 76.679 mo
-159.928 71.5789 li
@
-161.578 75.779 mo
-158.278 72.479 li
@
-161.578 72.479 mo
-158.278 75.779 li
@
-148.678 67.229 mo
-143.578 67.229 li
@
-146.128 69.779 mo
-146.128 64.679 li
@
-147.778 68.879 mo
-144.478 65.5789 li
@
-147.778 65.5789 mo
-144.478 68.879 li
@
-135.178 60.929 mo
-130.078 60.929 li
@
-132.628 63.479 mo
-132.628 58.379 li
@
-134.278 62.5789 mo
-130.978 59.279 li
@
-134.278 59.279 mo
-130.978 62.5789 li
@
-121.678 55.8289 mo
-116.578 55.8289 li
@
-119.128 58.379 mo
-119.128 53.279 li
@
-120.778 57.479 mo
-117.478 54.179 li
@
-120.778 54.179 mo
-117.478 57.479 li
@
-107.878 51.929 mo
-102.778 51.929 li
@
-105.328 54.479 mo
-105.328 49.379 li
@
-106.978 53.5789 mo
-103.678 50.279 li
@
-106.978 50.279 mo
-103.678 53.5789 li
@
-94.378 49.229 mo
-89.278 49.229 li
@
-91.828 51.779 mo
-91.828 46.679 li
@
-93.478 50.879 mo
-90.178 47.5789 li
@
-93.478 47.5789 mo
-90.178 50.879 li
@
-80.878 47.729 mo
-75.778 47.729 li
@
-78.328 50.279 mo
-78.328 45.179 li
@
-79.978 49.379 mo
-76.678 46.0789 li
@
-79.978 46.0789 mo
-76.678 49.379 li
@
-67.078 47.729 mo
-61.978 47.729 li
@
-64.528 50.279 mo
-64.528 45.179 li
@
-66.178 49.379 mo
-62.878 46.0789 li
@
-66.178 46.0789 mo
-62.878 49.379 li
@
-214.278 116.119 mo
-200.678 111.854 li
-187.078 105.97 li
-173.478 96.5323 li
-159.878 85.3808 li
-146.278 75.5162 li
-132.678 66.9613 li
-119.078 59.5217 li
-105.478 53.9024 li
-91.8781 50.1461 li
-78.2779 48.0829 li
-64.678 47.9573 li
.911009 .563104 1 .317327 cmyk
@
-215.983 117.884 mo
-215.983 114.374 li
-212.473 114.374 li
-212.473 117.884 li
-215.983 117.884 li
@
-202.483 113.684 mo
-202.483 110.174 li
-198.973 110.174 li
-198.973 113.684 li
-202.483 113.684 li
@
-188.683 107.684 mo
-188.683 104.174 li
-185.173 104.174 li
-185.173 107.684 li
-188.683 107.684 li
@
-175.183 98.3839 mo
-175.183 94.8739 li
-171.673 94.8739 li
-171.673 98.3839 li
-175.183 98.3839 li
@
-161.683 87.284 mo
-161.683 83.774 li
-158.173 83.774 li
-158.173 87.284 li
-161.683 87.284 li
@
-147.883 77.3839 mo
-147.883 73.8739 li
-144.373 73.8739 li
-144.373 77.3839 li
-147.883 77.3839 li
@
-134.383 68.684 mo
-134.383 65.174 li
-130.873 65.174 li
-130.873 68.684 li
-134.383 68.684 li
@
-120.883 61.184 mo
-120.883 57.674 li
-117.373 57.674 li
-117.373 61.184 li
-120.883 61.184 li
@
-107.083 55.784 mo
-107.083 52.2739 li
-103.573 52.2739 li
-103.573 55.784 li
-107.083 55.784 li
@
-93.583 51.884 mo
-93.583 48.3739 li
-90.073 48.3739 li
-90.073 51.884 li
-93.583 51.884 li
@
-80.083 49.784 mo
-80.083 46.2739 li
-76.573 46.2739 li
-76.573 49.784 li
-80.083 49.784 li
@
-66.283 49.784 mo
-66.283 46.2739 li
-62.773 46.2739 li
-62.773 49.784 li
-66.283 49.784 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7D8BE6A40C9752DBF6493052E3C73DE0D6A00295E8890CDF8
1C57C77413034CF0C170DB86143942F39AAF44FD3EC2DA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 70 /F put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 12{/.notdef}rp /C /D /.notdef /F 26{/.notdef}rp 
/a /.notdef /c /.notdef /e /.notdef /g /h 
/i 3{/.notdef}rp /m 5{/.notdef}rp /s 6{/.notdef}rp /z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [7.2 0 0 -7.2 0 0 ]msf
-87.1822 69.2444 mo
(FiF)sh
-97.8403 67.1504 mo
-88.1512 67.1504 li
0 .9617 .904814 0 cmyk
@
-95.578 67.229 mo
-90.478 67.229 li
@
-93.028 69.779 mo
-93.028 64.679 li
@
-94.678 68.879 mo
-91.378 65.5789 li
@
-94.678 65.5789 mo
-91.378 68.879 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B64EDF88209F7A312FACCCCDAD59A2EAB742690040B8D13D5A
2C59ADAC34772A84AC971BD62301195DE9BB2EFAEE1F03113D1673CEAA6ED2D8
319F> |-
/E <1C60D8A8C9B64EDF8862D774151335C23345609532E7B253FE8B912EA10C
B8B66F63B30176A08FE63396B229631787D90BB84F93352597783ACEA1> |-
/R <1C60D8A8C9B6079F1E495237436797E185D7CF3F7402F2BC3EC3BC90890D
ED6BF193ABC5D58C1CDBF8C5BAC4CEC14D8152C3F70BEBF42F1A4DCB1232C0CB
F2933F87C28643C61B828B883E255ECE3B5A82A9B7EA66C856B32F033FDB9EDA
BB1A00A832B2A4C896469541AE074B02CFF59FCE1EFFEAB22924B8C1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 65 /A put
dup 69 /E put
dup 82 /R put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 10{/.notdef}rp /A /.notdef /C /D /E 
/F 11{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /.notdef 
/e /.notdef /g /h /i 3{/.notdef}rp /m 5{/.notdef}rp 
/s 6{/.notdef}rp /z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [7.2 0 0 -7.2 0 0 ]msf
-87.1822 77.2019 mo
(DARE)sh
-97.8403 75.1076 mo
-88.1512 75.1076 li
.911009 .563104 1 .317327 cmyk
@
-94.783 76.784 mo
-94.783 73.2739 li
-91.273 73.2739 li
-91.273 76.784 li
-94.783 76.784 li
@
1 /0 /CSD get_res sepcs
1 sep
EVXJQX+Helvetica*1 [0 -9 -9 0 0 0 ]msf
-41.9365 95.4881 mo
(Cache misses)
[-6.498 -5.004 -4.5 -5.004 -5.004 -2.502 -7.49693 -1.99799 -4.5 -4.5 -5.004 0 
]ysh
.3 lw
-64.678 120.479 mo
-64.678 13.979 li
@
-64.678 120.479 mo
-66.31 120.479 li
@
-64.678 84.979 mo
-66.31 84.979 li
@
-64.678 49.4789 mo
-66.31 49.4789 li
@
-64.678 13.979 mo
-66.31 13.979 li
@
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088EEB7F5292ECB0543F68EFE6422AA9D95EF> |-
/seven <1C60D8A8C9B7EF32253D14E20E05A9AEADC092EE141C87F1416D12F5
6EBF816C75A992A0A09F935026928634D3FCF58AE1053F3171BB6A8275> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 46 /period put
dup 55 /seven put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven 9{/.notdef}rp /A /.notdef 
/C /D /E /F 11{/.notdef}rp /R 14{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /h /i 
3{/.notdef}rp /m 5{/.notdef}rp /s 6{/.notdef}rp /z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
-62.278 123.059 mo
(0.4)sh
-62.278 87.5591 mo
(0.5)sh
-62.278 52.0592 mo
(0.6)sh
-62.278 16.559 mo
(0.7)sh
.9 lw
0 lc
2 lj
[3.6 3.6 ] 0 dsh
-214.278 44.8433 mo
-200.678 73.5449 li
-187.078 88.7686 li
-173.478 95.1824 li
-159.878 95.2207 li
-146.278 94.7563 li
-132.678 95.765 li
-119.078 95.5196 li
-105.478 94.916 li
-91.8781 95.4781 li
-78.2779 95.4308 li
-64.678 95.8124 li
@
-213.528 44.8433 mo
-213.528 45.2576 -213.864 45.5933 -214.278 45.5933 cv
-214.692 45.5933 -215.028 45.2576 -215.028 44.8433 cv
-215.028 44.429 -214.692 44.0933 -214.278 44.0933 cv
-213.864 44.0933 -213.528 44.429 -213.528 44.8433 cv
f
-199.928 73.5452 mo
-199.928 73.9592 -200.264 74.2952 -200.678 74.2952 cv
-201.092 74.2952 -201.428 73.9592 -201.428 73.5452 cv
-201.428 73.1309 -201.092 72.7952 -200.678 72.7952 cv
-200.264 72.7952 -199.928 73.1309 -199.928 73.5452 cv
f
-186.328 88.7686 mo
-186.328 89.183 -186.664 89.5186 -187.078 89.5186 cv
-187.492 89.5186 -187.828 89.183 -187.828 88.7686 cv
-187.828 88.3544 -187.492 88.0186 -187.078 88.0186 cv
-186.664 88.0186 -186.328 88.3544 -186.328 88.7686 cv
f
-172.728 95.1824 mo
-172.728 95.5966 -173.064 95.9324 -173.478 95.9324 cv
-173.892 95.9324 -174.228 95.5966 -174.228 95.1824 cv
-174.228 94.7677 -173.892 94.4324 -173.478 94.4324 cv
-173.064 94.4324 -172.728 94.7677 -172.728 95.1824 cv
f
-159.128 95.2207 mo
-159.128 95.6351 -159.464 95.9707 -159.878 95.9707 cv
-160.292 95.9707 -160.628 95.6351 -160.628 95.2207 cv
-160.628 94.8065 -160.292 94.4707 -159.878 94.4707 cv
-159.464 94.4707 -159.128 94.8065 -159.128 95.2207 cv
f
-145.528 94.7563 mo
-145.528 95.1707 -145.864 95.5063 -146.278 95.5063 cv
-146.692 95.5063 -147.028 95.1707 -147.028 94.7563 cv
-147.028 94.3421 -146.692 94.0063 -146.278 94.0063 cv
-145.864 94.0063 -145.528 94.3421 -145.528 94.7563 cv
f
-131.928 95.765 mo
-131.928 96.1793 -132.264 96.515 -132.678 96.515 cv
-133.092 96.515 -133.428 96.1793 -133.428 95.765 cv
-133.428 95.3507 -133.092 95.015 -132.678 95.015 cv
-132.264 95.015 -131.928 95.3507 -131.928 95.765 cv
f
-118.328 95.5196 mo
-118.328 95.9339 -118.664 96.2696 -119.078 96.2696 cv
-119.492 96.2696 -119.828 95.9339 -119.828 95.5196 cv
-119.828 95.1053 -119.492 94.7696 -119.078 94.7696 cv
-118.664 94.7696 -118.328 95.1053 -118.328 95.5196 cv
f
-104.728 94.916 mo
-104.728 95.3302 -105.064 95.666 -105.478 95.666 cv
-105.892 95.666 -106.228 95.3302 -106.228 94.916 cv
-106.228 94.5016 -105.892 94.166 -105.478 94.166 cv
-105.064 94.166 -104.728 94.5016 -104.728 94.916 cv
f
-91.1281 95.4781 mo
-91.1281 95.8925 -91.4638 96.2281 -91.8781 96.2281 cv
-92.2924 96.2281 -92.6281 95.8925 -92.6281 95.4781 cv
-92.6281 95.0639 -92.2924 94.7281 -91.8781 94.7281 cv
-91.4638 94.7281 -91.1281 95.0639 -91.1281 95.4781 cv
f
-77.5279 95.4308 mo
-77.5279 95.845 -77.8636 96.1808 -78.2779 96.1808 cv
-78.6922 96.1808 -79.0279 95.845 -79.0279 95.4308 cv
-79.0279 95.0164 -78.6922 94.6808 -78.2779 94.6808 cv
-77.8636 94.6808 -77.5279 95.0164 -77.5279 95.4308 cv
f
-63.928 95.8124 mo
-63.928 96.2267 -64.2637 96.5624 -64.678 96.5624 cv
-65.0923 96.5624 -65.428 96.2267 -65.428 95.8124 cv
-65.428 95.398 -65.0923 95.0624 -64.678 95.0624 cv
-64.2637 95.0624 -63.928 95.398 -63.928 95.8124 cv
f
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34BC1722FEFB37BB58C35B527AE6A09491FA
40D7E8E5CDDF40B1FA04CF4C0C7382C2F861C47E3D9F31951A352479B61220DA
E3010153555D> |-
/parenright <1C60D8A8C9B81F2C34BC1722DDC8F1B2A5255D3125BF196E18C
C504ED91C8305BA71730C40B22B521DE97A022B4A559586A56D21ED89F0FFA70
036F1C6B28C3F> |-
/hyphen <1C60D8A8C9B81F2C3A3F8849EC2BB67A5BD4F88F2755E3CDDC4B78> |-
/Z <1C60D8A8C9B7D8BE6A02C8B7AC4B1E33E926F4A42EB3DCBF52BDEFDA4099
AE6D8F2CCCC8FDC741D08BB03D80C22B48068881> |-
/l <1C60D8A8C9B88C080EFCC82E6E5A8E04CAEF8E2733B507E0DF1A41EB96B5
AE45> |-
/o <1C60D8A8C9B7EF32A839C1F22A8D6B2DAF8CFACFB466AA2D5F9A52A530B9
2B386E86983A7B92F57D0543D2A0CFBC471C9D445F48D4D0F14AC0B786F401B0
C39487F7DBBD867D06B3D529EBB76A90CB8C93E0AE68E5> |-
/p <1C60D8A8C9B7EF3227B21D31137DC869EC372F70CAE6781EA146B2903260
E24F701FDF227E072BD95E12FE07374A82CFBFC1FAEC3E9F72B43A7E58F25448
F8ECD97EBDA99DF357C8A025EAA7697C1E9B95E6CFBCF5A54369DE5CFCE847B0
6818EB89383238BE77DC2777CEB0FE87D3053BDF8DDAF88CD8B12D25DAB9C6EC
F20114002F132EC0A2F251F06194D3C7E09EF627> |-
/r <1C60D8A8C9B81F2C46F7F63704E5ACDCC6A30439F08E2AF0F477AD569AEE
AD40211C367AF1DA849517960C0516775491EC31482B3B870EFC48A7A9008B38
B3892E7DA0BD0BA1A2EDFC822188EC0152802995> |-
/t <1C60D8A8C9B854D077BC25D4BFB2E66633FA304F09B33E72790D091A1F74
93B73F86D2D59BD8ED1F2C3BD5506D1577F359CAADEFA8A92D90AC960F761890
7B9B683BB76BFDF41C37F54548> |-
/u <1C60D8A8C9B7EF32570F064E9AB268D41CA7E35CE8166E0A4F0529FA110A
16D18CB853B9369274502A5E3D04A65A40EB79F08AEA22A5FC9FC51D714B9410
F476552C7DCDCEA86A146F547E59A30F62A7EC6D35968DB8E64625E74E51> |-
/y <1C60D8A8C9B7A73DB5828E2DB40A4006345BB6B47E4ECD963FC869C23699
86F6D079AC4A862814B9396DB438A1862183CED867E3C44BB9307A0DC4ECC06C
FABB472C23DE9B2490AEC3A42E4087C795FBC47D05CCB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 90 /Z put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven 9{/.notdef}rp /A /.notdef /C /D /E /F 
11{/.notdef}rp /R 7{/.notdef}rp /Z 6{/.notdef}rp /a /.notdef /c 
/.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l 
/m /.notdef /o /p /.notdef /r /s /t 
/u 3{/.notdef}rp /y /z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [7.2 0 0 -7.2 0 0 ]msf
-184.378 10.1845 mo
(\(a\) ZipF-0.65 popularity)sh
grestore
gsave
5.005 139.379 mo
213.205 139.379 li
213.205 2.57898 li
5.005 2.57898 li
cp
clp
5.005 139.379 mo
216.505 139.379 li
216.505 -2.82104 li
5.005 -2.82104 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
5.005 139.379 mo
216.505 139.379 li
216.505 -2.82104 li
5.005 -2.82104 li
cp
f
22.105 120.179 mo
184.705 120.179 li
184.705 14.279 li
22.105 14.279 li
cp
f
1 /0 /CSD get_res sepcs
.85107 sep
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
81.1444 138.509 mo
(Cache size)sh
.6 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
22.105 120.179 mo
184.705 120.179 li
@
22.105 14.279 mo
184.705 14.279 li
@
22.105 120.179 mo
22.105 118.553 li
@
22.105 14.279 mo
22.105 15.905 li
@
49.2049 120.179 mo
49.2049 118.553 li
@
49.2049 14.279 mo
49.2049 15.905 li
@
76.3051 120.179 mo
76.3051 118.553 li
@
76.3051 14.279 mo
76.3051 15.905 li
@
103.405 120.179 mo
103.405 118.553 li
@
103.405 14.279 mo
103.405 15.905 li
@
130.505 120.179 mo
130.505 118.553 li
@
130.505 14.279 mo
130.505 15.905 li
@
157.605 120.179 mo
157.605 118.553 li
@
157.605 14.279 mo
157.605 15.905 li
@
184.705 120.179 mo
184.705 118.553 li
@
184.705 14.279 mo
184.705 15.905 li
@
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
19.6023 129.509 mo
(0100200300400500600)
[22.0946 5.004 5.004 17.0921 5.004 5.004 17.092 5.00401 5.00401 17.092 5.004 5.004 
17.092 5.004 5.00398 17.0921 5.004 5.004 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
EVXJQX+Helvetica*1 [0 -9 -9 0 0 0 ]msf
12.0299 84.2381 mo
(Damage)
[-6.498 -5.004 -7.49693 -5.004 -5.004 0 ]ysh
EVXJQY+mwb_cmsy10*1 [9 0 0 -9 0 0 ]msf
22.105 12.479 mo
(#)sh
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
29.305 12.479 mo
(10)
[5.004 0 ]xsh
EVXJQX+Helvetica*1 [7.2 0 0 -7.2 0 0 ]msf
39.505 7.97896 mo
(5)sh
22.105 120.179 mo
22.105 14.279 li
@
184.705 120.179 mo
184.705 14.279 li
@
22.105 120.179 mo
23.731 120.179 li
@
184.705 120.179 mo
183.079 120.179 li
@
22.105 84.8789 mo
23.731 84.8789 li
@
184.705 84.8789 mo
183.079 84.8789 li
@
22.105 49.5791 mo
23.731 49.5791 li
@
184.705 49.5791 mo
183.079 49.5791 li
@
22.105 14.279 mo
23.731 14.279 li
@
184.705 14.279 mo
183.079 14.279 li
@
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
14.6994 122.759 mo
(0)sh
14.6994 87.4592 mo
(1)sh
14.6994 52.1591 mo
(2)sh
14.6994 16.8593 mo
(3)sh
35.6551 99.4322 mo
49.2049 80.3216 li
62.755 63.0101 li
76.3051 48.0692 li
89.8549 35.5604 li
103.405 26.1203 li
116.955 19.5482 li
130.505 17.2112 li
144.055 17.3282 li
157.605 17.0945 li
171.155 17.6858 li
184.705 17.5823 li
0 .9617 .904814 0 cmyk
@
33.205 99.329 mo
38.305 99.329 li
@
35.755 101.879 mo
35.755 96.779 li
@
34.105 100.979 mo
37.405 97.679 li
@
34.105 97.679 mo
37.405 100.979 li
@
46.705 80.429 mo
51.805 80.429 li
@
49.255 82.979 mo
49.255 77.879 li
@
47.605 82.079 mo
50.905 78.779 li
@
47.605 78.779 mo
50.905 82.079 li
@
60.205 63.029 mo
65.305 63.029 li
@
62.755 65.579 mo
62.755 60.479 li
@
61.105 64.679 mo
64.405 61.379 li
@
61.105 61.379 mo
64.405 64.679 li
@
73.705 48.029 mo
78.805 48.029 li
@
76.255 50.579 mo
76.255 45.479 li
@
74.605 49.679 mo
77.905 46.379 li
@
74.605 46.379 mo
77.905 49.679 li
@
87.205 35.429 mo
92.305 35.429 li
@
89.755 37.979 mo
89.755 32.879 li
@
88.105 37.079 mo
91.405 33.779 li
@
88.105 33.779 mo
91.405 37.079 li
@
101.005 26.129 mo
106.105 26.129 li
@
103.555 28.679 mo
103.555 23.579 li
@
101.905 27.779 mo
105.205 24.479 li
@
101.905 24.479 mo
105.205 27.779 li
@
114.505 19.529 mo
119.605 19.529 li
@
117.055 22.079 mo
117.055 16.979 li
@
115.405 21.179 mo
118.705 17.879 li
@
115.405 17.879 mo
118.705 21.179 li
@
128.005 17.129 mo
133.105 17.129 li
@
130.555 19.679 mo
130.555 14.579 li
@
128.905 18.779 mo
132.205 15.479 li
@
128.905 15.479 mo
132.205 18.779 li
@
141.505 17.429 mo
146.605 17.429 li
@
144.055 19.979 mo
144.055 14.879 li
@
142.405 19.079 mo
145.705 15.779 li
@
142.405 15.779 mo
145.705 19.079 li
@
155.005 17.129 mo
160.105 17.129 li
@
157.555 19.679 mo
157.555 14.579 li
@
155.905 18.779 mo
159.205 15.479 li
@
155.905 15.479 mo
159.205 18.779 li
@
168.505 17.729 mo
173.605 17.729 li
@
171.055 20.279 mo
171.055 15.179 li
@
169.405 19.379 mo
172.705 16.079 li
@
169.405 16.079 mo
172.705 19.379 li
@
182.305 17.729 mo
187.405 17.729 li
@
184.855 20.279 mo
184.855 15.179 li
@
183.205 19.379 mo
186.505 16.079 li
@
183.205 16.079 mo
186.505 19.379 li
@
35.6551 111.213 mo
49.2049 100.122 li
62.755 79.7321 li
76.3051 59.5229 li
89.8549 42.7751 li
103.405 29.7089 li
116.955 21.1856 li
130.505 17.6396 li
144.055 17.4698 li
157.605 17.2364 li
171.155 17.8274 li
184.705 17.7236 li
.889738 .4795 1 .118898 cmyk
@
34 113.084 mo
34 109.574 li
37.51 109.574 li
37.51 113.084 li
34 113.084 li
@
47.5 101.984 mo
47.5 98.474 li
51.01 98.474 li
51.01 101.984 li
47.5 101.984 li
@
61 81.584 mo
61 78.074 li
64.51 78.074 li
64.51 81.584 li
61 81.584 li
@
74.5 61.184 mo
74.5 57.674 li
78.01 57.674 li
78.01 61.184 li
74.5 61.184 li
@
88 44.384 mo
88 40.874 li
91.51 40.874 li
91.51 44.384 li
88 44.384 li
@
101.8 31.484 mo
101.8 27.974 li
105.31 27.974 li
105.31 31.484 li
101.8 31.484 li
@
115.3 23.084 mo
115.3 19.574 li
118.81 19.574 li
118.81 23.084 li
115.3 23.084 li
@
128.8 19.484 mo
128.8 15.974 li
132.31 15.974 li
132.31 19.484 li
128.8 19.484 li
@
142.3 19.184 mo
142.3 15.674 li
145.81 15.674 li
145.81 19.184 li
142.3 19.184 li
@
155.8 18.884 mo
155.8 15.374 li
159.31 15.374 li
159.31 18.884 li
155.8 18.884 li
@
169.3 19.484 mo
169.3 15.974 li
172.81 15.974 li
172.81 19.484 li
169.3 19.484 li
@
183.1 19.484 mo
183.1 15.974 li
186.61 15.974 li
186.61 19.484 li
183.1 19.484 li
@
.2001 lw
22.105 120.179 mo
22.105 14.279 li
1 /0 /CSD get_res sepcs
.14844 sep
@
49.2049 120.179 mo
49.2049 14.279 li
@
76.3051 120.179 mo
76.3051 14.279 li
@
103.405 120.179 mo
103.405 14.279 li
@
130.505 120.179 mo
130.505 14.279 li
@
157.605 120.179 mo
157.605 14.279 li
@
184.705 120.179 mo
184.705 14.279 li
@
184.705 120.179 mo
22.105 120.179 li
@
184.705 84.8789 mo
22.105 84.8789 li
@
184.705 49.5791 mo
22.105 49.5791 li
@
184.705 14.279 mo
22.105 14.279 li
@
1 /0 /CSD get_res sepcs
1 sep
EVXJQX+Helvetica*1 [0 -9 -9 0 0 0 ]msf
212.452 95.4881 mo
(Cache misses)
[-6.498 -5.004 -4.5 -5.004 -5.004 -2.502 -7.49694 -1.99799 -4.5 -4.5 -5.004 0 
]ysh
.3 lw
184.705 120.179 mo
184.705 14.279 li
@
184.705 120.179 mo
183.079 120.179 li
@
184.705 84.8789 mo
183.079 84.8789 li
@
184.705 49.5791 mo
183.079 49.5791 li
@
184.705 14.279 mo
183.079 14.279 li
@
EVXJQX+Helvetica*1 [9 0 0 -9 0 0 ]msf
187.105 122.759 mo
(0.3)sh
187.105 87.4594 mo
(0.35)sh
187.105 52.1593 mo
(0.4)sh
187.105 16.8595 mo
(0.45)sh
.9 lw
0 lc
2 lj
[3.6 3.6 ] 0 dsh
35.6551 43.8899 mo
49.2049 85.8614 li
62.755 96.3338 li
76.3051 96.4634 li
89.8549 96.4985 li
103.405 95.6867 li
116.955 95.4866 li
130.505 95.4689 li
144.055 96.2573 li
157.605 95.7278 li
171.155 95.7866 li
184.705 96.1043 li
@
36.4051 43.8899 mo
36.4051 44.3042 36.0694 44.6399 35.6551 44.6399 cv
35.2408 44.6399 34.905 44.3042 34.905 43.8899 cv
34.905 43.4753 35.2408 43.1399 35.6551 43.1399 cv
36.0694 43.1399 36.4051 43.4753 36.4051 43.8899 cv
f
49.9549 85.8614 mo
49.9549 86.2757 49.6192 86.6114 49.2049 86.6114 cv
48.7906 86.6114 48.4549 86.2757 48.4549 85.8614 cv
48.4549 85.4471 48.7906 85.1114 49.2049 85.1114 cv
49.6192 85.1114 49.9549 85.4471 49.9549 85.8614 cv
f
63.505 96.3338 mo
63.505 96.7481 63.1693 97.0838 62.755 97.0838 cv
62.3407 97.0838 62.005 96.7481 62.005 96.3338 cv
62.005 95.9195 62.3407 95.5838 62.755 95.5838 cv
63.1693 95.5838 63.505 95.9195 63.505 96.3338 cv
f
77.0551 96.4634 mo
77.0551 96.8777 76.7194 97.2134 76.3051 97.2134 cv
75.8908 97.2134 75.5551 96.8777 75.5551 96.4634 cv
75.5551 96.0488 75.8908 95.7134 76.3051 95.7134 cv
76.7194 95.7134 77.0551 96.0488 77.0551 96.4634 cv
f
90.6049 96.4985 mo
90.6049 96.9128 90.2692 97.2485 89.8549 97.2485 cv
89.4406 97.2485 89.1049 96.9128 89.1049 96.4985 cv
89.1049 96.0842 89.4406 95.7485 89.8549 95.7485 cv
90.2692 95.7485 90.6049 96.0842 90.6049 96.4985 cv
f
104.155 95.6867 mo
104.155 96.101 103.819 96.4367 103.405 96.4367 cv
102.991 96.4367 102.655 96.101 102.655 95.6867 cv
102.655 95.2724 102.991 94.9367 103.405 94.9367 cv
103.819 94.9367 104.155 95.2724 104.155 95.6867 cv
f
117.705 95.4866 mo
117.705 95.9009 117.369 96.2366 116.955 96.2366 cv
116.541 96.2366 116.205 95.9009 116.205 95.4866 cv
116.205 95.0723 116.541 94.7366 116.955 94.7366 cv
117.369 94.7366 117.705 95.0723 117.705 95.4866 cv
f
131.255 95.4689 mo
131.255 95.8832 130.919 96.2189 130.505 96.2189 cv
130.091 96.2189 129.755 95.8832 129.755 95.4689 cv
129.755 95.0546 130.091 94.7189 130.505 94.7189 cv
130.919 94.7189 131.255 95.0546 131.255 95.4689 cv
f
144.805 96.2573 mo
144.805 96.6716 144.469 97.0073 144.055 97.0073 cv
143.641 97.0073 143.305 96.6716 143.305 96.2573 cv
143.305 95.843 143.641 95.5073 144.055 95.5073 cv
144.469 95.5073 144.805 95.843 144.805 96.2573 cv
f
158.355 95.7278 mo
158.355 96.1421 158.019 96.4778 157.605 96.4778 cv
157.191 96.4778 156.855 96.1421 156.855 95.7278 cv
156.855 95.3135 157.191 94.9778 157.605 94.9778 cv
158.019 94.9778 158.355 95.3135 158.355 95.7278 cv
f
171.905 95.7866 mo
171.905 96.2009 171.569 96.5366 171.155 96.5366 cv
170.741 96.5366 170.405 96.2009 170.405 95.7866 cv
170.405 95.3723 170.741 95.0366 171.155 95.0366 cv
171.569 95.0366 171.905 95.3723 171.905 95.7866 cv
f
185.455 96.1043 mo
185.455 96.5186 185.119 96.8543 184.705 96.8543 cv
184.291 96.8543 183.955 96.5186 183.955 96.1043 cv
183.955 95.69 184.291 95.3543 184.705 95.3543 cv
185.119 95.3543 185.455 95.69 185.455 96.1043 cv
f
EVXJQX+Helvetica*1 [8.1 0 0 -8.1 0 0 ]msf
158.904 64.2764 mo
(FiF)sh
.6 lw
2 lc
1 lj
[] 0 dsh
149.005 61.9391 mo
158.004 61.9391 li
0 .9617 .904814 0 cmyk
@
150.805 61.829 mo
155.905 61.829 li
@
153.355 64.379 mo
153.355 59.279 li
@
151.705 63.479 mo
155.005 60.179 li
@
151.705 60.179 mo
155.005 63.479 li
@
1 /0 /CSD get_res sepcs
1 sep
EVXJQX+Helvetica*1 [8.1 0 0 -8.1 0 0 ]msf
158.904 72.1562 mo
(DARE)sh
149.005 69.8189 mo
158.004 69.8189 li
.889738 .4795 1 .118898 cmyk
@
151.6 71.684 mo
151.6 68.174 li
155.11 68.174 li
155.11 71.684 li
151.6 71.684 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQX+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7EF32A838F0A26A8CCBCA19DBCB0BC442F9F313D0A8059
DC6DCE2FDC6D47EB8C5AF206894330999A374BBE10DCA1E0BFAAAFEC120379E9
D17DC429975E7DE3320F70506C11E30DD7FEB9FB3C327D177D6A40ED6FB573EC
6BC20B963EE60B31A54FCDC675714BE814E83C90BB6F5E67933D1BE84005F2BB
7C6715737232EDEFA> |-
/b <1C60D8A8C9B7EF32570F064FBD9F7171DC2FD9E56F2BF916779703F17874
AE45B4CBE83CFEA4E3AAAD84AC7C0B682B92B32B09A01CDB64D5800BE3EB43F6
9FAAE43EFA5FB168057FFBC0042F765848B5252C8B3C651C763F083CF576F529
F9EC16AAD6D28AB94E09E59681C57FC62B86B437CEEAB8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQX+Helvetica /Encoding get
dup 57 /nine put
dup 98 /b put
pop
%ADOEndSubsetFont
/EVXJQX+Helvetica*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /three /four /five /six 
/seven /.notdef /nine 7{/.notdef}rp /A /.notdef /C /D 
/E /F 11{/.notdef}rp /R 7{/.notdef}rp /Z 6{/.notdef}rp /a 
/b /c /.notdef /e /.notdef /g /h /i 
2{/.notdef}rp /l /m /.notdef /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
EVXJQX+Helvetica nf
EVXJQX+Helvetica*1 [7.2 0 0 -7.2 0 0 ]msf
65.6542 11.3846 mo
(\(b\) ZipF-0.95 popularity)sh
grestore
%ADOBeginSubsetFont: LAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQW+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34C10FB5B45A8FF20C81B99897830644196B
9F0B77D18F1E2415B32643B9BEFB32917C4D47B1853CE389710AFD496390E0F7
93FB9D427EA0C5D4BB5FDA148EAFEE0C20062EA421DE85BAC5> |-
/parenright <1C60D8A8C9B81F2C34C10FB5F8CB4FB0C01CBD8EB5118892552
E140106D8CE6C92507D29757CD6290403441A1EA7693B4F3C96FFB476C2C573B
7D2E57D40483AABB12672AA2C522BCD98D28F543A66D4C9ADFF> |-
/comma <1C60D8A8C9B8707CA2FD797333ADE4A97DDAD77B582F5CBD0659CEC2
54CCAA47E940636A08F827925CD9A1666856A55DD075D3D80919EBA1DBDA0C08
A49DC0170BF91775E03F0E3F84EA866F24DB4E0E5C25C184B2DD7B> |-
/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CF
D85> |-
/period <1C60D8A8C9B8707CABCFCFB7572BA26C4F342CB44977C4D272DE413
3DB5EF66FB5CBCC13D7> |-
/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A68144D7948D
5D72AF545A4D3C0513F795E10E78346C3F1E06A3A564CAE7C700C7FDC9B087C8
E6354649236E324B711B953A69EB07058EA7506E73C4971A2CD8E7B56CC9E4E9
FEA40EB905B2E375D63C0419CF10FC6C14A0C10D77A69> |-
/one <1C60D8A8C9B7A73DC549024A66BCA9F4353026BD17B6210A66FD5D4176
116945A2F6BAB903CF6DE4F4D3C8542E96270F5E403BDB0773406DE9484D2E0E
A2DBD71107DE79DF70216D3BFEAA2172D8D68DEE8378CE1279ABF171> |-
/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B744F8
D4F54DF812628245A65EF24CEAADD5DE190FFD56148C6E385D5491D13046F140
F2584C73B6FA05C320B018358B9C23ED6C9E586FC4F73E174BDB9E859FD3482F
BC3EE225AB5583DDBB> |-
/four <1C60D8A8C9B7A73DC54C6E607A6FCD37FCCF09F620AB8801B1F0077EA
3F37AB8BF3C03672891DED2FC99FFD9BAEE71DC6FF4E84D49BFD23A40AAA079B
4A5E5C982CD38A9CA8B7D76353673683E32A19F787E51F0426691> |-
/six <1C60D8A8C9B7A73D33BF1B90A18439D8A405D7C2C2CE39F3D6CF44883E
BC665B1BC22C1A295E570F87EE932C7C5AE5AD7FD71556D1DD18D897666F411A
91C0C83F9464A64F6DBA41188C7B70D6EB3CB783FF623CD0556DEA7D75906C65
3696A52A8075AF3CF1D8B71CA3050CC39364621D99C880412847981F1F9B66A2
73E16CCD8B82> |-
/colon <1C60D8A8C9B854D083E206F04B4C3DD188754390434C4FB50EB4672E
AEE8A85520BB1D78CE2A6974387875B94CD46C379E034A7804D304B20C0AC31F
F325F5883A400828> |-
/semicolon <1C60D8A8C9B854D08A49DE8ABE00A3F56845F7C789B1D092D769
97EFACFC31B8EA3193D55F08B870AB735BDAB3E62041101CDD0BD1D1D6BEFEBA
20B83E51E7F8BBC73125BF217AE48D948654CE4651FEDF3EB4DBCACEC48ADEBE
9556E72AA1D2EA8C03523F47A75C326AFDCB83105752D16B9EBFAEAB49BE8CE0
E45C5F7CC0B86B9DE5> |-
/A <1C60D8A8C9B6079F1E495237E195FB086879F6BCD60DCB240CDB4816DCDA
7E7D74835F693D24CCD6C338D68869D7AF0A42511BFE8C5AA9C0FDA69D2F0CC3
FEEA1E37C9F5A5B0401E78C533D84B405A09584E86C2A416FFCA03B71FACE3A1
46D6DFD53C2043C5A98FBBF0B70EB7EE652DFCDC5B6B> |-
/B <1C60D8A8C9B64EDFFAA969AD09D00E8D9653FC12F936212F509A68D3879C
B174FCC7D5A46C18D84538C45378CB892455EEAEAFDB676B276D7423E2B2282C
1E8DBC52F7314247FC642BF2AF48DDC0873647CF3E52C3BD89A1384DA88214EE
894292E3EE20EB76497CE2F4FA57AC9300F8D961F5243657D0971102F8DE7796
B66A77C96804C10504AD4911A22BED2CB5B7952FC51B55E11A40888D7CC5DEC1
AFCB0DF62C09A61FA14F0F32ABD682D4128A82A5E125C897C44B0038DA792A06
1F8A0B6707C64C7274CEF840B8ECA3B28B4BFA7DE31202662E66E97257814127
E55A1D80A17B130D74B30C51F1F092B0AE50B595EE9813A8BB5030081A> |-
/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1A3F05995A9E21B3
849012DBE3E5D9BEEC357D7966D622D0BDA2A87D7DF76C988A3C6DB72B7AC755
68902A6FAD90FC53E6498F9E166085199E8D84083DB27D286921A07C13F283E6
EF1D868FB1C61773EE28620908EC2A5479956F05B0F020BC9E52293B72C896E3
409360C9D09608CE13546B> |-
/D <1C60D8A8C9B6079F1E4884847E183CDFB6808979A7FFAABD96864B66E877
4E70985CF395DC1D2FB7C8BCD1A4C47C710B24983ACFD957FDD5209F65A7CC6D
CA7FAB2B31A94757B920900AF55DAFF07E485481F6EE171E97C1FB25B33FFF25
DE136D66C781030917AD5172E37CA4D4A7F6F4BF8A8F873BF0626800AF87A204
C228E1B6C0435E1F9862D6C5EA44C6C9DEA79E98A81138E9957151BC634A5F49
B7895409D9F2A50BD885B883DF4C> |-
/E <1C60D8A8C9B7D8BE6A6FAF13E57A5D0C2C66821CCEEF24B4E4419847787E
D4C8A98BBE3EBCCE15D1DC333F323E4C7D43FF48D1C1F11091632F6F11174D4D
B924B1BBA6DF69EF4ADB27C45D6BAFF8FAE037CF2DD63F0C99022D146FEDA01C
CFEE96DE599AE8069A8E5F6B8E0F74979F0CC193D875C6765F26CD248D1D0923
817F3CBDA21B14A62B3E828ED4997E1F5E3EED19C373DD0855950863084BA232
08116185FD3DCF> |-
/F <1C60D8A8C9B7EF322BCE349315DC362BCA8CFE4FA18BB639D443336F7111
E2FACF60D2E19F1D435E96E49FD0AF135C8F4D593F674BA833D2635B8F02FCB2
BA0EA4D7637689C705ACF839A843947A142679A187B852855766FB975C8A7F4A
36CBB0767C130BA6A421FFE56B2026B49CFD6C7C20869DFF5A9F134D0B5DB06E
3DBFFEF295> |-
/H <1C60D8A8C9B6079F1E4884809AF27C32C4C4644B748B72386090DF6EB484
CEA0815D83DD608CC775FE83C31EDE164D077FF80BB002D9CA37B26EA5372CD4
FEE69909A5383B74A93FDCDCA1E7577D38E8B9431EDF4F2AED0BB7B71858AF38
E98C9DD8D402A49E8B0C6A4E0841C41D036EDF21A21312F4AE79B0046CA7EE30
82CAAB0BAB2FA41410BA4687> |-
/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7A4C9904C14F3C78DD8A216
6C79F417AFFBE3B86093B7A5C9E5643BE68ED9E3DF5945A598D6DBA4A9E1182E
708E6DE986B0C684C3> |-
/M <1C60D8A8C9B59F859BE0FB9A2A0F7654C6EDCAEDEE9F7FF9D3DB18954F7E
3A836D4F49588823AA3E0BA32781764B19BC402CF82F4E9C5FD476EEEA839B5A
36B407165C4F7ECC6BF68EFFCD7256A6194F4F444DA2C3D477E30DE627473946
676FD66FFE635B9837F63138E4D5B2CF03795A7A7CDACF770C823E2C6B8522> |-
/N <1C60D8A8C9B6079F150BE669E05A86555759DA107B43AB61905A62645A66
3DE63B767402DC6894A5DFEDB84E4BDD1D351CED404CF8174231DE9B67002319
4AC38274F20C1FD6D4B8DAC4F0C8BAF545ED28910A7DBCC99ACA30CFE6FD8C85
EEB2F3221A60E51AFB01492A579996C127A28D4FA98C92096380068298F29040
ACE78F68E55A11F391A0536D2E67FD1C08CF11> |-
/O <1C60D8A8C9B6079FE817D875D2CBFFB503E7661914031DEF82D48C90EF37
02517DD03C8E65B1C85769ED6887A24289D9AB99F5B1BDE82993DEACC2DDC39A
E11851296B5BD32A727B69731E92C7B0DB7ABEFABCF42140BCA1DA9DAA31FC27
FA6483912C36637F02E27FBD8C9B9BE19A703CEB20A6852E97F86CBFE152A658
3E5E69CA94CEFA79FBBF39D4558C7345137E92> |-
/P <1C60D8A8C9B7EF322BA184F1B466A5F9E0510ACA70CC36BD5B876749AD4F
E16EDC508BA233A1AAAC6BA273FF20CF31BB17B9F1092A4BB71099575FEA4868
93AD4E3A7525913D0CD05606C6D78ACC32E189D016D7274A626F44BE17623E20
CF682C39158B1AF28D3051A12E160F64DF843604F0E5D5C417DF0F4700F18E24
35DD56AAB71313C4C2D0A2D81AEB42E579BF0FFF6DE110A340F6AA3B51D151D4
9C34D4B8C12908> |-
/R <1C60D8A8C9B64EDF88216CFE4D3F3D06C439990B9502E48B1E9505CADB19
021894EAC2A555525553B38C5C90F2EB03B1EAA9C843F3EC6B1FDF49C4D2529B
157D754C9D04B9C2E4D5F9153F875E924C7C70B9AE574EA090FB61D41C37FC51
04946381820B77D1612851C3FA0E44B55800E05B6E555083090B55D924DA4751
63F3F85730D71659BCB18AB61841F49D0C395BFB5282E1ECCB55DDA64334BE28
FCDB0DD4220B74399C87C53A8CCBF542DE115866523BA0> |-
/S <1C60D8A8C9B7EF3225294A5FFA2220B3A70A7F29A870B3BAEE7DFF2B94C6
9EBE02BC5C072804E44299D7CD5195B2B62440E331BF680EB99E90C8D38CE947
04C41DF179991352DDB1E57AF890781C25959AA3B7BFDF862D34BECCC3DC0893
FC4126E7ABEE67256549F5A2A6CFFEB66EFE3C866BD2872F8C1B7A2ABDDA6D8F
5E1298D98292AA28BF3CA599A78D591197DCA6EC3B7EEB172439C64EFD164E42
7DBBBA3E18B9157A9BDD8BAC44A0627E4C08D45A6CE6CCFD19F304834876F210
34F9D8D789834201D1B0F60CFC76F29AFE4E29BC48F795> |-
/T <1C60D8A8C9B7D8BE6A419732DB5F024C0509628A5C1F3C8AEF4E7D00CBC1
830EA50E7630715A3443152766048C069B0A4C72A78E94AB6D91F59E64DF9B5E
3A2935C3883FA28660A00DBD8C0553BBB6DF7158E8BBDF61D18A> |-
/U <1C60D8A8C9B6079FE80F64D637F1516D9E8985E20DE1E54990D7E09FF6F7
F806CCE49A90DDF87D67E8B1682A426E98A2CB5AE74C2EB02CDAB73A761D0960
0E57E4986D919E48378EC23E82D2FD189FD8197C33600A4305AFF2F750237481
DBB6D87498C90361FF0E685A3AB0DFA4934DE082373B6FDECB908D9CAFE5371A
B2391636> |-
/V <1C60D8A8C9B6079F150BE669E10D0A89FB4B4A79E924F118832305224132
22E2A9A1CA143D92C4493C7C521082241671767794552BBE0C72C572F506851B
9FFC5646BF7C80A1B249DE720E4EBC4B3BAA42C2C22BCB20793D277D6ECFB9BD
2B6241E55E3D01802787A6> |-
/W <1C60D8A8C9B5D6EF35A61E5C76A324B31A56F3B1CFE26126626F91A2A4BA
CB1AFAA605E0E99F36A77DB54F2E6AD346FFEBAF72E8228330EFB65AAE1194D5
7BEB271028701B01DDDAD430D9B1C5E6D2484E89D44C9AF9F0018889671FF0D3
BE9234ABC3DA9D8C8004B7B21325045A51F5AA0FE20F5CDACE9D24E8264E834A
6CC230947F02E113668F0DEC36085CC5DE7FE47E19E6F994D361F781D02378A2
2F044298> |-
/Z <1C60D8A8C9B7D8BE6A6EDEC9185C38D43FC5634774E14B19DAB06962CC00
ACCAA2D0B32892DF35F84D85EB83C7E791163FE0C3B4A92CA0F85D4F0394AC0C
8EAFC89E2719A8E27611F20F49525CB2A86EC058A5C64F26> |-
/bracketleft <1C60D8A8C9B81F2C36B2094B9ED0E07AA432BA5CE2E16D09DB
E94F578B72BBBB31B68E690F62B9641352789F0E43476B5B076476BF5E> |-
/bracketright <1C60D8A8C9B81F2C36B2094B9ED0E07AB0AE245978D415C9B
35A8D321C0AFE31914517F88ADB7E422E89E84FA69E241776020CB3FEA2> |-
/a <1C60D8A8C9B77FE2B8A4D22D65455054518A9081A02F6171B4D6753717B5
C4BCFBE68C976641B0DA567300A37FD1F7BE0E53E951AF39FE7187820E58AB7E
16899451090BE178FB9A491AFEF8E37FF1C5BDD8D0256C28A39196FBCF43F894
58E78497ED2727A4DE9FADAB50CC878B363C604914D69E8722C78AB472A690DE
86045D5F8F45A8F711931993BC8981E4EC5F1265B4496A3A3138E85E75C304A4
1129F5747FC321FC219DE10F0876B8AE64C30F976EE673CA77E26C723368D2A5
BAFCD92094CBCB0C1DAAAB41901C661D72AF00> |-
/b <1C60D8A8C9B7A73DCF483CC3D064C5D3508B11AE282C299523D8D2A309C1
7B70A170029C0F65CF90DD2BE591B98673683525C4890D287920F2AE4A535CEF
E47857E6491D69196894FC8103DF0EDDDC2D4539CDA22F565FDFB14A75B6689D
6F3BBF9428A6B06753AEFCDF61504E25> |-
/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD7913AEB5D830EAFE
778D8CA9FE61C9F1D7F341AAC32F9CA6E189A5065ADF2D5F773BF6F8A8426463
FFD760FDD2A3FB2FF93A8F0D901F4D79430D0C49AB088DDE46CA955357CE80E9
61F17603291AD5A9BCF763> |-
/d <1C60D8A8C9B7A73DCF5C5F318A67A421CF99702516EE66DD46F0A19A39CD
2B5B742B889350B6027EFEDA3412AF17D7447FE125ED85A03529B863375064C8
442F844291318DB0203469A078E9359BCEB35DF8F23C36890A37B169F260AC05
C273B3B8D223D18F700437592FBE0590BD27CA2E484106160C2D3CA8D60D3B12
6EF2BAA957015ACD17B66CCB4B5794278CE2D6> |-
/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB4598F87C338598C4F359D15
4701105B91D71789866B8BBDD17C51AE2B80B6E9F47C5014A178B7C760E089E4
D6B50937639285A177B2DF2F9CD9B293DCADC3AA4DBEC7EDEC1EDE937DA59145
B9D8A5509D89ABB6F024A66CDE0F535E3C7B64> |-
/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF
77C72C9CD398FF8891FD585C23641F8AE8F6E3020ADECFAC4A393E9FF54C49FA
B5A21E2F4C1179F83C25D9862068548F63557CBD68840FA2E638617AF24BDFC9
D81568C2C6E1A315E20924BB4D9FEEC5799B976A> |-
/g <1C60D8A8C9B7A73DB582976F788935A228E33A2F9BA837718EB44913857B
7DF2B08937FF3593A626EDE6CCF55DB88F671B0ACF0E0BF6EDE603335F61508C
BD99213F6A996E978EE78EC5AD0C1CE4169AAF8ED27DA5119BB90C33C9447085
BA17B797E462B8F0977A661167FBA44D02B1BE8517861232196A81989A462F7F
2FCF08A5E9EBA1DAEB8CCBF341DCDE2423F1236D5142A49C668E169F9EAF2F25
102C1FB112EB576652F83324C585B8F161182918C8C79BC3194BCD6500A04D2D
22D177CFDF96C8E4C849F7239608F6F7453202FB5504E13F8033A5FE2FB7EA35
06AF00C9E3C825E1554EE013BCEAF50C41410225B6E0A012AC7F7FF737456D43
38> |-
/h <1C60D8A8C9B7A73DC549024A8346FE9FE9D7E1CFA5F3A3542DDBE4C5A916
A5024A59CE0EA5149D6EA79ED65490BEFEF9C3C348201E7A69F357C223E56920
09826F3A927DADAF422165EC130205D6C94EDE841416A6709F1685CEE6DEF083
AF9B4CF1705AC60AB37B96773E8FE945D56F9115B299614B0DC15F528F328117
D5F2914E00B04A31> |-
/i <1C60D8A8C9B854D08887A9543335390AEE4DB40199897ABD16F19F24E0DE
858E4CD6E00B26B1829973C0FE01CFA3E329A9D0E2AFEC96CBC670DB940EEA7C
A262004364C378CC527E7F0DFBFD9ADBA6EF6E2301F19CF6860BAC9BB8A50A02
F9217A15FCE88184A4DF0C717E46391573826F599D2DFE27F4F9D82251BA41CC> |-
/j <1C60D8A8C9B854D0F8036B9E41B2E65A80996E2E907110434A0413DE6F0F
A1CED7D44101D2CB80C53365B7D9FCFEF3C557C392B7A8BD9A59049D2FAAF659
0B303228E435BBBFF7AB6415134822B91A84512D7F51F017E320BF297D96E6DA
013E3EF49D9FE337AA59725CBCFD287E12AC43B2BA5588F15DB53EA3E4AD5969
92DAFBC9104E3366F1848F482EBDAB72B852260AA183> |-
/k <1C60D8A8C9B7A73DC549024AEE55A0365CA53932E5214D92E03447BD2708
2733F8BC4B52390213A989FF43E960E136400BFBE15D14D9BA4C2D61B09B4F05
0FBF7DCACD230C4E8767F21A80F637BF5694F2161773ADC9B25B69CFE9C32887
671F39202B1661FF55FACF361DF983E96161F84FF87D28B0AC0FA43709B6CB55
E1E44E07E3A733E7B5F64E7A67A496C0C4D5E21D4A198AB4487F8ABDBAE25A8E
986F6B42BE1053CBBD4E723DD568DBDCFB> |-
/l <1C60D8A8C9B854D08887A941088E15019368529A0C411CDB31B6270BDB21
E6F24215DA6EAB48951C8DAFF38285C17967F3E2D31A5645B4CB7848E783EC24
2D0750B83BCD4D9A2F> |-
/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC36CFC8347F
8B8E738CF4CF4D1809A80A85D86BFA110670A045293350272C5F45FB77C527D1
F2930D0378ADEDC7688C13D3561051EFE72DCA1312160E6190220B69FF2CC393
85ADB7B9FA12F1BEBDBD9D878BFF3BD03685B77D07FB95D12B8B813430FA3185
D7AFA5CE12372E2F5699928B2C0F3AE08B114EAE456B389E7295ED8892CA8D2A
68CBEB3EF1E32DB99917A5DF402A16D8590243BEA627189E26BE24948A498003
EC603B5D13E615> |-
/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C630F986F2AB3ECE6D2
578D5DEC50402B578B4E6CE0632E8947CBBCEB7543031081448F167C88EBA303
B4D2C70599E4B2DBCDA2B9DA37C571B7CFFA556EE2B6CDE54270E5EAA3F80E68
09540E2D41E62BFC6D0AC69B3E0C88DD3AF2AA5C4EA7ABFC511536F434A8C9EA
34BFE186> |-
/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34D2E8E7AB07F99
F61992CA50ADD51C5A93B4B134C15D36CEC8323CBBE9C0D3A63155E9EC74B781
308A5B21C88AA604D5E026CDBDC830C30107F5FE4F678EF57725AF37DE4B> |-
/p <1C60D8A8C9B7A73DB58119388AD28C6EB26113B395FAEB5BB1A92787CC00
CD17996991481186ABE86940E24AB594D9A474B01D5D0752783C6F719E685638
4C42FC6FADE6220E0D5360188934499D6C788FD6225163F3ED610B71BFF6B877
481E0736BEF6EB1112BB14B3A87DE8D1E721238F8F2E426DBC236319E17981A4
C07831306A73D6A3E6AC794689B59CA316CE67D8D4C94BF2EB8F108645A3CF1B
50AB6566123326> |-
/q <1C60D8A8C9B7A73DB5811938DD329AF5702F449C4C3015239F3E0A7732DF
C9E0828332DA51F1D7FDE724DF869BE73384BD1B7136B03BB11DF051325EE7A7
668042B3ABF69CE2C13C47BD4E4C9A86DDCBB9CAE3222F43A69A8FF1ABBDD409
F18B51721F47402665B69C88AC7610BDEE6B922DEBE4B9A5509B50F0E0D3E071
713E6B4ECEE647E52C37F2D1A72629A17EE40EF1260847BDA48E1E19> |-
/r <1C60D8A8C9B81F2C46F2EFDE84D89C8CA27978F2B1BB49B09209CD1A52AA
0883E159C0BCFCEC840E4AF4AFD0AF12CC05AB7610067AFD32B1652EE398EAF1
DF9DCBDAA912A22D36A52AAB2ABE36110186ED1FE34787D24198929398156D9F
0AC35E6BD99313253DDFFC34D01333EFCC> |-
/s <1C60D8A8C9B7361F0DD2D2259B4AE3E4ACCB44FB8872BFAC621D64E450F5
14624BD4700B917EA1CE8D60019D3B1C42E0F7377CE112D5333D1612736D0EDB
07B34DD4BA1403D44985C1A0543D99F912C9BC9DC7E96430EE2781E418322823
5F9935573E82940F1E761BEFBA74A42BEDBB36268156C77D28FAFCF48800821E
AC277DD0C93425B27A2041FB9E67F885F359D5FF9B96714513F4D2945088A893
D87F8B4D3A6600FAAA0EA12384184218B424A8492A8E97821E10762E83A8B2B1
7B9DE8ED2A20C9152C561D7EAED2> |-
/t <1C60D8A8C9B854D082F829CADA2402D0C363E188624B3DC91E66507A8AF7
69E833E0645176BA592C3DD44ECFC4C7D84DE06A044A230214D945DF321A4D72
94F214FA4A69DDBFFDC37CE6C0694F8A402CC82FE94C2B9274D4DCEAB0696C3D
253D2964904B34E1D9065A46BEE535DCD936F67C56C176C8E7F77F2F60DE69B8
6A560016E73AE51935CC218444D0EB76BA0FFF40D1297093F9> |-
/u <1C60D8A8C9B7A73DB6F2A4B59B2312EBBBE2417FA44F369C1F0ED6D6A369
96AE53A137DB00AA7567A9CEC49CE2737379BD17250255FC7E3093655F665038
8D1064F7AC48308F1DF9CB661A2773CC10559E7C61A5DCDB640FF06049B6ADB9
F9495291BF4F69DA004975E0967945B04D0D1E0AADFA85B338744A9D49B5C34C
0392DD8C9A2D5D0FBF7A81667B636E9E308B1316F61183357C46ADD0B9B8732D> |-
/v <1C60D8A8C9B7A73D3387F33511357F5C470E09351F77CC276AE129494BAE
19BAE0CA39F2A5A776A3E65DC754DA89AD1C5CC64A59E7F0B5EC70F5692EBE0E
0FB9D1DB1A31CC7BBB43C8920E79F728121E780030958DB645DD328A17F8DFF9
82D1DC59D2D6959A7E783D9C1D0AA54F17D353136E> |-
/w <1C60D8A8C9B6079FE827C15FB749C5E2D59AF07BCDCB23600A9E54DC7F64
C7E827C38E4CA3EDC141AC5EDC06F362661B84CB18900C724B81D9620EF76D18
0ED63FA9D5A5F924854335916B03AA4F91AFA0C7C0C6CB02E2839A0511DD63E5
74762EF80F517D5F038A6BF8C6AA8B2D183A3AB23FCFA16E562D70F6716B39E9
98C527890272681E7128A4D20258D13EE2F2B8FA152F655FEBAEDC8C60259050
DBA81825B0CDCAC66195D9F1022749> |-
/x <1C60D8A8C9B7A73DC54C6E6F1E1B2347F151B660B24776F2E8D8FE0D08BE
B090A51431058F7336381763833F21F79669FB1758E4A45605BCF730FFBF7CFA
2C722F5A25EBB940FDF2BA7B9B5ACDDB0A61662A5F4610A72EC6495E2E42CD0D
A0ABD967E5F1DD106B1FD129929FE9D5A5F6068F5AC837D5D03F8F6EF1AB141A
71105EC102F68544C432C4D0444E5DAB600D38EB3AE2F6AF3A06CD69455C91A5
6BBAB338293B6D0E> |-
/y <1C60D8A8C9B7A73DB5828C8EB6692FACE27F93F009F946C390116926A043
617DCF82B76B3921AD1CAB060694C724481443C88DCE9CCDBD4C5105E503E45C
67DC21FA0E146B65B0F0EA2429259DEF9F5CD456C1B4E1A4CBC49AFDCA5F37B1
AD742660BF135BF9BE1A2789C070C0A4FB4767FBA0411908E30D692396427C73
1EB9FE493ECBA19FDDC5F0C50E54D346D5DA656C79E40808BBE549> |-
/z <1C60D8A8C9B77FE2B2232EA49D913A831C97B47563501A79DCA41E417E74
E20F3E3020C6B422D96B1171C7F6A868EEF4F80EC234E8C81C6D5907680692B3
D53F97E8CC04C61D64F59B524A639C52> |-
/fi <1C60D8A8C9B7EF32570AFF8231DCF4ABC5DEFD5B6D550686CFFCC91C267
F1252BA4F4DAA274A3A6688691900FFEF7A839B52553AB9F891F187F51351F44
C21EAFE0C45D0394141E4F8BAFD06377AA51E37B7097AD1CD66EBD9853CBF817
2875228C37FE0953ECA0AB863FE32A47EEF2B7DF444F4BC2717645C8B4ECA894
32D1027B7AF6DE75966098D9C73E00129B4A704F85D81AF7D80671478639E183
CA75D9BD8666D9EFCDBB6B3C3084DAC79574807631815CB8BE737035BB77F054
C44C971E29217D4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQW+NimbusRomNo9L-Regu /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 58 /colon put
dup 59 /semicolon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 174 /fi put
pop
%ADOEndSubsetFont
/EVXJQW+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /.notdef /four /five /six 3{/.notdef}rp 
/colon /semicolon 5{/.notdef}rp /A /B /C /D /E 
/F /.notdef /H /I 3{/.notdef}rp /M /N /O 
/P /.notdef /R /S /T /U /V /W 
2{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /j 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
51{/.notdef}rp /fi 81{/.notdef}rp]
EVXJQW+NimbusRomNo9L-Regu nf
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-266.727 154.025 mo
(Fig.)sh
-247.938 154.025 mo
(2:Cachedamagevs.cachemissunderIRMforBvaryingfrom50to600\256leswith)
[4.98151 5.78853 6.6454 4.42357 4.42357 4.98151 7.4324 4.98149 4.42357 7.75122 4.42358 4.98149 
7.43239 4.98151 3.87569 5.49956 4.42358 4.42357 4.42357 4.98151 7.4424 7.74123 2.76971 3.87567 
6.8945 4.98151 4.98151 4.98149 4.42358 6.32643 3.3176 6.6454 11.866 3.3176 4.98151 6.32643 
9.66423 4.73236 4.41357 3.31763 4.98151 2.76971 4.98151 8.00031 3.3176 3.3176 4.98151 10.76 
4.98151 7.99033 2.76971 7.99033 4.98151 4.98151 8.00031 5.53943 2.76971 4.42358 6.88449 7.1933 
2.76971 2.76971 0 ]xsh
%ADOBeginSubsetFont: UAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /UAAAAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /element put
dup 106 /bar put
def
/UniqueID 5096651 def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/element <1C60D8A8C9B64FAD2EF2B8851D1968E5D029958E40ACD5147C4074
1E22A1237398886102D9E824068CF8CCB984BE3805C3EE450A9950F9ADBD244A
087E2AE7BA5402D250A2547E9B9000BF371B31F9A1575410E09C98112EBDE784
B50FA20B3F67AF0A9C97E9C2EA9A7FD1BDD7C5C4> |-
/bar <1C60D8A8C9B857441457E710B30AAAC225216DDD3F0F67D37AB5F17441
25AC44330DB61243F0DBA44459146B24E9B3E94009> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJQZ+CMSY10 /UAAAAA+CMSY10 findfont ct_VMDictPut
/EVXJQZ+CMSY10*1 
[50{/.notdef}rp /element 55{/.notdef}rp /bar 149{/.notdef}rp]
EVXJQZ+CMSY10 nf
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
95.474 154.025 mo
(j)sh
%ADOBeginSubsetFont: VAAAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /VAAAAA+CMMI10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 21 /lambda put
dup 77 /M put
dup 88 /X put
dup 109 /m put
dup 112 /p put
def
/UniqueID 5087385 def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 466 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/alpha <1C60D8A8C9B672D45BFC23B1BF800E1ACB05E50B7910064DAAF33F1C
226D8694134CDF4422A74CFB0592F5B407157F4CE5A72BC40A799BF41A6B6127
F948FBCA3A02695044FAC83587055BCAB446C188F87D7462818B08346941C748
D0E7B89356AC4EB22916C99341BBD9BEA8B19DAD1FB3C37A90E7A06F628D038F
5E0B79DD787FBCDAD342C4FEA11A5E58675C86F194DA558E866305D8F9BEC493
31CD33BBD3B022378B81A0B00267BC> |-
/lambda <1C60D8A8C9B7F44A4516FD5182673257BB2AA93B3AFC1C0AB39AFEB
7D4DC9C128E26263CC14C360DCBB92B58BA5CAD00278A7EB45D3C926592F2863
FBBEE111C5ACD19DCA23E0A40DA96F8F4ABEC0CDDEE49A9B2B25B3CF20133C8C
2DDC3E657FAC1B793DD2399D11A20378D968A313EA56468657298A8760C> |-
/M <1C60D8A8C9B5CCDCD0CBFA2473A0A828BFA6BF1AFBA9AFFCC704941734B8
B0734BC5E573D252A6EDBAC24F82D713975D844ACD58756DBABB93A6DEB3AD66
872CC1EDA8158A7EE99A15444940B09C7C0EF55DF6C8749F118EF244154E0860
FE09620DB3FB7D2AC5562BE154B19E6297B4832BBC1775AA6DE546611C24689F
92A82B1EC2B2EBF7A4920EE5C787170A9DB70F9273F987022F864F1A763D0B96
C95578EA39E26C555BB65113B8C78A11ED854F827540382664DE294A81E78DF7
D8016DBA0E416A40FEF2444117F2FF62B0ADFA98B6CC29157187BC1AAF9C93F6
F9F447E192BB9A48F0C6CDCA8D29B1138B8BE61DC8A20F88CB704CE725B12758
41B30F9EAA7C6D36305E07A155973A5E478B7B6D5BA671FC5CDD1CE50524EBC5
D22F45C3F3AFF3C86F1F01DE> |-
/X <1C60D8A8C9B6B1AB47D89685A77C17777FB04BF82925C538106FAB5E7D82
80BA4A81F083C6C6DAB6A15D09F823DF81F301FBB5F67684A507CD4A20BF608F
346AD1BCED349D402E2FE4CA529504048A1540283BC408E024093DCA6C54291E
F7B03421ECF4CD5EE11FD4EDE884399D3756C7E6E197FFC1440EE0191DF7EFD0
2C085C6DAB0703B35B31F51F607D266CF7F2616A8F2616D76C1ED47B7A1068D3
26E811D4DA29CD845B85BE745A0E5BA730EDAFF975CB204530D491F67CCA4390
F37F5AFB5F7C193984B7534B0573DCB93DCE937D21B33C628B3109D2E0CC70AF
E45C5706A7F9769AF5933A6B40B2BA8BCB55D8D3E7822CDFCF3A25FF5BAD0AF3
F75D481C983B549CED59F9E17819C8FC57FAC01152399825B2CA376CF0C2B0CE
6D3D82EA4567AF5ED91F7EE225DFB5A02D4E04A716FF0F37B8B656E94BEBA138
83749D70E0ABC3C69E2399599A4324F6E17FE1CBEC68382ACE8F4F636752FD13
CF420B7F7BF0B27EDAFADAD738BC240575653292DCE4C6DF39635F5DFCD97EDC
ED865D847FD2DF0A5A1D0EF4BFDB> |-
/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0F60CD6AC0753DE
1078F4F9FDB6B815479F3F8E4C08C2277611060995694159FCC2D78EC50D6606
F47BAC8A1398DC80C5E684AC883370A5C0C368E90D6EC6CE9F28F4FF49EB4CD9
003CC7F16FD0A458554531F31DF07949099D9F289F893C6C0EA6573FB2150C2F
087255EF81A7EEB3F17E2AAA817353178C1356798885D696ECA769BAF77B7767
3C710522BBDF0D2C2EE2D19E2E6FF3F81BFD0244B25EB4D4D7D82E1EC8E49E10
740271118963D0C05218ACE6C68295346EB12E8E166BADE2CEAD64A82CCCD612
7BF1A62C2509EE150842123EC00626CE2680D411C5A10661C74C5C04837F5760
E283E665B33789D5E578DC0371410F32760EB96A60355BA38A71507B81967F12
8B5C> |-
/p <1C60D8A8C9B7A4C86FCDA79C1DC84C4AFA74132B55E671E0148FC9185DE5
42CF0A71585BAD4258B26C1F3B3A0435613D394A097F890103EEE94F0198A0CD
F1493BEE037CA809F768D3CA31B06FDF414ADF7FA234CF7637A281CCA986F8CE
AB5B42A2FC867A6251E761A919F19974C7EB88903F96C99515F3506473744714
FD2563692FABDC1C76E0234A8313AC9D180FF055E26FDBC469D8CAAED24E9B74
57F0E7EFCCEA81732EB9B703DDA8CAAC602C310EE80FF3918D06614DBDA1B0D3
2DF8DBC97BD211B2B852C2DDD6957319A82C39CB8D70784BE77AAF8132C91742
6C6C53D6268FA19B01C107792DA8B070> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRA+CMMI10 /VAAAAA+CMMI10 findfont ct_VMDictPut
/EVXJRA+CMMI10*1 
[11{/.notdef}rp /alpha 9{/.notdef}rp /lambda 55{/.notdef}rp /M 10{/.notdef}rp /X 
20{/.notdef}rp /m 2{/.notdef}rp /p 143{/.notdef}rp]
EVXJRA+CMMI10 nf
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
98.2417 154.025 mo
(M)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
108.993 154.025 mo
(j)sh
%ADOBeginSubsetFont: WAAAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /WAAAAA+CMR10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
dup 61 /equal put
def
/UniqueID 5000793 def
/FontBBox {-40 -250 1009 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/Delta <1C60D8A8C9B6B41CC7C9465EB7A0CF5F739B85641DBFE29DF5D950F7
723EE93D2208632947D058C55D35FED7FF409493CBC504BCCF0879FC5F12C188
E0F913112DAACF871CECDD24F237C941D4021F42564F689B6F5A> |-
/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164
F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02
A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598
A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-
/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A
0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF397
16A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB9
9C4AAA689F9E967FCE15709E3204C4D> |-
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
25DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668
D97ECF27E58978E82B8932F2635747B0D240AA> |-
/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E59
93F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5
497F9A03CF7F30718A4F8E51FE4C555962B834> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRB+CMR10 /WAAAAA+CMR10 findfont ct_VMDictPut
/EVXJRB+CMR10*1 
[/.notdef /Delta 38{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
11{/.notdef}rp /equal 194{/.notdef}rp]
EVXJRB+CMR10 nf
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
114.527 154.025 mo
(=1000)
[10.519 4.98151 4.98148 4.98151 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
147.98 154.025 mo
(\256les.)sh
170.088 154.025 mo
(Damage)sh
206.294 154.025 mo
(curv)sh
223.848 154.025 mo
(e)sh
-266.727 165.98 mo
(isshowninboldlinesasperthelegends;thecachemisses\(fraction\)curveisshownasablackdottedline.)
[2.76971 7.36273 3.87567 4.98151 4.73248 7.1933 8.46854 2.76971 8.46854 4.98149 4.98151 2.76971 
8.46854 2.76971 2.76971 4.98149 4.42358 7.3627 4.42358 7.36272 4.98149 4.42358 6.80464 2.76971 
4.98149 7.91061 2.76971 4.27417 4.98149 4.42358 4.98149 4.98149 3.87569 6.25674 2.76971 4.98151 
7.9106 4.42358 4.42357 4.42357 4.98151 7.91061 7.75121 2.76971 3.8757 3.87567 4.42358 7.3627 
3.3176 3.31763 3.3176 4.42358 4.42355 2.76971 2.76971 4.98151 4.98151 6.80463 4.42358 4.98151 
3.3176 4.83209 7.91061 2.76971 7.3627 3.8757 4.98151 4.73248 7.19327 8.46854 4.42358 7.36273 
7.91058 4.98151 2.76971 4.42358 4.42358 8.46851 4.98151 4.98151 2.76971 2.76971 4.42358 8.46854 
2.76971 2.76971 4.98148 4.42358 0 ]xsh
-266.727 200.052 mo
(giventheoptimalretentiondurations.Notethattheproblem)
[4.98151 2.5206 4.83209 4.42358 7.79111 2.76971 4.98149 7.23309 4.98149 4.98151 2.76971 2.76971 
7.75121 4.42357 5.57935 3.3176 4.42358 2.76971 4.42355 4.98151 2.76971 2.76971 4.98151 7.79102 
4.98149 4.98151 3.31761 4.42357 2.76971 2.76971 4.98149 4.98151 3.87567 5.31027 7.1933 4.98149 
2.76971 7.2332 2.76971 4.98149 4.42357 5.57922 2.76971 4.98151 7.23318 4.98151 3.3176 4.98151 
4.98151 2.76968 4.42358 0 ]xsh
-266.727 212.007 mo
(ofjointlyoptimizingoverallpossibleretentiontimesand)
[4.98151 7.39246 2.76971 4.98151 2.76971 4.98151 2.76971 2.7697 9.05637 4.98151 4.98149 2.76971 
2.76971 7.75122 2.76971 4.42357 2.76971 4.98149 9.05637 4.83209 4.83199 4.42357 7.39249 4.42355 
2.76971 6.85458 4.98151 4.98149 3.87569 3.87569 2.76971 4.98149 2.76971 8.49844 3.31761 4.42357 
2.76971 4.42358 4.98149 2.76971 2.76971 4.98151 9.05637 2.76971 2.76971 7.75121 4.42358 7.95053 
4.42358 4.98151 0 ]xsh
-266.727 223.963 mo
(evictiondecisionsremainsanopenproblem.)
[4.17447 4.98151 2.7697 4.42357 2.76971 2.76971 4.98151 8.46864 4.98149 4.42358 4.42357 2.76971 
3.87569 2.76971 4.98149 4.98151 7.36272 3.31761 4.42357 7.75122 4.42358 2.76971 4.98149 7.36272 
4.42358 8.46852 4.98151 4.98149 4.42358 8.46854 4.98149 3.31761 4.98149 4.98151 2.76971 4.42357 
7.75122 0 ]xsh
-256.764 235.757 mo
(Inthissection,weformulateanoptimizationproblem)
[3.3176 9.953 2.76971 4.98149 2.76971 8.84727 3.87569 4.42357 4.42358 2.76971 2.76971 4.98151 
4.98149 7.47224 7.1933 9.39507 3.31761 4.98149 3.31761 7.75121 4.98151 2.76971 4.42357 2.76971 
9.39517 4.42358 9.963 4.98149 4.98151 2.76971 2.76971 7.75122 2.76971 4.42357 4.42357 2.76971 
2.76971 4.98151 9.953 4.98151 3.3176 4.98151 4.98151 2.76971 4.42358 0 ]xsh
-266.727 247.712 mo
(called)sh
-239.129 247.712 mo
(DARE-)
[6.79477 7.19328 6.6454 6.08731 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-209.091 247.712 mo
(\001)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-196.993 247.712 mo
(Retention)sh
-154.441 247.712 mo
(Formulation\(seeSectionIV-B\))
[5.39001 4.98151 3.3176 7.75122 4.98151 2.7697 4.42357 2.76971 2.76971 4.98151 8.77734 3.31761 
3.87569 4.42357 8.22943 5.53943 4.42357 4.42358 2.76971 2.76971 4.98151 8.77744 3.3176 6.19696 
3.3176 6.64542 0 ]xsh
-266.727 259.668 mo
(tominimizecachedamagesubjecttoaconstraintonthe)
[2.76971 9.49478 7.75122 2.76971 4.98149 2.76971 7.75121 2.76971 4.42358 8.94675 4.42358 4.42357 
4.42357 4.98151 8.93677 4.98149 4.42357 7.75122 4.42358 4.98149 8.93684 3.87569 4.98151 4.98149 
2.76971 4.42358 4.42357 7.29289 2.76971 9.49478 8.93675 4.42357 4.98151 4.98151 3.87567 2.76971 
3.31761 4.42357 2.76971 4.98151 7.29289 4.98151 9.4948 2.76971 4.98151 0 ]xsh
-266.727 271.623 mo
(netw)sh
-247.459 271.623 mo
(ork)sh
-230.302 271.623 mo
(delay)sh
-204.837 271.623 mo
(to\256ndoptimalretentiontimes.Ourformu-)
[2.76971 8.85715 5.53943 4.98151 8.86707 4.98149 4.98149 2.76971 2.76971 7.75122 4.42358 6.64536 
3.31761 4.42357 2.76971 4.42357 4.98151 2.76971 2.76971 4.98149 8.86707 2.76971 2.76971 7.75122 
4.42357 3.87569 6.3663 7.19328 4.98149 7.20317 3.31761 4.98148 3.31763 7.75122 4.98151 0 
]xsh
-266.727 283.578 mo
(lation)sh
-239.119 283.578 mo
(pro)sh
-225.988 283.578 mo
(vides)sh
-200.045 283.578 mo
(anapproximatesolutionduetothelarge)
[4.42358 9.8933 4.42357 4.98151 4.98151 3.3176 4.98151 4.98149 2.76971 7.75121 4.42358 2.76971 
9.33527 3.87569 4.98149 2.76971 4.98151 2.76971 2.76971 4.98149 9.9032 4.98151 4.98149 9.33537 
2.76971 9.8933 2.76971 4.98151 9.3353 2.76968 4.42358 3.13828 4.98151 0 ]xsh
-266.727 295.533 mo
(cache)sh
-241.65 295.533 mo
(assumption,)sh
-191.377 295.533 mo
(however,ournumericalstudiesinSection)
[4.98151 4.73248 7.1933 4.17447 4.83199 4.42357 2.9191 4.89185 4.98149 4.98149 5.7187 4.98151 
4.98151 7.75121 4.42357 3.31761 2.76971 4.42357 4.42358 5.17081 3.87567 2.76971 4.98151 4.98151 
2.7697 4.42358 6.26678 2.7697 7.3826 5.53943 4.42357 4.42358 2.76971 2.76971 4.98148 0 
]xsh
-266.727 307.488 mo
(VIshowthattheobjectivefunctionquicklyconvergesto)
[7.1933 7.88068 3.87569 4.98149 4.73239 11.7464 2.7697 4.98151 4.42358 7.33279 2.76971 4.98149 
8.98666 4.98151 4.98149 2.76971 4.42358 4.42357 2.76971 2.52061 4.83208 8.98656 3.3176 4.98151 
4.98151 4.42357 2.76971 2.76971 4.98149 9.53459 4.98149 4.98149 2.76971 4.42358 4.98149 2.76971 
9.54457 4.42358 4.98149 4.58299 4.83211 4.42357 3.1382 4.98148 4.42358 8.43878 2.76971 0 
]xsh
-266.727 319.443 mo
(asteadystatewithincreasingcachesize.Havingalarge)
[8.95676 3.87569 2.7697 4.42358 4.42358 4.98149 9.51469 3.87567 2.76971 4.42358 2.7597 8.95676 
7.1933 2.7697 2.76971 9.51468 2.76971 4.98149 4.42358 3.3176 4.42358 4.42358 3.87567 2.76971 
4.98151 9.51457 4.42357 4.42358 4.42357 4.98151 8.95676 3.87569 2.7697 4.42358 4.42357 7.01404 
7.19328 4.22427 4.98151 2.76971 4.98149 9.51468 8.95679 2.76968 4.42358 3.13828 4.98151 0 
]xsh
-266.727 331.399 mo
(cache)sh
-238.91 331.399 mo
(implies)sh
-204.428 331.399 mo
(that)sh
-184.333 331.399 mo
(there)sh
-159.276 331.399 mo
(are)sh
-141.97 331.399 mo
(noevictionsandthereisa)
[4.98149 10.1224 4.17447 4.98151 2.76971 4.42357 2.76971 2.7697 4.98151 4.98149 9.01659 4.42357 
4.98151 10.1324 2.7697 4.98151 4.42357 3.31761 9.56448 2.76971 9.0166 0 ]xsh
-266.727 343.354 mo
(cache)sh
-240.793 343.354 mo
(miss)sh
-219.263 343.354 mo
(ontherequested\256leonlyifithasexpiredfrom)
[4.98149 8.22954 2.76971 4.98149 7.68141 3.31761 4.42357 4.98149 4.98151 4.42358 3.87567 2.76971 
4.42358 8.23943 5.53941 2.76971 7.68152 4.98151 4.98149 2.76971 8.23933 2.76971 6.56554 2.76971 
6.02765 4.98149 4.42358 7.13361 4.27406 4.98151 4.98149 2.76971 3.31761 4.42357 8.23944 3.3176 
3.3176 4.98151 0 ]xsh
-266.727 355.309 mo
(the)sh
-251.254 355.309 mo
(cache;)sh
-222.511 355.309 mo
(this)sh
-204.817 355.309 mo
(assumption)sh
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
-159.427 351.694 mo
(6)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-152.143 355.309 mo
(isknowntodecouple\256lesthus)
[2.76971 7.17342 4.98149 4.98151 4.7325 7.19328 8.27922 2.76971 8.27924 4.98151 4.42357 4.42357 
4.98151 4.98151 4.98151 2.76971 7.72128 5.53943 2.76971 4.42358 7.18341 2.7597 4.98151 4.99149 
0 ]xsh
-266.727 367.264 mo
(facilitatingatractablemathematicalanalysis[14],[20].We)
[3.21802 4.42355 4.42358 2.76971 2.76971 2.76971 2.7697 4.42357 2.76971 2.76971 4.98151 8.22943 
7.67151 2.76971 3.3176 4.42358 4.42357 2.76971 4.42357 4.98151 2.76971 7.67151 7.75121 4.42357 
2.76971 4.98151 4.42358 7.75121 4.42357 2.76971 2.76971 4.42357 4.42358 6.01764 4.42357 4.98151 
4.42357 2.76971 4.98149 3.87569 2.76971 7.13362 3.3176 4.98151 4.98151 3.3176 5.73868 3.3176 
4.98151 4.98149 3.31761 5.73865 8.60806 0 ]xsh
-266.727 379.219 mo
(conclude)sh
-226.576 379.219 mo
(this)sh
-207.995 379.219 mo
(section)sh
-175.585 379.219 mo
(byshowingdamage-delaytrade-offs)
[4.98149 9.16597 3.87569 4.98149 4.73239 7.1933 2.76971 4.98149 9.16597 4.98151 4.42357 7.75121 
4.42357 4.98151 4.42357 3.31761 4.98151 4.42357 2.76971 4.42357 9.16597 2.76971 3.3176 4.42357 
4.98151 4.42357 3.31763 4.98151 3.06848 3.3176 0 ]xsh
-266.727 391.174 mo
(for)sh
-251.623 391.174 mo
(dif)sh
-240.803 391.174 mo
(ferent)sh
-214.083 391.174 mo
(damage)sh
-179.611 391.174 mo
(functions.)sh
%ADOBeginSubsetFont: XAAAAA+NimbusRomNo9L-ReguItal Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XAAAAA+NimbusRomNo9L-ReguItal def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle -15.5 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 41 /parenright put
dup 46 /period put
dup 49 /one put
dup 58 /colon put
dup 65 /A put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 174 /fi put
def
/FontBBox {-169 -270 1010 924} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 432 452 653 673] def
/BlueScale 0.039625 def
/StdHW [23] def
/StdVW [78] def
/StemSnapH [19 23 32 38 43 47 53 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
21 dict dup begin
/parenright <1C60D8A8C9B81F2C34F87521BE74C9127DE52A12A73779FE12A
380E010314920EF3F8B7FB990F8C631BE1C31577245E613DD53DC3EF08A32613
33EC787A61C9CA305652F8762D7AEF54F49D17E7F9F> |-
/period <1C60D8A8C9B8707CABCFCF9DA0E740BAF14381B46E7EF43F488F487
2E9294321A54B0280> |-
/one <1C60D8A8C9B7A73DC549024B5C30F8D3AC760F18998A1E08F2975F4EDC
EB0D1D1C3CF71372090E6B7A8853DBD4B4B62EB203D8D8670260D25B2759E096
4CED4702F0B641F4B93B5BCF6B8DE422C28C22DC7F38462936FCB300A7EE200E
5341BEAFF68DD47F83D8F79DE689158FD662C643260353> |-
/colon <1C60D8A8C9B81F2C4DFA987AFC5749EAC74A67B5F4BCEC9BD8E4F1BE
01B602C1D1BEA1E5CB039A79B7C90BBEB8624BB4E888E7935297D3BC86E5F70D
8C78407274E26A3BD8FFD585362F182664376DA67E0477A0897C80> |-
/A <1C60D8A8C9B7D8BE6A40C975BB4D1E1B897A90FEA982578C089DE899F707
9788190140A356A0AADFC8C0C8904A0BC758EC37A7E995F76569FB539EEA6DFF
97CE11A88E51E66E7AF27F904EBD39FF18F5A4BCB132652B8178DFC581D1C65E
B9579C4D700DF0921A1BB71A4ED2DDB126F75DA9DBF8C4> |-
/S <1C60D8A8C9B7A73DB792F0509DC2608B7CBB653BD3BA9507A28F8DC443B3
90601E46B47B2B6E49AE61E639F2196E81AD0184EA647BDF40A25F6E04CB235B
0CC7CD1C2C4D060E3FA61A2B76A115F793F0948249D84F5A548074EA7A8435A0
73570FC530B1B0D91E5DD2C3E5CAF452BB129AB2BF3F33E9FBD817BDD83FD5CE
9DCD34041A363E0FCC6EB83E6AAF20B69AD7E4445067C01CF6693721C9BA93D9
BA265A615F99D0EE20D9F5652D4B7923FFA1EFB41F7BC13244E162D705A41E35
57> |-
/T <1C60D8A8C9B7EF32570F064EE8BC84CAA6794699AD8873B31A4F24E7FF5A
3AFAAEDD8012A7520E0FA64E194E00C0C8BC4F8369052DE4DA371B77D7D56616
D77FE1273CB4214964204D9D10CE8E71DCABC9E0BA4D5C0ABBA8027EF00E26C4
144C2CA1D993895AC3> |-
/a <1C60D8A8C9B7A73DCEA80DF8A035E6052CC982C976E52805ECA17E96ED85
358DAEDA8137772CDA5D0D5F7C4275C1A5E4026261E2C3B38D308543B0E1AE71
3B517F7E54F0F5CF956209F612780761A2B71144A88A7046841A56B11D93FFB7
995D2EA00522953A8040D863497047DA14446BB2067ECCA8ED4D837CAE01ACE7
B46971340ABC15D79E32B004512A5DC5059BB56C2E7C594AD5A68E2BF959502E
9DADE6C7214B6F03755BE1A81CA309BC3F4F893EA7111D43D400FD21B368B73A
A2E3205E67> |-
/c <1C60D8A8C9B77FE2B98067ECA4D192682BFDB9E0521383E33AEF2AB13B6C
DDCB44DC5120998F37998811E16806D92A99440332371A54614042CCE9C92086
58B4DA3084C9D34213BEAABE4A6FF1F8DDFDED091410C941873DF78E52217871
1690A9E31F99D607B4F2E450328ADA> |-
/d <1C60D8A8C9B7A73DCEAFB0502243BD04706825067C78310881CCC16C5F6F
F8AAEC74F317B88CC0E4F1055489FB852C14136A6E1F60B5B0042E4758635412
066A24BD500B790764F39B57DB21FA6563BA932B89447DF074787049FE3A50BB
104A3B691543F02DCED75C58972F1687D2574445464A58B981530FA8EB1E9C62
58FCE2491852C79FF9BF09AA8339BC431996263A97DBE2207CD8E1022C6FAAC5
776FC9675ECCB714EEA043A95F7AFBAEC875872AC8A77FB76A5F76AFE9EC3753
490950DCB6FFAFA27B> |-
/e <1C60D8A8C9B77FE2B997F32F2DB91A4F584393A1EA30FB14EBA73D87B1A4
D022DF8523FDF49BC255F6353D4EC7286276F638720F53775551090EF627DE32
99167E228A46C7C9F7600C313C9DB3D95EFD29DAE4921482D8BDA0C17CF165AE
54F2E4EAE86D7BC98FAA78761A40F55BE22953DF97061B> |-
/f <1C60D8A8C9B854D0F80E05032B288E000DCD85BA04E3639668EA8CF33314
967F215DCF3373594481AA451E5349F27E4E02B7A9E0C010FA198738E851F805
AD4075CE4AA02ACAF4D254E4DDB04C264E0C215EB3CF2E44607705BCCF314DA0
049C748EAC09831A6CEFB594251F06374C6655B3BAEBEC9D05EAD5F04F3C23B6
AEAB01831E482C6786E731A0746FA5EDD3EFF368BCED6F94D69606B73365F8A0
6E71> |-
/l <1C60D8A8C9B854D0838A1108B53790159DD3B4EA9A1AD8636B0628F820FD
D5F77683DE15235D1FD339E9EA97EC21485FAAD28EC53B019AD5B813C84FDEA8
E91A6EF405E10B821029B8F161246B85F33E1B773CCB78341CFCF787EB8263F3
78D06DE7AFE2110DF0B39030FD> |-
/m <1C60D8A8C9B6079F178B521F79AB859140E406AE0C2925608732DA7C451C
154E79810E39F6B5B32562F5C747F43EAB8EE9FB3FB6AA02E6DDB5B640F73FD8
7203F2815F23DF37ED7B3C3D8C139F5494C5B589021482C0B49E3A45AD6BB8E3
CAD535C1815C616845611D52745E9E3A7F20A4EBDE118920053905EBB7FD273F
CEE0F7C3154EDD9B7922A8B0AA076EDCD5457FC5F23E58EA02963DE27C4A3BF9
950FE2FA1EA72709B44D0C0F0BF575E839D8A98FDCD76D9969A59CC799256EFB
31C8671E64FA561CA954E7B20BA848D7C14B1A853B062E6E8D2D0191BA5377EA
F94B1122C09634F15B> |-
/o <1C60D8A8C9B7A73DCEB4B8D8F0C1B91E5FCECE20C383B5A3A04C5E300C44
73F1758AD6EBD68AF3342250ECA77E8264601968E8BB73C8BCE96E285325E4E5
F9A5427A9867F5E01A213534416D8FA7BD45D53E120FBAFC16324C55CE0B8ECC
A30F4FDCBBCADFF556EA> |-
/r <1C60D8A8C9B7361F7E31A316A5441472A3D5F0BBE187EC79A442CBC96388
45592AF85C4E4C7D40F5739783C28CBA686CB4EDBADD3DF864045E1617F9EF64
EF28B75F06BB7DB3735A4D1B8449A08901B30CEFEBABE09F310BAA3CE48486D6
4D9403EE527234C18BDC9B0C77031AC2437A48321C> |-
/s <1C60D8A8C9B7361F8BB5EB474F071A14F6886A6A71311E11AE8DF8D62DC3
BA85E254787E7DE96602C8D214E85040DD2CD59A86CF2994C7DBEBE3497C89DE
48A5193513118D9558DD3565C61BBDDA73580B36F71CB4E32D78B6DB4E5ED4D1
267100D1262D415027F043F562CDF11A5D7AA04FB2DDF5C58D3789142B59E5C7
AE5B5B52E6A06FCCAD6BA1E60EEC10FDF0D840DA95B7FF8BF26E189AC01FA90D
B18C7828CCC68A7BB8906A516C79B12ED0B2A14494F039D484536482D2FB3F95
00> |-
/t <1C60D8A8C9B854D083A90EFBC938A92D26787E8A2985BDD732F5F3979320
973AE05469589D37F6710993FA8C4F22B07BA5CDB62E8203EBC0D0A817CECF14
3F719975302FFF456E372C07C4540089BA89691B08F22F6B687DBA322D090528
19E08BEFEC85E919D4B4433340CE06E3E3F5538367ACD04AC81520E078F70831
E1> |-
/y <1C60D8A8C9B77FE2C19B609CB909D76D35AC1FA9390A2909D4A1E86242AC
BFBCB0DA2AC096B623B472719455C929A7EFF710055BF930CB636686B0B30F57
8AE3A30E9C2F193F9AD930D45E9F04F1617DFB8E62CE43CC06972C63F68200FE
3923E367F0FE8CB040C4E353A18F8BA0A62F448921E029E259F4E7C9636FE4A8
38051DD4DA9E7CD8541D94DFA1F5BA65E010DE3147FEA31F28F0830EB65AC119
8FABA7801C8E81C380C67CC14F62389A5C0F> |-
/fi <1C60D8A8C9B7A73DB58F6C98A5E3761A1BAD4C6AA16E3404DC9F6F52195
C5E055530D0F0AE4A43C9A4F8E3355B0340B60E234DD50BCF3FF412A6DC0D7FF
F16A2390549118672BACCF65F97EA4D3C9B7B5A6D1074BACC8DC99F6E7CEE2C7
DBE22A1C3F42F5D6E47EF9FC3711B2FC5D6718702EC11387021F832A46CE3391
253821E08C7A515CB79722C5AD33AB2C3B065F5EEC77CF8E8AE385268D2B6D37
666835EACB05976DB7E40CCEE92797978DED7C798EDA80D579AD4E5EDABA4512
BB05880BAAB69F3E81D9D790CBFF256A4A145643E5C734FC7171512B8C583091
4830C667813934E6A8CC5D513B39EE3985F6B60D044011EE7FAC3B374B0073E7
5C261D73DBAF99FC225E79F76CFED38D5BFC8001152824441C1C87EDDE5B959C
1234812790E6A0A784738A54C2708D3FB03147107F50AC3A2A1865CE9B76E24> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRC+NimbusRomNo9L-ReguItal /XAAAAA+NimbusRomNo9L-ReguItal findfont ct_VMDictPut
/EVXJRC+NimbusRomNo9L-ReguItal*1 
[41{/.notdef}rp /parenright 4{/.notdef}rp /period 2{/.notdef}rp /one 8{/.notdef}rp /colon 
6{/.notdef}rp /A 17{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef 
/c /d /e /f 5{/.notdef}rp /l /m /.notdef 
/o 2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 52{/.notdef}rp 
/fi 81{/.notdef}rp]
EVXJRC+NimbusRomNo9L-ReguItal nf
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
-266.727 416.251 mo
(A.Systemmodel)
[6.08731 7.47226 4.98151 4.42357 3.87569 2.76971 4.42357 10.6803 7.19328 4.98151 4.98149 4.42357 
0 ]xsh
-256.764 431.184 mo
(1\)Traf\256cmodel:)
[4.98149 8.2991 4.9915 3.72618 4.98149 2.59041 4.98151 7.50209 7.1933 4.98149 4.98151 4.42357 
2.76971 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-182.309 431.184 mo
(The)sh
-163.738 431.184 mo
(\256le)sh
-147.927 431.184 mo
(request)sh
-116.075 431.184 mo
(string)sh
-90.3007 431.184 mo
(isassumedi.i.d.)
[2.76971 6.95419 4.42358 3.87567 3.87569 4.98149 7.75122 4.42358 8.05011 2.76971 2.49075 2.76971 
2.49075 4.98148 0 ]xsh
-266.727 443.139 mo
(File)sh
-248.126 443.139 mo
(requests)sh
-212.369 443.139 mo
(arri)sh
-198.789 443.139 mo
(veaccordingtotheIndependentReference)
[4.83209 7.52211 4.42357 4.42358 4.42357 4.98149 3.31761 4.98149 2.76971 4.98151 8.07993 2.76971 
8.08002 2.76971 4.98151 7.532 3.3176 4.98151 4.98149 4.42357 4.98151 4.42357 4.98151 4.98149 
4.42358 4.98149 5.86824 6.64539 4.42358 3.3176 4.42358 3.31761 4.42358 4.98148 4.42358 0 
]xsh
-266.727 455.094 mo
(Model)sh
-236.708 455.094 mo
(\(IRM\))sh
-207.248 455.094 mo
([15],)sh
-184.154 455.094 mo
([16])sh
-163.55 455.094 mo
(which)sh
-135.196 455.094 mo
(assumes)sh
-97.9837 455.094 mo
(the)sh
-81.8037 455.094 mo
(follo)sh
-63.2328 455.094 mo
(wing.)sh
-36.8109 455.094 mo
(\(1\))sh
-266.727 467.049 mo
(All)sh
-250.029 467.049 mo
(requests)sh
-213.415 467.049 mo
(are)sh
-197.285 467.049 mo
(for)sh
-181.703 467.049 mo
(a\256xedcollectionof)
[8.38884 5.53943 4.83199 4.42358 8.94685 4.42357 4.98151 2.76971 2.76971 4.42357 4.42358 2.76971 
2.76971 4.98149 8.94676 4.98151 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-94.058 467.049 mo
(M)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-79.341 467.049 mo
(\256les.)sh
-56.2766 467.049 mo
(\(2\))sh
-40.6946 467.049 mo
(The)sh
-266.727 479.004 mo
(probability)sh
-218.915 479.004 mo
(ofrequesting\256le)
[4.98151 7.41237 3.3176 4.42358 4.98151 4.98149 4.42357 3.8757 2.76971 2.7697 4.98151 9.06636 
5.53943 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-144.115 479.004 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-131.28 479.004 mo
(is)
[2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-120.547 479.004 mo
(p)sh
%ADOBeginSubsetFont: YAAAAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /YAAAAA+CMMI7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI7.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
dup 109 /m put
def
/UniqueID 5087382 def
/FontBBox {-1 -250 1171 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 441 451 463 683 703] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/lambda <1C60D8A8C9B658EF8D6D7AE2AC672AF55FDC499A905F53E04D582A3
117B2ADD9C3BF35C8C713315313E0EF1A413CF56DB77EDD052CA206D56633808
176CA9E685D1879CBE9A3143E4A8B4188F2369EE93EF2652E90F1DB8B2E4D76A
B2C6101D9A8D8EA7B11E129748B2C78673B4C4D152AB4C8325CF5A423C4E541> |-
/m <1C60D8A8C9B51B15A3B004ABA78A4F02BD45FD7274A9A74A7E48B0CC064D
1921E5F873EDDD9CF9C0E04FB4DDBB5A9DE083B2A06BBAAA363C515090F99E1B
B42E4268DDFDD4B979C34D2B766AEA414FC3301D3900FB6A2581AD984395510A
7DE6E4E94F0B46728CE5D2F992A065A90F6FDC045FF834218D0821D404C67A58
3E6DD4E1C1588B76CFCBAC1F0CF3095FBCE07AB6CB05BD94D14F59C6697D642A
E3F308A8ECEAA8EDA418A19805A2AF109BEDC47DCC3ED47312863C6C89DF3AE5
52650A8DAB19AA4E26F36E02C586851911CC17A2A390CF53B48BB9E3B044F2B7
3887D346B6371E8B3242F85376774A8C36E83543CF398DA6610FF498DF45068C
D5CFA4B320311628C3069E3398E15B2A2F0A889B7AFCD88C192CA83812CBF5C3
1A2E8B2370AC853734ADAF47BADBD0D80D02C1B26A91738B43EBAA89B839> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRD+CMMI7 /YAAAAA+CMMI7 findfont ct_VMDictPut
/EVXJRD+CMMI7*1 
[21{/.notdef}rp /lambda 87{/.notdef}rp /m 146{/.notdef}rp]
EVXJRD+CMMI7 nf
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-115.534 480.499 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-103.878 479.004 mo
(which)sh
-75.4435 479.004 mo
(isstaticand)
[2.76971 7.97046 3.87567 2.76971 4.42358 2.76971 2.7697 8.50844 4.42358 4.98151 0 ]xsh
-266.727 490.96 mo
(independent)sh
-214.541 490.96 mo
(ofpastorfuturerequests.)
[4.98151 6.80464 4.98151 4.42357 3.87569 6.25674 4.98151 6.80464 3.31761 4.98149 2.76971 4.98149 
3.31761 7.91072 3.3176 4.42358 4.98149 4.98151 4.42357 3.87569 2.76971 3.87569 0 ]xsh
-256.764 502.754 mo
(Weassumethattheinterarrivaltimesof\256le)
[8.60805 9.07626 4.42357 3.87569 3.87569 4.98149 7.75122 9.07635 2.76971 4.98149 4.42358 7.42239 
2.76971 4.98151 9.07626 2.76971 4.98149 2.76971 4.42358 3.3176 4.42358 3.3176 3.31761 2.52069 
4.73239 4.42357 7.42239 2.76971 2.76971 7.75122 4.42357 8.51848 4.98151 7.97029 5.53943 2.76971 
0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-63.685 502.754 mo
(m)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
-50.013 502.754 mo
(2)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-38.447 502.754 mo
(M)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-27.695 502.754 mo
(,)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-266.727 514.709 mo
(X)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-257.691 514.709 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-253.816 514.709 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-245.069 514.709 mo
(\))sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-241.194 514.709 mo
(,isexponentiallydistributedwithrateparameter)
[5.62907 2.76971 7.02402 4.27417 4.98151 4.98149 4.98149 4.98151 4.42358 4.98149 2.76971 2.76971 
4.42357 2.76971 2.76971 8.11983 4.98151 2.7697 3.87569 2.76971 3.3176 2.76971 4.7823 4.98149 
2.76971 4.42358 8.12971 7.19328 2.76971 2.76971 8.11992 3.31761 4.42357 2.76971 7.57181 4.98149 
4.42357 3.31761 4.42357 7.75122 4.42357 2.76971 4.42358 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-41.075 514.709 mo
(\025)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-35.263 516.204 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-27.695 514.709 mo
(,)sh
-266.727 526.664 mo
(and)sh
-247.15 526.664 mo
(the)sh
-229.784 526.664 mo
(arri)sh
-216.205 526.664 mo
(valprocessacross\256lesconformtoaninde-)
[4.73239 4.42358 7.95052 4.98149 3.31761 4.98149 4.42358 4.42358 3.87567 9.06639 4.42357 4.42358 
3.3176 4.98151 3.87567 9.06639 5.53943 2.76971 4.42357 9.06639 4.42357 4.98151 4.98149 3.31761 
4.98151 3.3176 12.932 2.76971 10.1722 4.42358 10.1722 2.76971 4.98151 4.98148 4.42355 0 
]xsh
-266.727 538.62 mo
(pendent)sh
-230.073 538.62 mo
(and)sh
-210.576 538.62 mo
(homogeneous)sh
-150.12 538.62 mo
(Poisson)sh
-113.994 538.62 mo
(proce)sh
-91.8761 538.62 mo
(ss.)sh
-76.5131 538.62 mo
(Under)sh
-46.5045 538.62 mo
(IRM,)sh
-266.727 550.575 mo
(the)sh
-250.647 550.575 mo
(probability)sh
-203.004 550.575 mo
(ofrequesting\256le)
[4.98151 7.22316 3.31761 4.42358 4.98149 4.98149 4.42358 3.87569 2.7697 2.76971 4.98151 8.88696 
5.53943 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-128.747 550.575 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-116.09 550.575 mo
(with)sh
-94.4703 550.575 mo
(interarri)sh
-62.6287 550.575 mo
(valtimes)
[4.73239 4.42358 6.68517 2.7697 2.76971 7.75122 4.42358 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-266.727 562.53 mo
(X)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-257.691 562.53 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-253.816 562.53 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-245.069 562.53 mo
(\))sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-237.552 562.53 mo
(and)sh
-219.519 562.53 mo
(modulated)sh
-173.819 562.53 mo
(with)sh
-152.458 562.53 mo
(ZipF-)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-129.762 562.53 mo
(\013)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-119.711 562.53 mo
(popularity)sh
-75.1067 562.53 mo
(lawisgiven)
[2.76971 4.27417 10.8297 2.76971 7.52213 4.98151 2.52072 4.83197 4.42358 0 ]xsh
-266.727 574.485 mo
(by)
[4.98151 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-253.277 574.485 mo
(p)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-248.265 575.979 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-237.93 574.485 mo
(=)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-216.683 570.4 mo
(\025)sh
%ADOBeginSubsetFont: ZAAAAA+CMMI5 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ZAAAAA+CMMI5 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI5.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 109 /m put
def
/UniqueID 5087380 def
/FontBBox {37 -250 1349 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 464 683 705] def
/OtherBlues [-205 -191] def
/BlueScale 0.044 def
/StdHW [36] def
/StdVW [90] def
/StemSnapH [36 44] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/m <1C60D8A8C9B08A9518C160F049A957116CE10C4920C0E8190A6231CB1FCB
CF3BC54AEE7C0473EB5737753F4319151A0414BE72501802A63E75B2A1CB83FD
7F170233A18987EFFBFEDAEFFB95C6575F0DC50E0D9059A3751BE4722DDBEF7D
B60CB9C59B290C7B06F4090301474C6E4A95CA08137DDAB7C799100FD71ADC63
E9436B6EFAB04E3F74CD4E586795A6E4B67ECD4C53851426C0BE32A120BE6D03
486D9CCEBEE9BD0CA0181FE28312A8E9E5EB76EDA4BA6A9797B9A1F198278B3C
015B31BEBC8D8BE974AAF7B5BF2928AC5678CA7BB1209FBE48DF7AC182804544
E6D36FA30D044C1F0F5BF9A2C724E5BA2C450E2FB74E7913BD364F142A499467
E0E7258FE3E11AD6337F9A796CCEA8D69FE954E2D10F8902EBA749812EFE2716
F5BB4CC9> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRE+CMMI5 /ZAAAAA+CMMI5 findfont ct_VMDictPut
/EVXJRE+CMMI5*1 
[109{/.notdef}rp /m 146{/.notdef}rp]
EVXJRE+CMMI5 nf
EVXJRE+CMMI5*1 [4.981 0 0 -4.981 0 0 ]msf
-211.958 571.397 mo
(m)sh
.39799 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
-226.218 571.994 mo
-195.807 571.994 li
@
%ADOBeginSubsetFont: ABAAAA+CMEX7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ABAAAA+CMEX7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /summationtext put
def
/UniqueID 5092763 def
/FontBBox {-12 -2951 1627 770} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/BlueScale 0.04796 def
/StdHW [49] def
/StdVW [80] def
/StemSnapH [49 80] def
/StemSnapV [80 91] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/summationtext <1C60D8A8C9B08A9518BD3E628C36A0A5FD6530F0A6363A33
DC3ACDC0314BAB1C8A3220AC00B6BC14CB254709FB53F716EE11DE0EDDBB27E0
705477B2058D4F3D459F0D597F94671EEBE57B11629DF1AC81AC1D5CDCE55EC5
1595DF2ED68D176E101CD5A0A625347C3A26CEDA7D5FC3F8A09DB21472280548
40D827C27FEE8C68B6BBFAC3ADEF17FE81FB> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRF+CMEX7 /ABAAAA+CMEX7 findfont ct_VMDictPut
/EVXJRF+CMEX7*1 
[80{/.notdef}rp /summationtext 175{/.notdef}rp]
EVXJRF+CMEX7 nf
EVXJRF+CMEX7*1 [6.974 0 0 -6.974 0 0 ]msf
-226.218 573.533 mo
(P)sh
%ADOBeginSubsetFont: ZAAAAA+CMMI5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRE+CMMI5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B08A9519DF359271B198B3615844EBE60AAAB9311322C2C20C
BA2978FB7A230D7950F7C31A8221A7E1F7D321DF7F20CA4F134E801EDF317A71
62A6D3167A6B26C2BEE5ABD667D513F7416657FDF0D127968EC7A56DAC9D3B2E
7BDCDA657DF5D3776339455FA038809848AAC52DC3A334CBB9B68D4CBDAD1465
794CFE823E71679DC3640B43FCF2334DD220F49079161D9039318B0D52FD0C81
2F0B68EBDDC87454638E5098CFAEFC9E4A71C63EA16C0533CC49F2D7B174C74A
59C931EBA6901F08306B87E2E6E89A0965666DC63E571A09AA21E174C6ECDA5A
75218D3B2BED7ACEF16F217ED7430E32C85C177B8E503F9E269FE03AA771ED85
116F0FF4248E74BEE7A2D60F66B0FBD3C970D919990E0A1317EB7B7133D9BBE3
DA35BA2D61283CC54E9C7ADFB975102761212F9690A5173A9C1B7E91AD15DC00
E4F305AEB417410ED6D2C9253E5373C0FE884B57E89522676DED97B0083C6232
05530B> |-
/j <1C60D8A8C9B7CF7CC0263E5768167930B97F9193CBED42024E191555DC3D
6DD0D2799C5F8D46893DCAC8AF92C86D99665CA3D3BF709015B32AAA8B2175F8
1024416E9D3E175050C6A83039CF09E66D170737FEC2CEE3D18CDFBCB052644C
44D9917814DF988D11C35A836E3C0D14C629A6D2F913E13B3B1FABB9EA977932
6FCE32CC8580FB6E940BDFDBC728505FDAA6616F51394E4CDA28420ED9C282D8
9F3D056AED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRE+CMMI5 /Encoding get
dup 77 /M put
dup 106 /j put
pop
%ADOEndSubsetFont
/EVXJRE+CMMI5*1 
[77{/.notdef}rp /M 28{/.notdef}rp /j 2{/.notdef}rp /m 146{/.notdef}rp]
EVXJRE+CMMI5 nf
EVXJRE+CMMI5*1 [4.981 0 0 -4.981 0 0 ]msf
-217.847 575.996 mo
(M)sh
-217.847 581.005 mo
(j)sh
%ADOBeginSubsetFont: BBAAAA+CMR5 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /BBAAAA+CMR5 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR5.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 61 /equal put
def
/UniqueID 5000788 def
/FontBBox {-10 -250 1304 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [44] def
/StdVW [89] def
/StemSnapH [33 44] def
/StemSnapV [89 106] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/one <1C60D8A8C9B65DE7085DF0FA0A84A4834594A66D768B5EC4E09A6E93CE
BAF938136994B526CB5C00E02356C32A08ADEA3D000069B69A38C2621BA52A18
ED1E05C64AAB620F7820D652E3A7C376702573CF199169787892A20781D3AC01
165FDB2EDBEF137DB96A04A56CAB832FBE39507AC9D82DCD> |-
/equal <1C60D8A8C9B50556B40AEB7A2A756ACF5D4452462B3F4CA3E77A5AF4
7AD8221A8362E2B21C6160094F90465912E282D0EB2D40A706F74AC82E72BAE5
329769610BD83B7CF2DF7EC6D17FD7847314> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRG+CMR5 /BBAAAA+CMR5 findfont ct_VMDictPut
/EVXJRG+CMR5*1 
[49{/.notdef}rp /one 11{/.notdef}rp /equal 194{/.notdef}rp]
EVXJRG+CMR5 nf
EVXJRG+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
-214.623 581.005 mo
(=1)
[5.11948 0 ]xsh
%ADOBeginSubsetFont: YAAAAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRD+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/alpha <1C60D8A8C9B61BBFF274629CC9832C70C488CF83B7AE16FFE77BE2B4
C4462E2B6544838D7D3AF0720B239FB67DB660F18A1A83004081718CC5FF4B06
AD5076A0AF555C841B5C0C5B1E4688C42555B7A7605B59EF41FD980C2AA1C3DC
F560435105AF40EAE0355C94396D2904FC2EDF6B50CAF514B8037183FEAE74B5
4419DF66C48B06CF7B982BA454E4D5815CE7804BBC8B4B46B82A2A623F95A8D9
09C545088C969B2C5C2881806555ACA268117922> |-
/N <1C60D8A8C9B58EDE182C7CC3D890DA6E8FAA21968CB9B76BA4413FA3EADD
6E17E2371BCFB862E8F2F6F629A0F3E3F12398716CBE0C2DECEB6D5F3AF015B4
92F6A53D4687891B9D429D3C219C4308418429F0D79F5DD9A8C5F41F50763E5C
4C4A8E83FCA23DF73F3D26F17AB88020DA01E2559C38601BDAEC255EC90D62EA
73168C526D64DE2D2429B9E2698611E13A4DCDA3AB1941329082C8DA19CDEC12
F23F04777B3D1F4765BB64EA65A1EE9A5CFF48FE6DD1C36C166A086420C5260F
55221BB6BBB869ECC4C320FAB48AEE2F3EA224D7556337C6FB6948CC97AEECFA
B0DF5805CD40B4A845465843EB014355F52068F30EA8ECC975> |-
/h <1C60D8A8C9B651303730A6E709AE53FD2509FCD1CF45AE572250B2E7E7BB
A1BEC253C29E5708D4E872B402A61AB1DC5564D16C676BC20163F8A3F5FE6E14
F73F54F29FFB95BF3A4AF9CB9C403F31B1705CC71CBD5C94CA932F8F4E3B9A86
E1881567B4DCF53ACD689A2268AF0BD6258B77B85364669F3B87DFE873089368
F765E7E21AE8FFC674BF5C41EFE8FC4D206AC39109956EE089E4B0C692E9747A
0C5D30F058B88C76CCC4FD96D7065C222026ECE423C97D0DC618F8F1DFF1CC6F
A1CB9A2C3AA0AE265F473136B51AA789C18FF626FA7A7957E42024990D2E0C2C> |-
/n <1C60D8A8C9B6374B4C02BBA2C2A4BDFB14D942002897AD9E721F35D86194
D6438DBDEDC613997064273324A03221ED77119ACF97A1D09756CA7E107C6843
B21D2503F6D3BC75D192648064781744E5678EE97FB1A6056604808404C56F7F
8D9D91257F1B37A07011CB22C58E0406E0C6D4A5BC20F01F9DAAA77AA12DA66A
554F2FCCCF5FB6A9C312E0AF216136CBBB0407BD13C77F63C014B8ACF17C60BC
7406988C870BA107A13FF0CB13470F996F69FC27271E79FA5A5A46301340F300
2E6F499CCA32312E6CC54FD83DEA5D41382D0DEBB2CBA04A7F886B0B36B4C204
4E> |-
/t <1C60D8A8C9B76C9024B562E6ACACC3BBFBFEA0392D5F04472FA97061AAE4
DC52A3F98A11D8D54F25E4E1258444AF5132275DA6C5E3D0885B5B2A4654CEE3
4242292B9FEE69B16E5DD8A918634DD3321B8DE0F4A8FC34CE141D352DCEC7C4
316AD4FCDE9B4AA88B17F80EB64AF3D0551FB1E213394E362152BE7414F5D1A1
399F0E6D948396CBDF7FCCB9AE5C344B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRD+CMMI7 /Encoding get
dup 11 /alpha put
dup 78 /N put
dup 104 /h put
dup 110 /n put
dup 116 /t put
pop
%ADOEndSubsetFont
/EVXJRD+CMMI7*1 
[11{/.notdef}rp /alpha 9{/.notdef}rp /lambda 56{/.notdef}rp /N 25{/.notdef}rp /h 
4{/.notdef}rp /m /n 5{/.notdef}rp /t 139{/.notdef}rp]
EVXJRD+CMMI7 nf
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-204.254 578.763 mo
(\025)sh
EVXJRE+CMMI5*1 [4.981 0 0 -4.981 0 0 ]msf
-199.529 579.76 mo
(j)sh
%ADOBeginSubsetFont: LAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQW+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D07E927EBDAD4A7779759C5E877043524E6AD45ACD
4AFE84> |-
/seven <1C60D8A8C9B7A73DCDD9F59C989262D4C837ECD30CDC197CC53D803B
FEC41706B8BD5D4AFE4F1DDC03AF8B5A096985BA058506805DD9> |-
/L <1C60D8A8C9B7D8BE6A6D10833A58E10E35AAFF577B959C281B432F2033A3
778270B7BC2F94F72D8EF799737B2B47855DBABFD82810DF495FF107F9807477
33A863894E18FDBBE26BF9A4CCFBEC890F8084F442A884FC2F927A7A2864CE18
84EE963B829AA2B70A1A8A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQW+NimbusRomNo9L-Regu /Encoding get
dup 47 /slash put
dup 55 /seven put
dup 76 /L put
pop
%ADOEndSubsetFont
/EVXJQW+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash 
/zero /one /two /.notdef /four /five /six /seven 
2{/.notdef}rp /colon /semicolon 5{/.notdef}rp /A /B /C /D 
/E /F /.notdef /H /I 2{/.notdef}rp /L /M 
/N /O /P /.notdef /R /S /T /U 
/V /W 2{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /o /p 
/q /r /s /t /u /v /w /x 
/y /z 51{/.notdef}rp /fi 81{/.notdef}rp]
EVXJQW+NimbusRomNo9L-Regu nf
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-191.125 574.485 mo
(where)sh
%ADOBeginSubsetFont: VAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/delta <1C60D8A8C9B77FE246D59246FEF8414301972DEFFC20DAD8E76B62D4
170D7FB3E1ADB81ABE6B4E6996FC3B2B3621970EC9820F84BBDFF6B37F13BF3A
9F7D2D922503E82C85B46B60F5320C4078CB5F0FE7F6EB66217DBFD790DB4235
71F9E4D0E284A358496188A3114CFDEB84E83FD74E25AFF554CEA42767C9B871
C82B0A63B9DF1F9BC578AE7E16811698AC39787D15FC677E8D0015> |-
/mu <1C60D8A8C9B7C12A5192EF3A04B28E19133C569BB43A074557B35DCA2A2
24F875427AE316894658D8B600663F3FC1470CBA5B5E47A3ABDADBCA51F05B42
2E642149FA63C7C833FDF556024F154D07C6E0224C9ACC78493A3FEB790D05D7
0BC472F68B8E2919CE4D3E207B7E5F47815859B2EF2E754FB0871A302BDA06D0
8301F95BD0E55063EF4D4ECFFCD085673204B128F7DF117AAEE6B127B5B8CEDE
CD90532219B6095F5EB13A532B6E7D18FD7CB6162BC5434B47DD6EA1AB9D40E9
2B1ACF74C87B37A3C74A3D5B3AB> |-
/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D
239BCB61DC78D83A8F223F832> |-
/comma <1C60D8A8C9B85744148CA332C8F6F1C9DE6B352F8C512D68BA1E3142
6FC0ECC7A922246EACB7A924151A79EDFB3E3451BD87933C27475FAC0D74CB82
67D592363D57178D8C03E491CE91E57E08820A621E0AED28> |-
/slash <1C60D8A8C9B7A73DB56225352A24C6E389DE2B55CA07FB5710C6DCAE
04F94BC5CAA5785E17ED28271B55834262FD3846E502CB37AB886C6947131546
D475C5E688F02E31C309> |-
/greater <1C60D8A8C9B6FC2D0B7AF226145EBD4699910182AA44364E214EF1
81E4EF11F09B1CDF639298183041F70F09788525763201782FEB13E6B9A6E060
7F78254829620D4125185763FF66F3C7816DADE29DCA0BAAC1CEA7127EAA9D5F
75E8> |-
/I <1C60D8A8C9B76427AC28DB7D15FEE2E108AECA7DF16495D9DB7B1104C5DA
C5B674AB916F6EB0F1CEE2C2E75233460BA1B0249AFD1C196A33C527D1FA2B6B
DD5B83C69545214F6F5ADD2A4C251710BA5BBAC22879AB1368BA71D26ACE60F5
7627B6F7F1A20965116C511B9F905306CBFECF81D93BD2E56CF4F63043F594C1
DA94B530DB3FCA83359351B8DBBE123A41AF7424E0C7DAE444680EF9B0A3D333
CAD63A9B7444F6EE4090E3CE0DF53B2DD1017299A5EAFEF6A9E0CA7E843AAD52
4BB5F2> |-
/R <1C60D8A8C9B6EA9143AF3FDEF6284C95CFFBF1BD9619606386A2474F0F74
32DCCF0640AD2A08258F5E47F78C53563803403C3AAF7B8AFCAC0F0BD6D4E816
2FFC45611297A421EF699EC88B5E63C93FB9F960358A043FF0475EDDD2C00B99
23987B19DA05200025E7E8367D4D07FCCAF9EFEA0B65E5D40AC3D5EFE1186392
7E3FEFAF516635D9C2B7DE7D5CFEBD8006FDC69C34678706F2EEAF070834CF44
F66F76A3BFEDA3315C17A351ECE1D1A2694E8F62F32A01864A20B71A3C42E31B
ADC076DC38AC7B5B2CCDB732D4E38EE516D66013A210E8DEB706A3B6142E117B
39C4D4ECB11B025AEAE7AF1FFBAFC3BA07C72638BDC310FEB6DB8C8B4F4D327E
A53995AE1D734D84A9C8849110AF02411920ABADE1DA7D2770D6DEB659A8E3AD
B63F4FCA84BDDC> |-
/f <1C60D8A8C9B752AB470B4B675153DAF5FFB9FA454C9906B926206E449AE2
703E65919425028E582F5B2415481B2BD72EF503FF91F262F166F00A9D78D0BF
EBEBC84F36A53DA28C84B1E1F420B56784175C2AA9B71BCA7C1B561D8AE78C75
07DA545FBED786245A533CC28BE8540D6F127692804BEFD7259888A39E96DA2C
C6A47A1546279CE3053200B6A7E201B7770A22EAEBA422BDAEA7D5C417C5AB53
05AF89F1C27E78553FB974F7821B67FCE1F24F306030DADE4CC6852D08> |-
/n <1C60D8A8C9B7C3C99592073C380D5EB33972B0E7A1F7696CFD3BFCDBA36E
74B12788DB1F09B52B587438F5C7126CC3F9331B76B411552DAD88FF5B2731FB
8A30D4039054DE7881FD1040B3AAA0067A7F268759C5B8FE71C6C640E6CFCCBE
79D4AF27DC6E5B0A2255251E501D4B4B538B55ED267C22906901AB7EEDA3069D
F42F6AF99C860F98E5A2449D9A147D2C1F90CFD8CE9D17F947C6867C8C175E34
1343B07E6C856BED2AB83F9AF1F2FB39E3C5A2A0DC4339E7026D740FBCF79669
7562554331A7ACC4FBF70E9430AC085F22816D98AA26> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRA+CMMI10 /Encoding get
dup 14 /delta put
dup 22 /mu put
dup 58 /period put
dup 59 /comma put
dup 61 /slash put
dup 62 /greater put
dup 73 /I put
dup 82 /R put
dup 102 /f put
dup 110 /n put
pop
%ADOEndSubsetFont
/EVXJRA+CMMI10*1 
[11{/.notdef}rp /alpha 2{/.notdef}rp /delta 6{/.notdef}rp /lambda /mu 35{/.notdef}rp 
/period /comma /.notdef /slash /greater 10{/.notdef}rp /I 3{/.notdef}rp 
/M 4{/.notdef}rp /R 5{/.notdef}rp /X 13{/.notdef}rp /f 6{/.notdef}rp 
/m /n /.notdef /p 143{/.notdef}rp]
EVXJRA+CMMI10 nf
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-163.299 574.485 mo
(\025)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-157.488 575.979 mo
(m)sh
%ADOBeginSubsetFont: WAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRB+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953
BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2
BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A07BD51
606BCA866C4BD24CA34E86B9CA5A529B664F3EEDB6B4AF8A2B994DB57B49473E
162231CB943675FE63E9B92B8AEBB62FB22456EC4173C66EF6C2F34FFEC22ACA
E77FFFAAD70F3754CADC0D2CF63CB6D286D930AEA5A613E5AB9CB004BEAEBADD
D070EDAF4FF25FDB6421F540D58D2C7A3FC40290CBCF831BE1B89B7F> |-
/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444
C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB
5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B56
17CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4F
B895EE90259DCAEBCEFB9765574F> |-
/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADF
B78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CF
F61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D3
2A> |-
/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A0865738F60F138
94266612CF652F44C217A476812BE532AC6358E0DAFFB0D5E5117642F5BA2923
BEDB1C7E5DCDCA6F9C7FD13A241FE9CAACF60BAB1EA0492936F6C6CF04C43B9A
FAC5B2026A794CD9C7836D055F7A78383659A460B574C21AA89D092E6B58E9A3
1CB4E83AFE695EB2A4193C039EA5F618CAF7745B1FDA9ADBC0C4AFF43C821C25
38E4D3E0311619B8D0096703429D61227134D3D4F10264801F2AA4B0A71E8991
4A580FDC8088D541BDE06B262C3D90AF19EF55DBE228CA71D5828F50534BACCE
F423C267E1995B8408ADC61022455B144160D98EB158310C4459DDC5A63157F9
82CF307D29294A260DA3997052E3598EEBA826650D8D48FE852C19EC9306D477
60211C4650B51CCF133ADCA8B28F2087D2999D418C5739327F2B40FD7891074F
BE2A054E78BE9D42> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRB+CMR10 /Encoding get
dup 43 /plus put
dup 50 /two put
dup 105 /i put
dup 108 /l put
dup 109 /m put
pop
%ADOEndSubsetFont
/EVXJRB+CMR10*1 
[/.notdef /Delta 38{/.notdef}rp /parenleft /parenright /.notdef /plus 4{/.notdef}rp 
/zero /one /two 10{/.notdef}rp /equal 43{/.notdef}rp /i 2{/.notdef}rp 
/l /m 146{/.notdef}rp]
EVXJRB+CMR10 nf
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-147.153 574.485 mo
(=)sh
-136.632 574.485 mo
(1)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-131.651 574.485 mo
(=m)
[4.98151 0 ]xsh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-117.926 570.87 mo
(\013)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-112.249 574.485 mo
(;)sh
%ADOBeginSubsetFont: UAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQZ+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greaterequal <1C60D8A8C9B6FC2D944F5ADA1723A63EEFB5EFB5A4E3F88F7
BB4329E7ADBD5B0780CA13A21E9507256A05578558BD1F613392960F2F5BABA1
9F5CF064DD2FC4643EDA662371ADD69F44FE2480F44011439A3CFA6A8ED59008
28E63A912E3B5A0B05DC3FE3451675D0B4CE01359881AF3FFCF0C09868CADB8E
D10DC138CF6> |-
/universal <1C60D8A8C9B790A8C3EB64EBE03563E2A41E4A0FB5A462058CA2
4D705694FF3C04E94FC907735371BAE22D054422FB59C6DA85EF98F630A75645
9BAE4FA60ABE3715009885A38070B3E22F477708CC69CDD54C984D8EDE1A0AB9
69F61E752304938EF0F11B74E7C673C528C6B18838B9> |-
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
959CA9D8768D378B31F9958CC81B8983D97B99095D96B7B13FD5F176637D1917
CBA8C5B39E4DE518E3826A46DC89228CAF1C527CB89936763A26C8ABAEB05B83
D697601A16F0C30F623A5565FC8C7E46B86FBD1170D03B6D86481EAED1D0448D
97ECF43080CACC56F8DC5EAC27FF2F85FE282F323992DCE58CCAC225E57C7133
C46859EF9ACC558D046684C86AF46342> |-
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E50297
25A48EA4986EEB92642FB15114D993A3E4D78166C9507F82BF07B5E46AE791E4
8C3B5D13848EE2A0ED390B8EF77240E758B367FB2AC0AD1619CE65A4D162564D
60A402AEB4F44AD0059F796DBE87333B0184A0747010482EB8790381C7873A70
95E3FA12E2A8882D9D79D84512274A394AF253DDAAA1469882951252A7429856
03D0073C85F20BAEF47B61A9ECA7243ED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQZ+CMSY10 /Encoding get
dup 21 /greaterequal put
dup 56 /universal put
dup 102 /braceleft put
dup 103 /braceright put
pop
%ADOEndSubsetFont
/EVXJQZ+CMSY10*1 
[21{/.notdef}rp /greaterequal 28{/.notdef}rp /element 5{/.notdef}rp /universal 45{/.notdef}rp /braceleft 
/braceright 2{/.notdef}rp /bar 149{/.notdef}rp]
EVXJQZ+CMSY10 nf
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
-105.054 574.485 mo
(8)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-99.5185 574.485 mo
(m)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
-88.004 574.485 mo
(2)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-78.595 574.485 mo
(M)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-67.844 574.485 mo
(.)sh
%ADOBeginSubsetFont: XAAAAA+NimbusRomNo9L-ReguItal AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRC+NimbusRomNo9L-ReguItal dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34F87521FCD249B6DC8B0E77190D1C9F7E8D
F247CF92948DBBBD4E9AB1FA42F31D200D7006026A169BEBF7CA6983003C26A0
B1F7CB3159B625EE948D9D061C3A932E894D378A8D> |-
/two <1C60D8A8C9B7A73DC5046156A835A2D75FAEF6D5C8F8504A8D76EFC06C
30CCFE7100545CDA40DB7979FD035E2EA4EC4FA76A51323180883C1D821FD73B
F9E390D71B1376D56B6880F7B30B967257B5AA81A025E03DC47A12CA4D2874BF
901FBAA4566AEBDBA580F769D2020C5CAEAFA887DE> |-
/B <1C60D8A8C9B7D8BE6A7652E6F0F4B938A855ADEE7832FE6E92C7B0A750ED
480EFF4A4F0AF5D5E959F7C49290F199A85C841EF814D333E1E1EA6A8E3A097C
1B044E67B247EE64D8402A10DDB3BD412F3EB87BB9E9680EFB49F33A53BDB237
1C4C38E8DA164A62324FFFAB31D42DBBE1A45884EF9D34B65E7ED623891EFF27
0A4487C1C5B86883FB8F4BDA3FB6DE7E305D6F75D173848BFDC96109E50A4003
5B4FF50FE0EEC1DB2689770230A6D60833F219664D4092A91B5F2549AA52CC3B
A3DDA4B3CD8B90015BFAD4E7C732C883877DA90F499B682994502460BD391686
8E9D48> |-
/C <1C60D8A8C9B64EDF7ACDAD27FC7B2DBF66A88CDF54CD328D7FD24369B2FE
D33EDD2352F5FC4BCBC7C1A4F5DC71ED9B84E5E65E7E13A2B9A3B72FF47DE9B4
D20AAE993D30DD7D9C69B6DC812C06CC421CB55A2A83853F6470EC0A60D48FBC
B56AB218A84EA160A4794FC71A721BAF78F5B6AA73C60EE0DE> |-
/P <1C60D8A8C9B7D8BE6A40C975083C7340CD6906ECF2E3CF1D49E1FDD49037
20EF71B3A78D8667F96783ADBE5D639A1A9294E478A05AB8697E20511C51636C
79CA58D9AC0ED2B24253F3883E4BFA7A7ED2FE6DBB0541A5A1AF05898322C2BF
61032DFB5A3199D8C2D78558FCCAC63830D93433F13102D03E9BD11B84EA92C1
E67DFCB7040B8DBDE8078B21DD19424F2DBFC8E85D438E028391F0884D790AB8> |-
/b <1C60D8A8C9B7A73DCEB657E5279EC2813443F9DAA13C3B06DADED01890F2
26DBFBD5F2874F07980708B7D744478E771576F3EF0405F8408690E6A059941B
0451407AA0CAD51E11196873594D0D4ED28D93AD92EA8DDF1325C4E1CE7631D7
A468CA8C2A7F418D1F6E7224BF609195DD17830E2D332E69032AEC307FA2DD6C
8AC8B3B34D51EC7E61F7C549FBC664B905B07F673C> |-
/g <1C60D8A8C9B7A73DB58EA1BABB86F5673E58177B13D1689217184648646A
C0CE49A237A8F103AFCDB5EC056581454943D22FAB127F5C1E1E8B9D6E918057
E41E57DC52684AD5331B647C59B7E247B500C8501462047450C98D0B8241197F
7468EEABB23B6BE6A7CBE76395CF8839E2B115BC98F6FA00D46DDFE6768E493A
3C0344DC7EA7D3699B1F8782B909183D69E072358DA2A49D119AC7EDA36AC077
37F930D0C75C1F1BCB60AF1EAF20DDD5E35335A0BC9EC8E0CE2E4A3CD6851439
F3DA9D850AF5975B35E3C0F98171603731A62B92C94E104B5375FD3CA4280A4C
C5653EBF95230E8F334DA161BDC71F51D2AC3CF2759DA1D1B2BF0F0FB9FBB3DB
4CA56B5DDF9EBC89C937B97D72AE185FFA5EE4F1CC1FCB4460BBA25A82EF5CF4
F8653AA4B26755A26D8BF3E9248CABA6BFFD30E08F> |-
/h <1C60D8A8C9B7A73DCCC2CF5CE401F1233C4539879FDA2315CCD592E8AAFB
2E4918D29F3424D89DEAEFF064A3D792A1490EDBA1C4ABF8210DC7A773E30DF8
24690DCED1024C9B211BDB612AA25F25249E3EF8B551D98FEFC1AAC679EFC32E
B47DBD03361A2D604292AC71EFDCC2750031E6E0FD4D4CE6DFB4E59CC1F5285E
96D5FE62789C95EEA8C79C8EEBD27583EEFA9E932B8E1887683720948D58687C
65BD460CE5031A57CDFE0332B5120E> |-
/i <1C60D8A8C9B854D083AFE4C873AEC1E7FDB9EE859797A45455327B9BDB70
760240E8ACF666DC8D59275277C3F3C252A46BC2A92D5BC509D2A0906FF0489A
6A2863B6C52E12014E0BA262008BDC08AE94865A26FD90663B8FE13B433E5668
3A79BB00550E9151E21E522B2D2B5D71B39AD827ED501C13C2B901FC1670356A
6C436566AF4075B7579EA6C70A85F6C747F08B> |-
/n <1C60D8A8C9B7A73DCCC2CF5CE401F1233B06D0FCF55836E538C58E814EEA
E6634460655FD290AE7488CE32E814759E0AF2C2482D7ABBAB2541CE23A2082E
8ED41FB38E252A6CF76E3507FBCD76F6FFBE5683A3516B6ED6647539D8D688FE
36EA596FC13D794F6D3DDE908BBDA3068338531638CB57995C08C38697724D14
8D71913F92B471AD67329A2D4B1A2188889C10BEBFE0E915562767D4E2D95C76
B539DE865FC66F5538DC89EE812915B3922908D3579330F65A44> |-
/p <1C60D8A8C9B7A73DCE8ADACD4C270B1786D169F3E20E591ACA0CE0F9229D
EE17149E57EA8C388BBBF5AE30EF5200D4A0F04C5FB938FADE53A36AA852E300
38E1FA465FEEE81384F5AC9A894FCBDF86FEF2356D791085E73D3BAC227D40C3
D40A0ABF220A13538E735EB867A89FE7F997755F8A45044BE6AD11D1FCB29BDB
76E0B5A99487831F30A755181A44C79BEC9E7A2E620A0A8F0F68B5D6A210CFBB
2A4B6BC0BD97267D664E7703B3442231F4316A57450D866947A8A78B101E2823
43E74357967E784FE808D25ACE69CE8C0752F22F39F56CA80C2FD357DE0B> |-
/u <1C60D8A8C9B7A73DCCC2CF115CDAEE6701EBB7DAD888B67B0C8DDCCFEB35
3A816606D3C7255E276ABC3A30631E5FA535F8FE33D5EDFC4C30AE54E17616AF
675EAA45CF42558EDFE865243B3D929C8AFA5A005A2DBEAEEB334455243825CE
104A81C6FB29B5FD80F553583B3A8C9ECC2F2690C5846CB01F62DA5A76497F9C
F8A833611EA650200ECA71FA61505A0FFB632F91152F22512D8142E76932C548
4D5B5A5A7D3D3567F5060DB7648F68BE648F39ACF0F933B98F8FC889> |-
/v <1C60D8A8C9B77FE24002D0F57A2746700208A15F37125BC05F28F5B3888D
AB8E0DAB11DBD1362D0D702F6B2762990EE98448A0B527FC96167B90455217B2
FA2D34B9F15D25EF2D0F2BB14A00312A372626D5B7326E55955E6F8729C852A5
5402FC605C559D596B6206FB61AF6E7A65CA8463BF91BC9371CFB24222B8AB76
AC460F0EAD> |-
/w <1C60D8A8C9B64EDF7AEA0EDE46BB2B4D4250D45C5A314BEDBFBB5C404D00
6819CC104B235BCB66E7F1F3F99A7BBFB5B7190CFF88198D6B881865D920AA2B
C58E1B748412F78D3E1E309A964A1FD8EBCDDA6CAC5380B7160C15CD4607C6E5
6601E845B1F9DDBCEA14F97FE5A78D408685775DC0ABD4AEA9EFD5BA5AF55D13
7453957ABFEAEB4C074E2463EF2D1A6393B1C8F73569B6F2673CBE3880CE5AFF
058D3124D436BC3D0C91EF30E3EFAA06181C5BD9D7381A70074C67798291C0C6
8EED74682F335943DCAE60CEFF64AB2741278AD2F82D6290D50F94AC9F8F> |-
/x <1C60D8A8C9B77FE2B9EADE002CE8C0592767613E8C76BA671787429B6C83
926DCAE20B5B81842719356D95F7AE7A8857617CA9A67F432AA0B4912EE460F5
D35F23B528B3CE2467CEE2E1E36B7643F0372BBD3ED767BD5BEFA47FBC57C97A
0886B2F5A870EFE6B8E4389FF68AC51528DCAED8916007D2F900AEF7090F254D
7D27B6E83D66E8897A1B68F85FC920EA7D826FEA4D9EEEF659696E43577A34D4
1DE63FDA8D0BDC7053E78E46D64E4509DF641AC847EE19E36EA21613B597F1C6
5AFF2E01114BD2917B21288154> |-
/z <1C60D8A8C9B7361FCF5F94B71F8D5427219CCEC2CE422B4C24B7DCB1C42A
6CB6F94B2F08CF1FF97E41B9A3D17C1BA76B45E5E5DB5FDC9AE4AC222332B21D
7F3D46FD68839A88B9D7FBB3ABD51C1AA5D2E96DD8B169E694C62EB734A9E1EA
1F3AE1C8F488F74BFAD59A87F78FC92D0A942CFA16FF31755D52642DE21F8EBB
5877488CAD29B3DBC7DA229F45DDAA6FD38E2F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRC+NimbusRomNo9L-ReguItal /Encoding get
dup 40 /parenleft put
dup 50 /two put
dup 66 /B put
dup 67 /C put
dup 80 /P put
dup 98 /b put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 112 /p put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 122 /z put
pop
%ADOEndSubsetFont
/EVXJRC+NimbusRomNo9L-ReguItal*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 2{/.notdef}rp /one /two 
7{/.notdef}rp /colon 6{/.notdef}rp /A /B /C 12{/.notdef}rp /P 
2{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c /d 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 51{/.notdef}rp /fi 81{/.notdef}rp]
EVXJRC+NimbusRomNo9L-ReguItal nf
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
-256.764 588.472 mo
(2\)Costofretrievingandwritinga\256le:)
[4.98151 8.2991 6.64539 4.98151 3.87569 6.24684 4.98151 6.23676 3.50706 4.42357 2.76971 3.87569 
2.76971 4.27417 4.42357 2.76971 4.98151 8.45853 4.98151 4.98151 8.45863 6.6454 3.87567 2.76971 
2.76971 2.76971 4.98151 8.44864 8.45853 4.98151 2.76971 4.42357 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-88.501 588.472 mo
(Fetching)sh
-50.1533 588.472 mo
(\256le)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-33.952 588.472 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-266.727 600.427 mo
(upon)sh
-243.613 600.427 mo
(acachemissincursaretrievalcostthatisassumedto)
[7.61179 4.42358 4.42358 4.42357 4.98149 7.61171 7.75121 2.76971 3.87569 7.06381 2.7697 4.98151 
4.42358 4.98149 3.31761 7.0639 7.60172 3.3176 4.42358 2.76971 3.3176 2.76971 4.17456 4.73239 
4.42357 5.95784 4.42358 4.98149 3.87567 5.95795 2.76971 4.98151 4.42357 5.95784 2.7697 7.06381 
4.42357 3.87569 3.87569 4.98149 7.75122 4.42355 8.16974 2.76971 0 ]xsh
-266.727 612.382 mo
(beanexponentiallydistributedrandomvariablewithmean)
[4.98151 7.94051 4.42357 8.50845 4.27406 4.98151 4.98149 4.98151 4.98151 4.42357 4.98149 2.76971 
2.76971 4.42358 2.76971 2.76971 8.49844 4.98149 2.76971 3.87569 2.76971 3.3176 2.76971 4.78229 
4.98151 2.76971 4.42357 8.49844 3.31761 4.42357 4.98151 4.98149 4.98151 11.2682 4.73239 4.42357 
3.31761 2.76971 4.42357 4.98151 2.76971 7.95052 7.19328 2.76971 2.76971 8.49844 7.75121 4.42358 
4.42355 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-266.727 624.337 mo
(\016)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-261.922 624.337 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-258.047 624.337 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-249.3 624.337 mo
(\))sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
-242.659 624.337 mo
(2)sh
%ADOBeginSubsetFont: MAAAAA+MSBM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /MAAAAA+MSBM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name MSBM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
dup 90 /Z put
def
/UniqueID 5031982 def
/FontBBox {-55 -420 2343 920} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 685 704] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [35 40] def
/StemSnapV [35 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/R <1C60D8A8C9B6079F1E7838D45200AB9CB22597F21F6361648E8FDDD666EB
0CF7B9EF8F2C30DE5503BDB7C71C5E67A1F9A81847A349A9D5F7137475465FDB
14641D338C0C604C51D762DF8CA0F6A27DF0EB148BE88D485F21388070605E41
62DA42B90EA15109197ADCCF064DEE8C994045382891EAA34E027FCD527A9951
9AAB139E612CB2DCDDD6290B8216A6AF7B9FCCD4D0BCBA375AFAF81986C74DC7
068022C0FC19A0C61194F9B8AA264188570B4E48C925610D8113954F9B284F3F
BE6D8DDC6D2714398DCF03C14D6402B9B340A9193F2643E7F6675EA2041F1300
4EC5BA6C7473ED394EFB24B3F12E19EFD39125FC75CC7955D633507C83DB46B2
D2DCF7C5A4E282E5171260AE4CF9FB783F8EC30936561DC2FBDE5BCA293DA1BA
3E478132D1662F> |-
/Z <1C60D8A8C9B64FADC67CD6F737A48182029B25ED09567AB14BF36FC37666
670F50AA39CD0657D13EAB294951922A55130709B743A1AEE83356C0991E16AD
00D51D5962223EB76CE9EB6A494F437D8AE9AC80E58A24B4D6EDE7E4B9A82D56
69C96E315ED0EFFF78736AC2932CF4BFCF6FC3E7DCE5882A24AAFB15B058F37D
DCC60B26B789F3BAFC04164A0E2C5BAAAA6FE655B07499242CF309B9BA880EEC
FD5F09D680FA8CDEB5E42C6E95B9B101B9F2B1DA1D9A8B53AC6B9121DEF72859
A8> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRH+MSBM10 /MAAAAA+MSBM10 findfont ct_VMDictPut
/EVXJRH+MSBM10*1 
[82{/.notdef}rp /R 7{/.notdef}rp /Z 165{/.notdef}rp]
EVXJRH+MSBM10 nf
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
-233.25 624.337 mo
(R)sh
%ADOBeginSubsetFont: NAAAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NAAAAA+CMR7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 49 /one put
def
/UniqueID 5000790 def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 446 664 674 683 703] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/plus <1C60D8A8C9B593D6D8BB90123291AA259E2A2720FD4880A5BA5668DBB
3FDE6DF999803DA9EDD496C11A38D856114909900BC9E753D6A6BF5C2786C87D
5C6E0CE8F6625D8E3C55B080D69D2651DDE1B21281AD85504D17B37BA0750A5> |-
/one <1C60D8A8C9B7E2CE5B62E9FEEC2E64DB4DF57A0DEE8F2DC4BC1D285E2D
6E93583C8BA769F966BA0D2874BA4F6692804A12EE154BF6C4128EE336963B1B
369FC937E51FD440B01114006718C9CD9EDADE925291DDB3291CFBE83284B576
2DA660F3B8EE1736383DFDEEBA0BD582FD6608113CEA73> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRI+CMR7 /NAAAAA+CMR7 findfont ct_VMDictPut
/EVXJRI+CMR7*1 
[43{/.notdef}rp /plus 5{/.notdef}rp /one 206{/.notdef}rp]
EVXJRI+CMR7 nf
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
-226.054 620.722 mo
(+)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-216.276 624.337 mo
(for)sh
-201.491 624.337 mo
(\256le)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-185.598 624.337 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-173.686 624.337 mo
(and)sh
-156.131 624.337 mo
(isassumedtobeindependentof)
[2.76971 7.03401 4.42358 3.87569 3.87567 4.98151 7.75121 4.42357 8.14973 2.76971 8.14973 4.98151 
7.58179 2.76971 4.98151 4.98151 4.42355 4.98151 4.42358 4.98151 4.98149 4.42357 4.98151 5.93793 
4.98151 0 ]xsh
-266.727 636.292 mo
(arri)sh
-253.148 636.292 mo
(vals/retentions.Thusgiventhatanarrivalfor\256le)
[4.73248 4.42357 2.76971 3.87569 2.76971 3.31761 4.42357 2.76971 4.42357 4.98151 2.76971 2.76971 
4.98149 4.98149 3.8757 6.5257 6.08733 4.98149 4.98151 7.91075 4.98149 2.5206 4.83209 4.42358 
9.02646 2.76971 4.98149 4.42358 6.80467 4.42358 9.01657 4.42357 3.3176 3.31761 2.5206 4.73248 
4.42358 6.80467 3.31761 4.98149 7.35268 5.53941 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-44.634 636.292 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-31.849 636.292 mo
(is)
[2.76971 0 ]xsh
-266.727 648.248 mo
(amiss,bythevirtueofindependence,theexpected\(delay\))
[7.73132 7.75122 2.76971 3.87567 3.87569 5.79848 4.98151 8.27924 2.76971 4.98149 7.73131 4.98151 
2.76971 3.3176 2.76971 4.98151 7.73129 4.98151 6.62523 2.76971 4.98149 4.98151 4.42358 4.98149 
4.42357 4.98151 4.98151 4.42357 4.98151 4.42357 4.42358 5.78857 2.7697 4.98151 7.7312 4.27417 
4.98151 4.98149 4.42358 4.42357 2.76971 4.42358 8.28923 3.31761 4.98149 4.42358 2.76971 4.42358 
4.98151 0 ]xsh
-266.727 660.203 mo
(cost)sh
-246.721 660.203 mo
(for)sh
-231.159 660.203 mo
(fetching)sh
-194.555 660.203 mo
(\256le)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-177.879 660.203 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-165.181 660.203 mo
(byaveragingoverarrivalprocess,)
[4.98151 8.93686 4.22426 4.83209 4.42358 3.3176 4.42357 4.98151 2.76971 4.98151 8.92685 4.832 
4.83209 4.42357 7.27287 4.42357 3.31761 3.3176 2.52069 4.73239 4.42358 6.71506 4.98151 3.31761 
4.98149 4.42358 4.42358 3.87567 3.87567 0 ]xsh
-266.727 672.158 mo
(retention)sh
-227.025 672.158 mo
(times)sh
-201.141 672.158 mo
(and)sh
-182.47 672.158 mo
(retrie)sh
-161.697 672.158 mo
(valcostswouldequal)
[4.73239 4.42358 7.05377 4.42358 4.98151 3.87567 2.76971 8.16974 7.09369 4.98151 4.98148 2.76971 
9.26559 4.42355 4.98151 4.98151 4.42358 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-66.316 672.158 mo
(\016)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-61.511 672.158 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-57.6364 672.158 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-48.8888 672.158 mo
(\))sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-45.0142 672.158 mo
(.We)
[6.77481 8.60806 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [5.978 0 0 -5.978 0 0 ]msf
-258.757 688.912 mo
(6)sh
EVXJQW+NimbusRomNo9L-Regu*1 [7.97 0 0 -7.97 0 0 ]msf
-255.27 691.725 mo
(Alargecacheassumptionwaspreviouslyconsideredin[14],[20]in)
[9.03799 2.21567 3.53868 2.51045 3.985 6.82234 3.53868 3.53868 3.53868 3.985 6.82234 3.53868 
3.1004 3.10039 3.985 6.20065 3.985 2.21565 2.21567 3.98499 7.26868 5.67464 3.53868 6.37605 
3.985 2.65395 3.33939 3.985 2.21567 3.98499 3.985 3.10039 2.21567 7.26866 3.53868 3.985 
3.985 3.10039 2.21565 3.985 3.53868 2.65396 3.53868 7.26866 2.21565 7.26855 2.65395 3.985 
3.985 2.65395 5.27617 2.65396 3.98499 3.98499 5.93762 2.21567 0 ]xsh
-266.727 700.691 mo
(the)sh
-254.198 700.691 mo
(conte)sh
-237.055 700.691 mo
(xtofTTL-caches.)
[3.985 5.00513 3.985 5.44351 4.86961 4.86961 4.8696 2.65396 3.53868 3.53868 3.5387 3.98499 
3.5387 3.10037 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-13.249 200.052 mo
(assume)sh
19.2904 200.052 mo
(that)sh
37.4529 200.052 mo
(the)sh
52.8357 200.052 mo
(one-shot)sh
90.3664 200.052 mo
(retention)sh
128.993 200.052 mo
(cost)sh
148.261 200.052 mo
(incurred)sh
184.666 200.052 mo
(for)sh
199.501 200.052 mo
(writing)sh
-13.249 212.008 mo
(\256le)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
3.78601 212.008 mo
(m)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
16.811 212.008 mo
(2)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
27.731 212.008 mo
(M)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
42.786 212.008 mo
(for)sh
58.7067 212.008 mo
(retention)sh
98.4292 212.008 mo
(time)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
120.441 212.008 mo
(R)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
132.361 212.008 mo
(\025)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
144.388 212.008 mo
(1)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
153.672 212.008 mo
(slots,)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
178.738 212.008 mo
(R)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
190.658 212.008 mo
(2)sh
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
201.578 212.008 mo
(Z)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
208.22 208.392 mo
(+)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
214.834 212.008 mo
(,is)
[6.79474 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-13.249 223.963 mo
(f)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-7.29895 223.963 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-3.42435 223.963 mo
(R)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
4.21606 223.963 mo
(\))sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
11.6411 223.963 mo
(2)sh
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
21.833 223.963 mo
(Z)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
28.475 220.347 mo
(+)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
38.999 223.963 mo
(asinSectionII-B.Theretentiontimefor\256le)
[4.42358 7.78113 2.76971 8.89697 5.5394 4.42358 4.42358 2.76971 2.76971 4.98148 8.88708 3.3176 
3.3176 3.31763 6.64539 6.40619 6.08734 4.98148 8.32904 3.3176 4.42358 2.76971 4.42358 4.98151 
2.76971 2.76971 4.98148 8.89694 2.76971 2.76971 7.75122 8.32913 3.3176 4.98151 7.22308 5.53943 
2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-13.249 235.918 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-.305969 235.918 mo
(isassumedtobedistributedasanexponentialrandom)
[2.76971 8.07016 4.42355 3.8757 3.87567 4.98151 7.75122 4.42355 9.17587 2.76971 9.18588 4.98151 
8.61801 4.98151 2.76971 3.8757 2.76971 3.3176 2.76971 4.7822 4.98148 2.76971 4.42358 9.17596 
4.42355 8.07007 4.42358 9.18597 4.27405 4.98151 4.98151 4.98151 4.98151 4.42355 4.98151 2.76971 
2.76971 4.42355 6.9642 3.3176 4.42358 4.98151 4.98151 4.98151 0 ]xsh
-13.249 247.873 mo
(variable)
[4.73239 4.42358 3.3176 2.76971 4.42358 4.98148 2.76971 0 ]xsh
%ADOBeginSubsetFont: OAAAAA+EUSM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OAAAAA+EUSM10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EUSM10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/FontBBox {-8 -192 963 738} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 682 703] def
/OtherBlues [-132 -129] def
/BlueScale 0.04379 def
/StdHW [34] def
/StdVW [70] def
/StemSnapH [34 43] def
/StemSnapV [70 80] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B606CE627DED317C808DCE36CEE4036385CA49D8178FF2B52F
B407CBE940BFE3FCC47514F72BDFD13238E6DEC20B654A26519C042FD9606F86
53E1CE2DE66BE0C5BA46DF5B2754811E4CD126147ADB589C48EED41E5BEFD12F
5BA7C9438642109CD3CB175708F0ED7F8D68BBC8FF398173AC4DE14866BBB4BE
BE6540DEFC1A66F663822396149E3C3A05936ED21592D8D7492FFC68CD0BC3D7
A2D36EAFD513F4CC1E55B4C4F5A5CA33EE97C7CE1B6FD344B0D4D92ADB7772BB
5ACC6B21E84EFC387805131C50530A5211AB5C78F35C27CEBB4D2485709BCE6E
504640C96CDFB53F1269DC8CE6> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRJ+EUSM10 /OAAAAA+EUSM10 findfont ct_VMDictPut
/EVXJRJ+EUSM10*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
EVXJRJ+EUSM10 nf
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
23.147 247.873 mo
(R)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
30.3473 247.873 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
34.2219 247.873 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
42.9695 247.873 mo
(\))sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
51.399 247.873 mo
(with)sh
73.6664 247.873 mo
(parameter)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
118.055 247.873 mo
(\026)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
124.058 249.367 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
131.626 247.873 mo
(,)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
138.674 247.873 mo
(m)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
152.168 247.873 mo
(2)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
163.557 247.873 mo
(M)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
174.308 247.873 mo
(.Weassume)
[7.04382 8.60806 8.98663 4.42358 3.8757 3.87567 4.98151 7.75122 0 ]xsh
-13.249 259.828 mo
(retention)sh
25.5469 259.828 mo
(time)sh
46.6385 259.828 mo
(asarandomvariabletocapturetheproperty)
[4.42355 7.25323 7.80103 3.31757 4.42358 4.98151 4.98151 4.98151 11.1286 4.73239 4.42358 3.3176 
2.76971 4.42358 4.98148 2.76971 7.80112 2.76971 8.35892 4.42358 4.42358 4.98151 2.76971 4.98151 
3.31757 7.80103 2.76971 4.98151 7.80099 4.98148 3.31763 4.98151 4.98151 4.42352 3.31763 2.76971 
0 ]xsh
-13.249 271.783 mo
(that)sh
5.8302 271.783 mo
(writing)sh
38.7578 271.783 mo
(a\256leinmemorywitharetention)
[8.55823 5.53943 2.76971 8.55823 2.76971 9.12607 7.75122 4.42355 7.75122 4.98151 3.3176 9.11618 
7.1933 2.76968 2.76971 9.11618 8.56812 3.31763 4.42358 2.76971 4.42355 4.98151 2.76968 2.76971 
4.98151 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
183.384 271.783 mo
(R)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
195.164 271.783 mo
(lea)sh
206.582 271.783 mo
(vesa)
[4.832 4.42358 8.01031 0 ]xsh
-13.249 283.739 mo
(non-zero)sh
25.6464 283.739 mo
(probability)sh
72.861 283.739 mo
(of\256ndingitincacheaftertime)
[4.98148 6.80466 5.53943 4.98151 4.98151 2.76971 4.98148 8.46854 2.76971 6.25684 2.76971 8.46857 
4.42358 4.42358 4.42355 4.98151 7.91061 4.42358 3.31757 2.76971 4.42358 6.80463 2.76971 2.76971 
7.75122 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
205.728 283.739 mo
(R)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
213.369 283.739 mo
(.)sh
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
-13.249 309.643 mo
(B.Problemformulationfor\256ndingoptimalretentiontimes)
[6.08731 7.47226 6.08731 3.42737 4.98151 4.98151 2.76971 4.42355 10.6404 2.76971 4.98151 3.87567 
7.1933 4.98148 2.76971 4.98151 2.76971 2.76971 4.98151 8.41873 2.76971 4.98151 7.32291 4.98151 
4.98151 4.98148 2.76971 4.98151 8.42877 4.98151 4.98148 2.76971 2.76971 7.19327 4.98151 6.20697 
3.50696 4.42358 2.76971 4.42358 4.98151 2.76971 2.76971 4.98151 8.42871 2.76971 2.76971 7.1933 
4.42358 0 ]xsh
%ADOBeginSubsetFont: PAAAAA+NimbusRomNo9L-Medi Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PAAAAA+NimbusRomNo9L-Medi def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 50 /two put
dup 68 /D put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 116 /t put
dup 174 /fi put
def
/FontBBox {-168 -341 1000 960} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 461 481 676 696] def
/BlueScale 0.039625 def
/StdHW [33] def
/StdVW [140] def
/StemSnapH [33 44 48 55 66 73] def
/StemSnapV [118 140 148 163 174 178] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/period <1C60D8A8C9B8707C5568E087A7013AEDEAB4E43FD5B4AD668B70E3E
CD4C9D9B81940C416ED75> |-
/two <1C60D8A8C9B7A73DC524371C3B3C004F1EF6620B304256306A6A0A5762
AB030A5B5760479101466BB995E20158F149E6FDC3E029D4DC73B72D7AD0739E
2501D144435CED231DC762E298F8A6A32E386057A36D7B3D6E2C3ADF2A7194B1
A5F418C97BE1E34F91FB8A35F20B990141E7EFE791C972A8> |-
/D <1C60D8A8C9B6079F1E72628EE41DA8DA688B90558E5030E4DB406FC0434E
8736F6D1AEB93A1671AB2809052B210583B0B968E459BD7C0A7E7330513140D6
42CFF9FD0B8ADECE1D8966485E526A66F23B586CBAFF6CA5271515B9979D83EB
A70E5DC0FFBBA1A11EF8971DF6C2DBA680CE0E17C23D3DC080DA53EB60BFBE0C
3D50341E6653A25367225B1AD9C42E18023801FF6E5C8199C71CE355A3DE37B9
B9FA4C> |-
/e <1C60D8A8C9B77FE24404D6FC75C46E8B158C7975D79013EBB5DCD53440E2
1332CFC4ECC341E7AFADF9585DB658612EC8ED47CB15CBF662FC73FBEE0045FF
CB1EC723F1B412304D1100168E2128E2060163C1E9CBFAF33B361B5A6E493F9D
F06D41DD478FF2FA297D0668847F9C36D5F5C238CA> |-
/i <1C60D8A8C9B854D088BE03066611142D35B96CDBC6AC69CE7D90A67E607A
97F6A9B6B875C22F51FD57BA3ACC3AD42FE0C4A0E1D536D46C6FA1792B134074
70AA44206267D45F7C9D5285679ED629FF131156C24DB7D425525CB4E784EDB9
C67C53B4D02F9488FD31A7A26AA8AF73> |-
/n <1C60D8A8C9B7EF3257330F56C94494157A7EF7FFCBD73F84DDC3CD027CBD
344CBE46734D8DBE3D0D7A5371055EA217764D1E6D19B975A4618DAFF7C83378
2DBB8AD061F2A7084A3861B8353FAB4D938BA793AC098E1E390E341D00898940
4E3478333E6F04C8A2256EF7F64BCEACA7195CAB26AF2CF435195B53F578CD79
712EFFD6BC467431370A461A8086A2496F058336> |-
/o <1C60D8A8C9B7A73D33B29FF9A975322B3362DC44B144D77C192E90E503AC
52DEE198FC9B9A0BE397FE5C900774EEEF1E745C0E1E84056DE211BFA2C0DD56
BD867F1CEE2D1CAF0E57E72D77AF929D1611EB127B9A6B678E> |-
/t <1C60D8A8C9B81F2CB2ACA02E0CECC7A7088ABA14D8BB1C717E776D9EDDA4
1B7C69A092B87660DC1D8821ED3D3E1FEA1F5AEA3E07AE0B68C4FA037897D267
0ED7A25F38BD082D632B2C2A93BC6E0C80> |-
/fi <1C60D8A8C9B7EF3257330F56B57001FD513F04FFD1A5C17B63152578BB2
67A7B2E2B90DD68AFDBEB8FC7B2E75F2D48162D18E101A81CC291D1BB988BBDF
E501CA206E27449FEE4AD01417447928725351CDE66FA740075E06CC061C329E
4E4B90CC15BB1D1778EF3802AE67324F1ADDB099867B7ED6B44271B00E467A7F
9E8E25BD42223C2BF51DE081B320801B3103738AE6B73C9D59A7D9D7FD7DC5C9
B001F5512BB30893BBA1CF0C0887439EB7BEF9A4A3B61346AD1C8FA3EDB14ECA
0B0A702> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRK+NimbusRomNo9L-Medi /PAAAAA+NimbusRomNo9L-Medi findfont ct_VMDictPut
/EVXJRK+NimbusRomNo9L-Medi*1 
[46{/.notdef}rp /period 3{/.notdef}rp /two 17{/.notdef}rp /D 32{/.notdef}rp /e 
3{/.notdef}rp /i 4{/.notdef}rp /n /o 4{/.notdef}rp /t 57{/.notdef}rp 
/fi 81{/.notdef}rp]
EVXJRK+NimbusRomNo9L-Medi nf
EVXJRK+NimbusRomNo9L-Medi*1 [9.963 0 0 -9.963 0 0 ]msf
-13.249 324.627 mo
(De\256nition)sh
34.1848 324.627 mo
(2)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
44.528 324.627 mo
(\(Optimal)sh
85.3863 324.627 mo
(online)sh
115.176 324.627 mo
(polic)sh
134.952 324.627 mo
(y\))
[4.98151 0 ]xsh
EVXJRK+NimbusRomNo9L-Medi*1 [9.963 0 0 -9.963 0 0 ]msf
143.251 324.627 mo
(.)sh
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
151.646 324.627 mo
(Apolicyisonline)
[10.9692 4.98151 4.98151 2.76971 2.76971 4.42355 9.30539 2.76971 8.74768 4.98148 4.98151 2.76971 
2.76971 4.98151 0 ]xsh
-13.249 336.582 mo
(optimal)sh
21.9603 336.582 mo
(ifit\256ndsthevaluesoftheretentionparameters)
[2.76971 7.54199 2.76971 7.53201 4.98148 4.98151 4.98151 8.63806 2.76971 4.98151 9.19577 4.42358 
4.98151 2.76971 4.98148 4.42358 8.63806 4.98151 7.53201 2.76971 4.98148 9.19586 3.50708 4.42358 
2.76971 4.42358 4.98151 2.76971 2.76971 4.98151 9.74377 4.98151 4.98148 3.72617 4.98151 7.1933 
4.42358 2.76971 4.42358 3.776 0 ]xsh
-13.249 348.538 mo
(for)sh
1.88489 348.538 mo
(eac)sh
15.5641 348.538 mo
(h\256le\(i.e.)
[8.49844 4.98151 2.76971 7.94049 3.31763 2.76971 2.49075 4.27414 0 ]xsh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
58.6021 348.538 mo
(f)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
63.5836 348.538 mo
(\026)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
69.587 350.032 mo
(m)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
77.154 348.538 mo
(g)sh
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
82.1355 348.538 mo
(\)thatminimizestheexpectedcache)
[6.83453 2.75974 4.98148 4.99152 6.27664 7.1933 2.76971 4.98151 2.76971 7.19327 2.76971 3.8757 
4.42355 7.39264 2.76971 4.98148 7.93063 4.22427 4.42358 4.98148 4.42358 4.42355 2.76971 4.42358 
8.49844 4.42355 4.98157 4.27411 4.98151 0 ]xsh
-13.249 360.493 mo
(dama)sh
8.78922 360.493 mo
(geduetosuccessive\256lewritesundertheconstraint)
[4.8819 8.71756 4.98151 4.98151 8.71762 2.76971 9.27557 3.8757 4.98148 4.42358 4.42355 4.42358 
3.8757 3.87567 2.76971 4.42358 8.70764 4.98151 2.76968 8.71765 6.64539 3.8757 2.76971 2.76971 
4.42355 8.16977 4.98151 4.98148 4.98151 4.42358 8.16974 2.76971 4.98151 8.71756 4.42355 4.98151 
4.98151 3.87567 2.76971 3.72632 4.98151 2.76965 4.98157 0 ]xsh
-13.249 372.448 mo
(that)sh
5.74051 372.448 mo
(the)sh
21.4023 372.448 mo
(expecteddelaydoesnotexceed)
[4.22437 4.42355 4.98151 4.42358 4.42355 2.76971 4.42358 8.46854 4.98151 4.42358 2.76971 4.98151 
7.91061 4.98148 4.98151 4.42358 7.3627 4.98151 4.98151 6.25674 4.22437 4.42358 4.42355 4.42358 
4.42358 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
152.956 372.448 mo
(\001)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
164.026 372.448 mo
(>)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
174.542 372.448 mo
(0)sh
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
179.524 372.448 mo
(.)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-3.28693 390.272 mo
(To\256ndtheoptimalonlinepolicy\(seeDe\256nition2\),we)
[5.29028 8.82727 5.5394 4.98151 8.83716 2.76971 4.98151 8.26932 4.98151 4.98151 2.76971 2.76971 
7.75122 4.42355 6.62537 4.98151 4.98151 2.76971 2.76971 4.98148 8.26926 4.98148 4.98151 2.76971 
2.76971 4.27417 8.83716 3.3176 3.8757 4.42355 8.26932 7.1933 4.42358 5.53943 4.98151 2.76971 
2.76971 2.76971 4.98148 8.82724 4.98151 3.31763 6.34637 7.1933 0 ]xsh
-13.2489 402.227 mo
(\256rst)sh
6.84647 402.227 mo
(obtain)sh
36.3469 402.227 mo
(anexpressionforthemissprobabilitywitha)
[4.42358 9.57446 4.27408 4.98151 4.98151 3.3176 4.42358 3.87567 3.87567 2.76971 4.98151 9.56448 
3.3176 4.98151 7.91058 2.76971 4.98151 9.01654 7.75122 2.76971 3.8757 8.46854 4.98151 3.31763 
4.98151 4.98151 4.42355 4.98151 2.76971 2.76968 2.76971 2.76971 9.57452 7.19327 2.76974 2.76965 
9.5744 0 ]xsh
-13.2489 414.182 mo
(single)sh
15.1855 414.182 mo
(\256le)sh
32.551 414.182 mo
(inthelibrary\()
[2.76971 9.61429 2.76971 4.98151 9.05637 2.76971 2.76971 4.98151 3.3176 4.42358 3.3176 9.61438 
0 ]xsh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
96.2543 414.182 mo
(j)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
99.022 414.182 mo
(M)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
109.768 414.182 mo
(j)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
117.424 414.182 mo
(=1)
[12.641 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
135.047 414.182 mo
(\)andconsidertheset)
[7.95038 4.42358 4.98151 9.61429 4.42358 4.98148 4.98151 3.8757 2.76971 4.98148 4.42358 7.95041 
2.76971 4.98148 9.05637 3.87567 4.42358 0 ]xsh
-13.2489 426.137 mo
(ofallrequeststoacacheinsteadystate.Let)
[4.98151 6.53561 4.42358 2.76971 5.98773 3.31763 4.42355 4.98151 4.98151 4.42358 3.87567 2.76971 
7.09381 2.76971 8.19952 7.6416 4.42358 4.42355 4.42358 4.98151 7.6416 2.76971 8.19952 3.87567 
2.76971 4.42358 4.42358 4.98151 8.19962 3.8757 2.76971 4.42355 2.76971 4.42355 5.7088 6.08731 
4.42358 0 ]xsh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
171.924 426.137 mo
(f)sh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
176.906 426.137 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
184.106 427.632 mo
(n)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
189.529 426.137 mo
(g)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
197.728 426.137 mo
(denote)sh
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
224.288 422.522 mo
(7)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
-13.2489 438.093 mo
(the)sh
1.34689 438.093 mo
(i.i.d.)sh
21.7512 438.093 mo
(exponentialretentiontimesequencescorresponding)
[4.27408 4.98148 4.98151 4.98151 4.98151 4.42358 4.98148 2.76971 2.76971 4.42358 5.1907 3.3176 
4.42358 2.76971 4.42355 4.98151 2.76971 2.76971 4.98151 7.40259 2.76971 2.76971 7.75122 6.83456 
3.8757 4.42355 4.98151 4.98151 4.42355 4.98151 4.42358 4.42358 6.29666 4.42355 4.98151 3.31763 
3.3176 4.42358 3.87567 4.98151 4.98148 4.98151 4.98151 2.76971 4.98151 0 ]xsh
-13.2489 450.048 mo
(toarrivals)
[2.76971 9.24567 4.42358 3.3176 3.3176 2.52063 4.73248 4.42355 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
32.4141 450.048 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
42.6041 450.048 mo
(=1)
[11.9636 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
59.5451 450.048 mo
(;)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
63.9731 450.048 mo
(2)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
68.9546 450.048 mo
(;:::)
[4.43161 4.4216 4.43149 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
90.9321 450.048 mo
(for)sh
106.813 450.048 mo
(the)sh
123.262 450.048 mo
(single\256le.Let)
[3.86569 2.76971 4.98151 4.98148 2.76971 8.69766 5.53943 2.76971 4.42355 6.75494 6.08731 4.42355 
0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
188.359 450.048 mo
(I)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
192.738 451.542 mo
(n)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
202.428 450.048 mo
(bethe)
[4.98151 8.68771 2.76971 4.98151 0 ]xsh
-13.2489 462.003 mo
(indicator)sh
25.6566 462.003 mo
(variablede\256nedasfollows:)
[4.73248 4.42358 3.31763 2.76968 4.42358 4.98151 2.76971 7.91061 4.98151 4.42358 5.53943 4.98148 
4.42358 8.46854 4.42358 7.3627 3.3176 4.98151 2.76971 2.76971 4.73239 7.19327 3.8757 0 
]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
-3.28687 479.468 mo
(I)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
1.09314 480.963 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
9.28314 479.468 mo
(=)sh
%ADOBeginSubsetFont: QAAAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QAAAAA+CMEX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /braceleftBigg put
def
/UniqueID 5092766 def
/FontBBox {-24 -2960 1454 772} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/braceleftBigg <1C60D8A8C9B6D8146F201934251AC13A1B6FA7016A8076EF
5BDAD6B28D8FDC3BFEBF682E23FD9225DD37F42EB7D4B0C2066F212BB5B2F3FE
4C6AD2C6036BA71C81499BDD297BDEC3D708BADF1E862E9ECC91A3A4A6DE626D
57F627935DD8DB11C006D4212DCB64DB8BE1EE2414FB72541275DCC295D04B73
88568D215B0035030144BFF5B86034F3ED018A8BF4BD3EFD76D2DD9841861887
FA5209AE283E07AFF3312F32068945A3573ABFCA4E24FEB1D329E40D13D51AD9
CB3DE4ED9DA03E2693E78735> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRL+CMEX10 /QAAAAA+CMEX10 findfont ct_VMDictPut
/EVXJRL+CMEX10*1 
[40{/.notdef}rp /braceleftBigg 215{/.notdef}rp]
EVXJRL+CMEX10 nf
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
19.7991 462.432 mo
(\()sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
27.8251 472.674 mo
(1)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
42.7691 472.674 mo
(if)
[2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
55.8301 472.674 mo
(n)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
61.8102 469.058 mo
(th)
[3.00995 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
73.4691 472.674 mo
(\256le)sh
89.6889 472.674 mo
(request)sh
121.949 472.674 mo
(results)sh
151.45 472.674 mo
(inacachemiss)
[2.76971 8.46857 7.91071 4.42358 4.42355 4.42358 4.98151 7.91061 7.75122 2.76971 3.87567 0 
]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
27.8251 487.02 mo
(0)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
46.2561 487.02 mo
(otherwise)sh
-3.28687 499.285 mo
(Let)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
13.7161 499.285 mo
(X)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
21.9701 500.779 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
27.3931 499.285 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
31.2677 499.285 mo
(m)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
40.0153 499.285 mo
(\))sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
47.6111 499.285 mo
(denote)sh
77.8986 499.285 mo
(the)sh
93.7897 499.285 mo
(i.i.d)sh
113.018 499.285 mo
(exponentialinterarrivaltime)
[4.27405 4.98151 4.98151 4.98151 4.98151 4.42355 4.98151 2.76971 2.76971 4.42355 6.48596 2.76971 
4.98151 2.76971 4.42358 3.3176 4.42358 3.3176 3.31763 2.52057 4.73248 4.42358 6.49585 2.76978 
2.76965 7.75122 0 ]xsh
-13.2489 511.24 mo
(between)sh
26.1548 511.24 mo
(the)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
44.5411 511.24 mo
(n)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
50.5211 507.625 mo
(th)
[3.00995 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
64.9041 511.24 mo
(and)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
85.5001 511.24 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
93.6941 511.24 mo
(+1)
[9.96103 0 ]xsh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
108.638 507.283 mo
(th)
[3.00995 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
123.02 511.24 mo
(request)sh
158 511.24 mo
(of\256le)
[4.98151 9.53455 5.53943 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
191.455 511.24 mo
(m)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
200.203 511.24 mo
(.Note)
[8.7077 7.1933 4.98151 2.76971 0 ]xsh
-13.2489 523.195 mo
(that)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
6.59509 523.195 mo
(I)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
10.9741 524.689 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
21.7831 523.195 mo
(=1)
[13.1292 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
44.7981 523.195 mo
(corresponds)sh
97.8411 523.195 mo
(totheevent)
[2.76971 9.8833 2.76971 4.98148 9.32538 4.17447 4.83209 4.42358 4.98148 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
153.645 523.195 mo
(X)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
161.899 524.689 mo
(n)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
172.707 523.195 mo
(>)sh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
185.841 523.195 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
193.042 524.689 mo
(n)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
198.465 523.195 mo
(.Thus,)
[7.39255 6.08731 4.98151 4.98151 3.87567 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
-13.2489 535.15 mo
(lim)
[2.76773 2.76773 0 ]xsh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
.588104 536.645 mo
(N)sh
%ADOBeginSubsetFont: RAAAAA+CMSY7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /RAAAAA+CMSY7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY7.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
dup 49 /infinity put
def
/UniqueID 5096648 def
/FontBBox {-15 -951 1251 782} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 708] def
/OtherBlues [-139 -127] def
/BlueScale 0.039625 def
/StdHW [49] def
/StdVW [49] def
/StemSnapH [49 69] def
/StemSnapV [49 69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/arrowright <1C60D8A8C9B08A95187F38B1F2AEDAFD54741A12C14D7279F35
DFF34AD6DA0CC5573E9FAF6AD9E687321DEB8C0014A79CAC36A1B2DB72CB9632
EB07543A662D2BA6B5460E46C305CBB3E5CF185675D43C4D619D475E0BBFB198
B218C4C6B150BA6341222D41655573D71474A2F3CE85AA65733C3064D8E1BF43
954A74E> |-
/infinity <1C60D8A8C9B08A95187F38E1B7119851DEC31A796F26BDA39837C
3005C4CEC0CFA5DF45321080DA226CBD38FEE9964E6E9B4F7035BFC32C85D2B8
D0D9A63335A086D892B71C87D9410479B8D979BC46476B6BEF2E2DA1F4A99887
678721F77DD416C8C164FC298759A26B0A9DE7E4706D5863F65FE08106081C57
DC97072733E5BF348B5481812CC205F9184D58E3D20715D0C7F1DA80B610847F
404BA20F7DBD619EA588E1A6B1D> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRM+CMSY7 /RAAAAA+CMSY7 findfont ct_VMDictPut
/EVXJRM+CMSY7*1 
[33{/.notdef}rp /arrowright 15{/.notdef}rp /infinity 206{/.notdef}rp]
EVXJRM+CMSY7 nf
EVXJRM+CMSY7*1 [6.974 0 0 -6.974 0 0 ]msf
7.64612 536.645 mo
(!1)
[7.94269 0 ]xsh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
28.4281 531.228 mo
(1)sh
26.885 532.659 mo
33.943 532.659 li
@
%ADOBeginSubsetFont: YAAAAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRD+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B62B9496EA6A5F4B0DB6E285AE3CC5F76070E9D0900B8E9FB
8BB0D4197D1A2DD59EA5C34E7E07F4C901FEEAF8469C7C1D2ADC049F489D443C
94412286D62F02E1B2CDD53F2E790FA86ACAAB6C0C197701F917DC40928C56DF
8CB23C05C1517B6379CF4DFC0CF2B813A78C4566C10B5CFE2E1A85E39F2E7315
0E833D337F5C20540E3A61A8691FA5423C0C17FCF73D4EC215E0AA7E60754B3D
13B20403263483B2B6569F56CFD6328D38088230363BC189DF44352B95D109F5
F4208BF4AC6092171FFC97A681C9437D5E1E824878D17C139FB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRD+CMMI7 /Encoding get
dup 22 /mu put
pop
%ADOEndSubsetFont
/EVXJRD+CMMI7*1 
[11{/.notdef}rp /alpha 9{/.notdef}rp /lambda /mu 55{/.notdef}rp /N 25{/.notdef}rp 
/h 4{/.notdef}rp /m /n 5{/.notdef}rp /t 139{/.notdef}rp]
EVXJRD+CMMI7 nf
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
26.885 538.585 mo
(N)sh
%ADOBeginSubsetFont: QAAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRL+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/summationtext <1C60D8A8C9B521E322C24C96E0E231F0E47EB04843156366
A24A293B59AFC4B3918CB6344678BC1DF63E4B4187061E01F9A9212873DA6C87
4CF370BD0DB0D5C637E26FABE797593940996ADB65EE3E84D5A9E5E17601165C
94096235E3C4719045852E9B9AAC2FDD3B4EE793AA595A2CDD953AE0DA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRL+CMEX10 /Encoding get
dup 80 /summationtext put
pop
%ADOEndSubsetFont
/EVXJRL+CMEX10*1 
[40{/.notdef}rp /braceleftBigg 39{/.notdef}rp /summationtext 175{/.notdef}rp]
EVXJRL+CMEX10 nf
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
36.799 527.678 mo
(P)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
47.315 530.141 mo
(N)sh
47.315 538.139 mo
(n)sh
%ADOBeginSubsetFont: NAAAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRI+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B593D6D47FD9CC657AEA78BB93B93E797CFD3C2F45E7AE
99BBC72E0746A7E2A1090B9AA11860F7CCC70A62A9356998CC9E481F07FF34F4
8507607194D6BEE374D18623A13CD516823B17> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRI+CMR7 /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/EVXJRI+CMR7*1 
[43{/.notdef}rp /plus 5{/.notdef}rp /one 11{/.notdef}rp /equal 194{/.notdef}rp]
EVXJRI+CMR7 nf
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
52.2401 538.139 mo
(=1)
[6.11618 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
64.486 535.15 mo
(I)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
68.865 536.644 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
77.056 535.15 mo
(=)sh
%ADOBeginSubsetFont: MAAAAA+MSBM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRH+MSBM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7D8BE6A714A5FD3826963FB3DB3380DA86B297125B8E77351
ABA869F19E7CED66D13FFECA0E0E28567A6258BE38309A452BEDB9DEC00FEB32
273A95FE2F3571B590B6F9369F161D5F273BBEC30935D935F734489A0D0019C8
3CEB0E5AF9E605D11F0BD2AE55499A06F64827442DCA5280CA8B1AB70620F4E8
502B9789231BF538B04E0AE08F75907C796E750347332D2A37C00E8AEBA2A113
CB148248D0C187CF435D1474986029BCA39DB14CCB4C63CAE0F28C0B13F7AFDB
FE5AC125B645A519898335F8BB3423957B981DF0F4C4633F8C19C875FC18> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRH+MSBM10 /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
/EVXJRH+MSBM10*1 
[80{/.notdef}rp /P /.notdef /R 7{/.notdef}rp /Z 165{/.notdef}rp]
EVXJRH+MSBM10 nf
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
87.572 535.15 mo
(P)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
93.6604 535.15 mo
(\()sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
97.535 535.15 mo
(X)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
105.788 536.644 mo
(n)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
113.978 535.15 mo
(>)sh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
124.494 535.15 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
131.695 536.644 mo
(n)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
137.118 535.15 mo
(\))sh
143.763 535.15 mo
(=)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
154.276 535.15 mo
(p)sh
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
159.288 536.644 mo
(miss)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
175.343 535.15 mo
(=)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
192.475 530.706 mo
(\026)sh
187.055 532.659 mo
202.74 532.659 li
@
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
187.055 538.585 mo
(\025)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
191.781 538.585 mo
(+)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
197.897 538.585 mo
(\026)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
203.936 535.15 mo
(.)sh
208.897 535.15 mo
(Sim-)sh
-13.249 548.707 mo
(ilarly)sh
7.13522 548.707 mo
(,theprobabilityofacachehitis)
[4.85205 2.76971 4.98151 6.78476 4.98151 3.3176 4.98151 4.98151 4.42355 4.98151 2.76971 2.76971 
2.76971 2.76971 7.34271 4.98148 5.67892 6.78476 4.42355 4.42358 4.42358 4.98151 6.78485 4.98151 
2.76971 5.13092 2.76971 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
136.976 548.707 mo
(p)sh
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
141.988 550.201 mo
(hit)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
152.618 548.707 mo
(=1)
[10.519 0 ]xsh
%ADOBeginSubsetFont: UAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQZ+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQZ+CMSY10 /Encoding get
dup 32 /minus put
pop
%ADOEndSubsetFont
/EVXJQZ+CMSY10*1 
[21{/.notdef}rp /greaterequal 10{/.notdef}rp /minus 17{/.notdef}rp /element 5{/.notdef}rp /universal 
45{/.notdef}rp /braceleft /braceright 2{/.notdef}rp /bar 149{/.notdef}rp]
EVXJQZ+CMSY10 nf
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
168.244 548.707 mo
( )sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
176.122 548.707 mo
(p)sh
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
181.135 550.201 mo
(miss)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
197.19 548.707 mo
(=)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
214.381 544.784 mo
(\025)sh
208.901 546.216 mo
224.586 546.216 li
@
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
208.901 552.143 mo
(\025)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
213.627 552.143 mo
(+)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
219.743 552.143 mo
(\026)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
225.782 548.707 mo
(.)sh
-13.249 561.957 mo
(F)sh
-7.85922 561.957 mo
(orthe)
[4.98151 8.06 2.76971 4.98148 0 ]xsh
%ADOBeginSubsetFont: VAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6AE362EABFCC784A071A5BFBB37F8594C9C66C9B5F101A139
1E1BFFEB9CB340BC330E7735B4ED88EDF30305384A718B8C0B0FC03C56AD0D5E
22F00BB393AED7626E99A83076ED25FB245BCA4D5C3B95AB82E5A279ED9FC53C
8FC9ED726A5FAC280B286024EE53B479292A3BA181BEBBE8C31ED0CAE7A4F729
9D99B68C95F1887B85C783E7E848773A6FC33D5472D4D4083BAAC563055F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRA+CMMI10 /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/EVXJRA+CMMI10*1 
[11{/.notdef}rp /alpha 2{/.notdef}rp /delta 6{/.notdef}rp /lambda /mu 35{/.notdef}rp 
/period /comma /.notdef /slash /greater 5{/.notdef}rp /D 4{/.notdef}rp 
/I 3{/.notdef}rp /M 4{/.notdef}rp /R 5{/.notdef}rp /X 13{/.notdef}rp 
/f 6{/.notdef}rp /m /n /.notdef /p 143{/.notdef}rp]
EVXJRA+CMMI10 nf
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
22.091 561.957 mo
(n)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
28.071 558.342 mo
(th)
[3.00995 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
40.981 561.957 mo
(\256le)sh
58.4561 561.957 mo
(request,)sh
94.4524 561.957 mo
(wewritethe\256lewithretention)
[7.19327 9.16599 7.19327 3.31763 2.76971 2.76971 9.16595 2.76971 4.98151 9.15604 5.53943 2.76971 
9.16599 7.19327 2.76971 2.76971 9.72388 3.3176 4.42358 2.76971 4.42358 4.98151 2.76965 2.76978 
4.98145 0 ]xsh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
-13.249 573.912 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
-6.04898 575.406 mo
(n)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
-1.1239 575.406 mo
(+1)
[6.11618 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
13.683 573.912 mo
(ifthereisamiss\(andwedonotwriteotherwise\).)
[2.76971 7.54187 2.76971 4.98151 4.42358 3.3176 8.64795 2.76971 8.09003 8.64786 7.75122 2.76971 
3.87567 8.10007 3.3176 4.42355 4.98151 9.20578 7.1933 8.63794 4.98151 9.20578 4.98151 4.98148 
6.99408 7.1933 3.3176 2.76971 2.76971 8.64783 4.98151 2.76971 4.98151 4.42358 3.3176 7.19327 
2.76971 3.87573 4.42352 3.31763 0 ]xsh
-13.249 585.867 mo
(Thus,)sh
12.6548 585.867 mo
(the)sh
EVXJRC+NimbusRomNo9L-ReguItal*1 [9.963 0 0 -9.963 0 0 ]msf
28.315 585.867 mo
(expecteddamage)
[4.22437 4.42358 4.98151 4.42355 4.42358 2.76971 4.42358 8.46854 4.98151 4.98148 7.1933 4.88181 
4.8819 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
97.797 585.867 mo
(,)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
103.771 585.867 mo
(D)sh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
112.296 585.867 mo
(,canbeexpressedas:)
[5.97778 4.42358 4.42358 8.46854 4.98151 7.91058 4.27417 4.98151 4.98151 3.3176 4.42358 3.87567 
3.8757 4.42358 8.46851 4.42358 3.8757 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
21.121 612.964 mo
(D)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
32.413 612.964 mo
(=lim)
[15.072 2.76776 2.76773 0 ]xsh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
42.929 619.39 mo
(N)sh
EVXJRM+CMSY7*1 [6.974 0 0 -6.974 0 0 ]msf
49.987 619.39 mo
(!1)
[7.94269 0 ]xsh
%ADOBeginSubsetFont: QAAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRL+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketleftBigg <1C60D8A8C9B7F44AC4E1B867718DFA509124A77926D943
9C543D8B9AD03AE521189FDEBB5535EDC167EA773A983ADC5FF3748FC3354A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRL+CMEX10 /Encoding get
dup 34 /bracketleftBigg put
pop
%ADOEndSubsetFont
/EVXJRL+CMEX10*1 
[34{/.notdef}rp /bracketleftBigg 5{/.notdef}rp /braceleftBigg 39{/.notdef}rp /summationtext 175{/.notdef}rp]
EVXJRL+CMEX10 nf
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
67.533 595.928 mo
(")sh
%ADOBeginSubsetFont: MAAAAA+MSBM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRH+MSBM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B64FADC67CD6F922FEE3640D25B42FCA3A021742130DE8E5A7
593959B4B095EB55569A4E340D1AC23624BEAD5FA5580CE37D00F8AA4EEA9762
AA632209A9207CC2E5BB4067C484F5901A72A029F4AA14ED0EAA5D953C4760B1
ADD6F8521830072B2C8FE3A721FC93D22BC5258E198225D307825269C6F5CF46
9728A5E2D6686A719CB0C1FCCFF3AAD40C5E57CFB41DAC767908174BAC76253C
8E5482CC19FFF1619717A1CCA161E94A963151AB2CD8A2A21D3D721FF2C392C8
847903E815C5A3263BCB57BBE421326F2BDDEACA2E6AF54B5167BAD9BCBC74CE
B207BF1A4272F2BCC5C1690FE34F72F447383330A3508D55D2D281FDB7695AE9
0ABBDA3D0A8E4CA4A85258619589955E0ECAC49B6BA66B2577478B1C0FAA744D
D67A89298A5390BC44CCFBDD9431CC23FFF5B9CEDEC94938> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRH+MSBM10 /Encoding get
dup 69 /E put
pop
%ADOEndSubsetFont
/EVXJRH+MSBM10*1 
[69{/.notdef}rp /E 10{/.notdef}rp /P /.notdef /R 7{/.notdef}rp /Z 
165{/.notdef}rp]
EVXJRH+MSBM10 nf
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
73.344 612.964 mo
(E)sh
%ADOBeginSubsetFont: SAAAAA+EUSM7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SAAAAA+EUSM7 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009, 2011 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name EUSM7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/FontBBox {22 -192 1119 738} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 682 703] def
/OtherBlues [-132 -129] def
/BlueScale 0.04379 def
/StdHW [34] def
/StdVW [79] def
/StemSnapH [34 43] def
/StemSnapV [79 90] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B5907D13C90E82594670813A900441DB678AC5B6AFE36E3D2A
D04F2D1F2D24DA3F165D34418323066ED831ACAE744235288EA87BAF1445A410
30597610303AEF63E48E2C1BBBE32E6B675C5DDBBBE3A143B9974D652E3B3B94
0B7B81D6862B464DB5A412489A712F9437EEF6333FBF1D64CBAF6487F43445F2
04928C182092543FBCC8BC86C133558E5CB0608933BF6B208E77ED9B5DF28F4C
C7346E77DBA8528C0428FE93B1E53398E8B94EC1D8859C0E3B83EB76B83BD7D8
DBFD2923F95263CABD50AC76A792B8B19BBA38F966DD266247197999DA98974C
CEB726161E7618CAE6C190B7F6DCC802F31B2BCEB98A> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRN+EUSM7 /SAAAAA+EUSM7 findfont ct_VMDictPut
/EVXJRN+EUSM7*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
EVXJRN+EUSM7 nf
EVXJRN+EUSM7*1 [6.974 0 0 -6.974 0 0 ]msf
79.986 614.458 mo
(R)sh
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
88.265 595.928 mo
(")sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
97.327 606.224 mo
(1)sh
95.272 610.473 mo
104.363 610.473 li
@
%ADOBeginSubsetFont: VAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRA+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B6D671D38ABEF2C3AA4E9EF85233BCD577CC743D9BB72B06D1
C34EFFA73A8EEC485E47CB4255799230CE3B52ECA9DACF132C28D5023DE40AA9
3657FA765A68F9927890D6A99C6ADF1E426E5FE9E35D2F713DB32E49B7FA5285
9C2DFDFC8F7B5800FF94410ECD75C51D563B72E4CE7BF6A0DA5B3E0B6FCD8798
546F59FCAF14A879752BEB0E6C22EAB4A84FE3B041C4B97C68333C4FFAD5D2E8
57731FA926D2CD6D6B1870856FC4382AD902F4984DB02DEAEC75932D49CD323C
FF2FF5AF76629AD4B11E478073E034E2B4E9B43505D56042DA33A6E78FEA4BCD
4A0F11525678055021280A500CE9ADDA6E49D3632C3DA6662AF4C4449F02> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRA+CMMI10 /Encoding get
dup 78 /N put
pop
%ADOEndSubsetFont
/EVXJRA+CMMI10*1 
[11{/.notdef}rp /alpha 2{/.notdef}rp /delta 6{/.notdef}rp /lambda /mu 35{/.notdef}rp 
/period /comma /.notdef /slash /greater 5{/.notdef}rp /D 4{/.notdef}rp 
/I 3{/.notdef}rp /M /N 3{/.notdef}rp /R 5{/.notdef}rp /X 
13{/.notdef}rp /f 6{/.notdef}rp /m /n /.notdef /p 143{/.notdef}rp]
EVXJRA+CMMI10 nf
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
95.272 619.798 mo
(N)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
111.196 600.511 mo
(N)sh
%ADOBeginSubsetFont: QAAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRL+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketrightBigg <1C60D8A8C9B7F44AC4E1B867718DFA509124A7574CFE9
2EBF0A972256027F38715693AFC72202219C1689A2134C0DF3E679645BBC9C7> |-
/summationdisplay <1C60D8A8C9B08A95197FC21C1744E77FED1D6499B901C
04115566CD2A05BF472A1D10EF4CD07417172414F35FFA68E5FFEE3333B3840C
AD5B5C27DE9B5EFDB4E4D74D071891FE726835B825A146ECE072AD20A381EA08
9F35CD19567562F2AD093C03B0471BA9BCC2CAF6F576049F10AB3C7C97EBE946
5E1779F3B144546BFEE53E4131F258AF0F377996F67F1040B242A55E37D86AE3
9368AC197A4E722> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRL+CMEX10 /Encoding get
dup 35 /bracketrightBigg put
dup 88 /summationdisplay put
pop
%ADOEndSubsetFont
/EVXJRL+CMEX10*1 
[34{/.notdef}rp /bracketleftBigg /bracketrightBigg 4{/.notdef}rp /braceleftBigg 39{/.notdef}rp /summationtext 7{/.notdef}rp 
/summationdisplay 167{/.notdef}rp]
EVXJRL+CMEX10 nf
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
107.53 603.499 mo
(X)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
107.219 624.598 mo
(n)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
112.144 624.598 mo
(=1)
[6.11618 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
123.892 612.964 mo
(I)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
128.271 614.458 mo
(n)sh
%ADOBeginSubsetFont: UAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQZ+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/multiply <1C60D8A8C9B6FC2DFBC0267A928374077F187731D1F55F0904A50
A9A1427588F3AE59D58029DFB1EB6D506B2B9F239B852BC50EFCEFB0B4481632
E42227D9C61DAA6494051D9F9E9821DE9F8C9C781F84E715DC390B6D21A1575B
C3B4F54E2C290296FBEBA6EA27F8C6EB49BA5DA4D88E3ACE7B113A16CD1AD510
73367AEEAE071AC8BCF259F3E12E32D5D9F51B202434CFFD4CE82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQZ+CMSY10 /Encoding get
dup 2 /multiply put
pop
%ADOEndSubsetFont
/EVXJQZ+CMSY10*1 
[2{/.notdef}rp /multiply 18{/.notdef}rp /greaterequal 10{/.notdef}rp /minus 17{/.notdef}rp /element 
5{/.notdef}rp /universal 45{/.notdef}rp /braceleft /braceright 2{/.notdef}rp /bar 149{/.notdef}rp]
EVXJQZ+CMSY10 nf
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
135.908 612.964 mo
(\002)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
145.871 612.964 mo
(f)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
151.82 612.964 mo
(\()sh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
155.695 612.964 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
162.895 614.458 mo
(n)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
167.82 614.458 mo
(+1)
[6.11618 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
178.405 612.964 mo
(\))sh
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
182.28 595.928 mo
(##)
[5.8114 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
32.4131 646.798 mo
(=)sh
47.4864 646.798 mo
(lim)
[2.76773 2.76773 0 ]xsh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
42.929 653.224 mo
(N)sh
EVXJRM+CMSY7*1 [6.974 0 0 -6.974 0 0 ]msf
49.987 653.224 mo
(!1)
[7.94269 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
70.783 640.058 mo
(1)sh
68.728 644.308 mo
77.819 644.308 li
@
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
68.728 653.632 mo
(N)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
84.652 634.345 mo
(N)sh
EVXJRL+CMEX10*1 [9.963 0 0 -9.963 0 0 ]msf
80.986 637.334 mo
(X)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
80.675 658.432 mo
(n)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
85.6001 658.432 mo
(=1)
[6.11618 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
97.347 646.798 mo
(I)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
101.727 648.293 mo
(n)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
109.364 646.798 mo
(\002)sh
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
119.326 646.798 mo
(E)sh
EVXJRN+EUSM7*1 [6.974 0 0 -6.974 0 0 ]msf
125.968 648.293 mo
(R)sh
%ADOBeginSubsetFont: WAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJRB+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketleft <1C60D8A8C9B857441457F48D14F3F47B30BCEFA5B1BB16AB48
A411FDEDDBBCA4E8659FE72DCA596311382BB6> |-
/bracketright <1C60D8A8C9B857441457F48D14F3F47B30BD99EBE2CD4840C
E39569BE9FF8DDD4604DD868D11B34C9C90BD70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJRB+CMR10 /Encoding get
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/EVXJRB+CMR10*1 
[/.notdef /Delta 38{/.notdef}rp /parenleft /parenright /.notdef /plus 4{/.notdef}rp 
/zero /one /two 10{/.notdef}rp /equal 29{/.notdef}rp /bracketleft /.notdef 
/bracketright 11{/.notdef}rp /i 2{/.notdef}rp /l /m 146{/.notdef}rp]
EVXJRB+CMR10 nf
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
134.247 646.798 mo
([)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
137.015 646.798 mo
(f)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
142.965 646.798 mo
(\()sh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
146.84 646.798 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
154.04 648.293 mo
(n)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
158.965 648.293 mo
(+1)
[6.11618 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
169.55 646.798 mo
(\)])
[3.8746 0 ]xsh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
177.852 646.798 mo
(;)sh
%ADOBeginSubsetFont: LAAAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
systemdict begin
EVXJQW+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fl <1C60D8A8C9B7EF32570AFF8232948073BB5AB8BA9958E12740BD6120DA0
9BA71CD6F811C2BBB563106B582150E5A1C24BDA9759826DFC4919C1848E76E8
9761DBE4C4B2E6609DA375C7A7C8FEB3898BB254249657F8E306ED10A632687E
A2482F80F700AFD51B8B9A14589974C2A50465ABFAC5C01138999D96D63B7FC9
3C2BDB14C1CCB20E9D6A098294573BB579B56FF29BC82CD8DCA8CC6EA9AD2C62
FB1204B7951E6BCEA1D929F1CC1D7421119653F57C1E42B46EF0F374674275F6
1F798605ABED38C3641617B72BD49933BAA7F84CA6C418DE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EVXJQW+NimbusRomNo9L-Regu /Encoding get
dup 175 /fl put
pop
%ADOEndSubsetFont
/EVXJQW+NimbusRomNo9L-Regu*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash 
/zero /one /two /.notdef /four /five /six /seven 
2{/.notdef}rp /colon /semicolon 5{/.notdef}rp /A /B /C /D 
/E /F /.notdef /H /I 2{/.notdef}rp /L /M 
/N /O /P /.notdef /R /S /T /U 
/V /W 2{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /o /p 
/q /r /s /t /u /v /w /x 
/y /z 51{/.notdef}rp /fi /fl 80{/.notdef}rp]
EVXJQW+NimbusRomNo9L-Regu nf
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
216.657 646.798 mo
(\(1\))sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
32.413 670.786 mo
(=)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
42.929 670.786 mo
(p)sh
EVXJQW+NimbusRomNo9L-Regu*1 [6.974 0 0 -6.974 0 0 ]msf
47.941 672.28 mo
(miss)sh
EVXJQZ+CMSY10*1 [9.963 0 0 -9.963 0 0 ]msf
63.443 670.786 mo
(\002)sh
EVXJRH+MSBM10*1 [9.963 0 0 -9.963 0 0 ]msf
73.406 670.786 mo
(E)sh
EVXJRN+EUSM7*1 [6.974 0 0 -6.974 0 0 ]msf
80.048 672.28 mo
(R)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
88.327 670.786 mo
([)sh
EVXJRA+CMMI10*1 [9.963 0 0 -9.963 0 0 ]msf
91.0948 670.786 mo
(f)sh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
97.044 670.786 mo
(\()sh
EVXJRJ+EUSM10*1 [9.963 0 0 -9.963 0 0 ]msf
100.919 670.786 mo
(R)sh
EVXJRD+CMMI7*1 [6.974 0 0 -6.974 0 0 ]msf
108.119 672.28 mo
(n)sh
EVXJRI+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
113.044 672.28 mo
(+1)
[6.11618 0 ]xsh
EVXJRB+CMR10*1 [9.963 0 0 -9.963 0 0 ]msf
123.629 670.786 mo
(\)]])
[3.8746 2.76776 0 ]xsh
EVXJQW+NimbusRomNo9L-Regu*1 [9.963 0 0 -9.963 0 0 ]msf
216.657 670.786 mo
(\(2\))sh
EVXJQW+NimbusRomNo9L-Regu*1 [5.978 0 0 -5.978 0 0 ]msf
-5.27896 688.912 mo
(7)sh
EVXJQW+NimbusRomNo9L-Regu*1 [7.97 0 0 -7.97 0 0 ]msf
-1.79196 691.725 mo
(W)sh
5.09418 691.725 mo
(edenotethediscreteretentiontimeintheof\257inecachingsectionas)
[6.33615 3.98499 3.5387 3.98499 3.98502 2.21567 6.34415 2.21564 3.98502 6.33615 3.98499 2.21567 
3.1004 3.53867 2.65396 3.53867 2.21567 6.33615 2.65396 3.53867 2.21567 3.53867 3.98502 2.21567 
2.21564 3.98502 6.79047 2.21567 2.21564 6.20065 6.33615 2.21567 6.79037 2.21564 3.98502 6.33615 
3.98499 2.45477 4.43134 2.21564 3.98499 6.33618 3.53867 3.53867 3.5387 3.98499 2.21567 3.98502 
6.79047 3.10037 3.53867 3.5387 2.21567 2.21567 3.98499 6.78247 3.5387 0 ]xsh
%ADOBeginSubsetFont: TAAAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /TAAAAA+CMMI8 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
def
/UniqueID 5087383 def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/R <1C60D8A8C9B6D5A02F5320E8A3D49239885025A6B60462DA1F01EFEEEEB0
F0275130E12464DF18C7BF1C3EA83C167501CBB0DB85BAFB90649D79D9C04763
C14CD70012922CBE9E0B07EED1BBC557F2D1FB67C390CA93E8F1CED714A42B5D
099BD325B1E0B39D7814B18BD322640D717480EA3F523AF562DB872D6D230FFA
B0583842C7B2163911BF785A3A714B6B39D9E738E576909E32BE551CCDF51874
08DA73ACE42E54CB6B0029180A09AE135F5CEEBAD1069779178BC01A51C24DCF
35C045426EF058F37FB0A9433CEA2C47EACEF69280CEBFC2D0943DFBEAC0B918
495FE6E23A29C977410F5CD0E898B9B02A9876099C32876D20AA84EDCB4675D6
A286B3170DC2B69A5B537488C01652FBA30E28D2D326FE839119> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EVXJRO+CMMI8 /TAAAAA+CMMI8 findfont ct_VMDictPut
/EVXJRO+CMMI8*1 
[82{/.notdef}rp /R 173{/.notdef}rp]
EVXJRO+CMMI8 nf
EVXJRO+CMMI8*1 [7.97 0 0 -7.97 0 0 ]msf
-13.249 700.691 mo
(R)sh
EVXJQW+NimbusRomNo9L-Regu*1 [7.97 0 0 -7.97 0 0 ]msf
-4.03198 700.691 mo
(and)sh
10.2662 700.691 mo
(the)sh
22.7951 700.691 mo
(continuous)sh
60.5649 700.691 mo
(retention)sh
91.6877 700.691 mo
(for)sh
103.77 700.691 mo
(the)sh
116.299 700.691 mo
(conte)sh
133.442 700.691 mo
(xtofonlinecachingas)
[3.98499 5.00522 3.98502 5.44342 3.98499 3.98499 2.2157 2.21564 3.98499 6.32819 3.53867 3.53867 
3.5387 3.98499 2.21567 3.98502 6.77454 3.5387 0 ]xsh
EVXJRJ+EUSM10*1 [7.97 0 0 -7.97 0 0 ]msf
211.582 700.691 mo
(R)sh
EVXJQW+NimbusRomNo9L-Regu*1 [7.97 0 0 -7.97 0 0 ]msf
217.342 700.691 mo
(.)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/EVXJRO+CMMI8*1 uf
/EVXJRO+CMMI8 uf
/TAAAAA+CMMI8 uf
/EVXJRF+CMEX7*1 uf
/EVXJRF+CMEX7 uf
/ABAAAA+CMEX7 uf
/EVXJRB+CMR10*1 uf
/EVXJRB+CMR10 uf
/WAAAAA+CMR10 uf
/EVXJRD+CMMI7*1 uf
/EVXJRD+CMMI7 uf
/YAAAAA+CMMI7 uf
/EVXJRC+NimbusRomNo9L-ReguItal*1 uf
/EVXJRC+NimbusRomNo9L-ReguItal uf
/XAAAAA+NimbusRomNo9L-ReguItal uf
/EVXJRE+CMMI5*1 uf
/EVXJRE+CMMI5 uf
/ZAAAAA+CMMI5 uf
/EVXJRA+CMMI10*1 uf
/EVXJRA+CMMI10 uf
/VAAAAA+CMMI10 uf
/EVXJQY+mwb_cmsy10*1 uf
/EVXJQY+mwb_cmsy10 uf
/HAAAAA+mwb_cmsy10 uf
/EVXJQX+Helvetica*1 uf
/EVXJQX+Helvetica uf
/GAAAAA+Helvetica uf
/EVXJQZ+CMSY10*1 uf
/EVXJQZ+CMSY10 uf
/UAAAAA+CMSY10 uf
/EVXJQW+NimbusRomNo9L-Regu*1 uf
/EVXJQW+NimbusRomNo9L-Regu uf
/LAAAAA+NimbusRomNo9L-Regu uf
/EVXJQV+AdobeThai-Regular*1 uf
/EVXJQV+AdobeThai-Regular uf
/KAAAAA+AdobeThai-Regular uf
/EVXJRH+MSBM10*1 uf
/EVXJRH+MSBM10 uf
/MAAAAA+MSBM10 uf
/EVXJRN+EUSM7*1 uf
/EVXJRN+EUSM7 uf
/SAAAAA+EUSM7 uf
/EVXJRJ+EUSM10*1 uf
/EVXJRJ+EUSM10 uf
/OAAAAA+EUSM10 uf
/EVXJRL+CMEX10*1 uf
/EVXJRL+CMEX10 uf
/QAAAAA+CMEX10 uf
/EVXJRM+CMSY7*1 uf
/EVXJRM+CMSY7 uf
/RAAAAA+CMSY7 uf
/EVXJRK+NimbusRomNo9L-Medi*1 uf
/EVXJRK+NimbusRomNo9L-Medi uf
/PAAAAA+NimbusRomNo9L-Medi uf
/EVXJRI+CMR7*1 uf
/EVXJRI+CMR7 uf
/NAAAAA+CMR7 uf
/EVXJRG+CMR5*1 uf
/EVXJRG+CMR5 uf
/BBAAAA+CMR5 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
